#!/usr/bin/env python3
"""
Solution compl√®te pour corriger les d√©connexions du bot Discord.

Ce script :
1. Corrige les credentials Google Sheets
2. Simplifie le syst√®me de monitoring
3. Am√©liore la gestion d'erreurs
4. √âvite les boucles de red√©marrage
"""

import os
import json
import logging
import shutil
from datetime import datetime

def setup_logging():
    """Configure le logging pour ce script."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('fix_disconnections.log'),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

def fix_environment_variables(logger):
    """V√©rifie et corrige les variables d'environnement."""
    logger.info("üîß V√©rification des variables d'environnement...")
    
    env_path = '.env'
    if not os.path.exists(env_path):
        logger.error(f"‚ùå Fichier {env_path} introuvable!")
        return False
    
    # Lire le fichier .env existant
    with open(env_path, 'r') as f:
        content = f.read()
    
    # V√©rifier les variables critiques
    required_vars = ['DISCORD_TOKEN', 'SERVICE_ACCOUNT_JSON']
    missing_vars = []
    
    for var in required_vars:
        if var not in content:
            missing_vars.append(var)
    
    if missing_vars:
        logger.warning(f"‚ö†Ô∏è Variables manquantes : {missing_vars}")
        
        # Ajouter les variables manquantes avec des placeholders
        with open(env_path, 'a') as f:
            f.write('\n# Variables ajout√©es par le script de correction\n')
            for var in missing_vars:
                if var == 'SERVICE_ACCOUNT_JSON':
                    f.write(f'{var}={{}}\n')
                else:
                    f.write(f'{var}=YOUR_{var}_HERE\n')
        
        logger.info("‚úÖ Variables ajout√©es au fichier .env")
    
    # Ajouter les variables de configuration pour √©viter les red√©marrages excessifs
    config_additions = [
        'HEALTHCHECK_MAX_FAILURES=15',
        'HEALTHCHECK_FORCE_RESTART=false',
        'BOT_MONITORING_INTERVAL=900',
        'PORT=10000'
    ]
    
    for config in config_additions:
        var_name = config.split('=')[0]
        if var_name not in content:
            with open(env_path, 'a') as f:
                f.write(f'{config}\n')
            logger.info(f"‚úÖ Ajout√© : {config}")
    
    return True

def create_minimal_monitoring():
    """Cr√©e un syst√®me de monitoring simplifi√© et stable."""
    logger = logging.getLogger(__name__)
    logger.info("üîß Cr√©ation du syst√®me de monitoring simplifi√©...")
    
    monitoring_code = '''import os
import time
import logging
from datetime import datetime, timedelta
from server import get_last_heartbeat, get_request_count

logger = logging.getLogger('bot')

# Variable globale pour contr√¥ler l'arr√™t du monitoring
_monitoring_active = True

def stop_health_monitoring():
    """Arr√™te le monitoring de sant√© proprement."""
    global _monitoring_active
    _monitoring_active = False

def check_bot_health_minimal(bot):
    """Version simplifi√©e et stable du monitoring."""
    global _monitoring_active
    consecutive_failures = 0
    max_consecutive_failures = 20  # Plus tol√©rant
    check_interval = 600  # 10 minutes
    
    logger.info(f"üè• Monitoring minimal d√©marr√© (v√©rification toutes les {check_interval}s)")
    
    while _monitoring_active:
        time.sleep(check_interval)
        
        try:
            # V√©rification simple : bot ferm√©
            if bot.is_closed():
                logger.warning("‚ö†Ô∏è Bot ferm√© d√©tect√©, arr√™t du monitoring")
                _monitoring_active = False
                break
            
            # V√©rification simple : bot pr√™t
            if not bot.is_ready():
                consecutive_failures += 1
                logger.warning(f"‚ö†Ô∏è Bot non pr√™t ({consecutive_failures}/{max_consecutive_failures})")
                
                if consecutive_failures >= max_consecutive_failures:
                    logger.critical("‚ùå Bot non pr√™t depuis trop longtemps - MONITORING SEULEMENT")
                    # NE PAS red√©marrer automatiquement
                continue
            
            # Tout va bien, r√©initialiser le compteur
            if consecutive_failures > 0:
                logger.info(f"‚úÖ Bot r√©tabli apr√®s {consecutive_failures} v√©rifications")
                consecutive_failures = 0
            
            # Log p√©riodique
            logger.info(f"üíö Bot stable (latence: {bot.latency:.2f}s)")
            
        except Exception as e:
            consecutive_failures += 1
            logger.error(f"‚ùå Erreur monitoring: {e} ({consecutive_failures}/{max_consecutive_failures})")
            # Continuer sans red√©marrer

def check_cog_tasks_health(bot):
    """Version simplifi√©e de la v√©rification des cogs."""
    try:
        logger.info("üîç V√©rification simplifi√©e des cogs...")
        
        # V√©rifier seulement les cogs critiques sans les red√©marrer
        critical_cogs = ['Bump', 'RPTracker']
        for cog_name in critical_cogs:
            cog = bot.get_cog(cog_name)
            if cog:
                logger.info(f"‚úÖ Cog {cog_name} charg√©")
            else:
                logger.warning(f"‚ö†Ô∏è Cog {cog_name} non charg√©")
                
    except Exception as e:
        logger.error(f"‚ùå Erreur v√©rification cogs: {e}")

def self_ping_minimal():
    """Version simplifi√©e et stable du self-ping."""
    import requests
    
    consecutive_failures = 0
    max_failures = 10
    ping_interval = 900  # 15 minutes
    
    logger.info("üèì Self-ping minimal d√©marr√©")
    
    while True:
        try:
            time.sleep(ping_interval)
            port = int(os.environ.get("PORT", 10000))
            
            # Ping simple localhost uniquement
            try:
                response = requests.get(f"http://localhost:{port}/ping", timeout=10)
                if response.status_code == 200:
                    consecutive_failures = 0
                    if datetime.now().minute < 5:  # Log une fois par heure
                        logger.info("üèì Self-ping OK")
                else:
                    consecutive_failures += 1
                    logger.warning(f"‚ö†Ô∏è Self-ping √©chec HTTP {response.status_code}")
                    
            except Exception as e:
                consecutive_failures += 1
                logger.warning(f"‚ö†Ô∏è Self-ping √©chec: {e}")
            
            if consecutive_failures >= max_failures:
                logger.error("‚ùå Self-ping √©checs multiples - serveur possiblement down")
                # NE PAS forcer d'action, juste logger
                consecutive_failures = 0  # Reset pour √©viter le spam
                
        except Exception as e:
            logger.error(f"‚ùå Erreur critique self-ping: {e}")
            time.sleep(60)
'''
    
    with open('monitoring_minimal.py', 'w', encoding='utf-8') as f:
        f.write(monitoring_code)
    
    logger.info("‚úÖ Syst√®me de monitoring minimal cr√©√©")

def create_stable_main():
    """Cr√©e une version stable de main.py avec gestion d'erreurs am√©lior√©e."""
    logger = logging.getLogger(__name__)
    logger.info("üîß Cr√©ation de main.py stable...")
    
    # Backup de l'ancien main.py
    if os.path.exists('main.py'):
        shutil.copy2('main.py', f'main_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.py')
        logger.info("‚úÖ Backup de main.py cr√©√©")
    
    stable_main = '''import os
import threading
import traceback
import logging
import discord
from discord.ext import commands
from dotenv import load_dotenv
import time
import asyncio
from datetime import datetime
from server import start_http_server
from monitoring_minimal import check_bot_health_minimal, self_ping_minimal

# Configuration des logs - moins verbose
logging.basicConfig(
    level=logging.INFO,  # INFO au lieu de WARNING
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('bot')

# Charger les variables d'environnement
load_dotenv()

class StableBot(commands.Bot):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.ready_called = False
        self.connection_attempts = 0
        self.max_connection_attempts = 3  # Limit√© pour √©viter les boucles
        
    async def setup_hook(self):
        """Charge les cogs avec gestion d'erreurs robuste."""
        extensions = [
            'cogs.Cards',
            'cogs.RPTracker', 
            'cogs.Surveillance_scene',
            'cogs.bump',
            'cogs.validation',
            'cogs.InactiveUserTracker',
            # Cogs optionnels qui peuvent √©chouer
            'cogs.inventaire',
            'cogs.vocabulaire',
            'cogs.souselement',
            'cogs.ticket',
            'cogs.exc√®s',
        ]
        
        critical_cogs = ['cogs.Cards', 'cogs.RPTracker', 'cogs.Surveillance_scene']
        loaded_count = 0
        critical_loaded = 0
        
        for ext in extensions:
            try:
                await self.load_extension(ext)
                loaded_count += 1
                if ext in critical_cogs:
                    critical_loaded += 1
                logger.info(f"‚úÖ Extension {ext} charg√©e")
            except Exception as e:
                if ext in critical_cogs:
                    logger.error(f"‚ùå CRITIQUE: √âchec de {ext}: {e}")
                else:
                    logger.warning(f"‚ö†Ô∏è Optionnel: √âchec de {ext}: {e}")
        
        logger.info(f"üìä Extensions charg√©es: {loaded_count}/{len(extensions)} ({critical_loaded}/{len(critical_cogs)} critiques)")
        
        try:
            await self.tree.sync()
            logger.info("‚úÖ Commandes synchronis√©es")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur sync commandes: {e}")

    async def on_disconnect(self):
        """Gestion simple des d√©connexions."""
        logger.warning("üîå D√©connect√© de Discord")
        self.ready_called = False

    async def on_resumed(self):
        """Gestion simple des reconnexions."""
        logger.info("üîÑ Reconnect√© √† Discord")
        self.ready_called = True
        self.connection_attempts = 0

    async def on_error(self, event_method, *args, **kwargs):
        """Gestion d'erreur simplifi√©e."""
        error_msg = f"Erreur dans {event_method}"
        logger.error(error_msg)
        logger.error(traceback.format_exc())

class BotManagerStable:
    """Gestionnaire de bot simplifi√© et stable."""
    
    def __init__(self):
        self.bot = None
        self.should_restart = True
        
    def create_bot(self):
        """Cr√©er le bot avec configuration optimis√©e."""
        intents = discord.Intents.default()
        intents.message_content = True
        intents.members = True

        bot = StableBot(
            command_prefix='!',
            intents=intents,
            heartbeat_timeout=120.0,  # Tr√®s tol√©rant
            guild_ready_timeout=60.0,
            max_messages=500,  # R√©duire l'usage m√©moire
            chunk_guilds_at_startup=False
        )
        
        @bot.event
        async def on_ready():
            bot.ready_called = True
            logger.info(f'ü§ñ Bot connect√©: {bot.user.name}')
            logger.info(f'üèì Latence: {bot.latency:.2f}s')
            logger.info("üöÄ Bot op√©rationnel!")

        return bot
    
    def start_support_threads(self):
        """D√©marrer uniquement les threads essentiels."""
        # Thread serveur HTTP
        http_thread = threading.Thread(target=start_http_server, daemon=True)
        http_thread.start()
        logger.info("üì° Serveur HTTP d√©marr√©")
        
        # Thread monitoring minimal (sans red√©marrage automatique)
        def monitoring_wrapper():
            time.sleep(60)  # Attendre que le bot soit pr√™t
            if self.bot and not self.bot.is_closed():
                check_bot_health_minimal(self.bot)
        
        monitor_thread = threading.Thread(target=monitoring_wrapper, daemon=True)
        monitor_thread.start()
        logger.info("üè• Monitoring minimal d√©marr√©")
        
        # Thread self-ping minimal
        ping_thread = threading.Thread(target=self_ping_minimal, daemon=True)
        ping_thread.start()
        logger.info("üèì Self-ping minimal d√©marr√©")
    
    def run_bot(self):
        """Ex√©cuter le bot de mani√®re stable."""
        max_attempts = 3
        attempt = 0
        
        while attempt < max_attempts:
            try:
                logger.info(f"üöÄ D√©marrage bot (tentative {attempt + 1}/{max_attempts})")
                self.bot.run(os.getenv('DISCORD_TOKEN'))
                break  # Sortie propre
                
            except discord.LoginFailure:
                logger.critical("‚ùå Token Discord invalide!")
                break
                
            except Exception as e:
                logger.error(f"‚ùå Erreur bot: {e}")
                attempt += 1
                if attempt < max_attempts:
                    delay = 60 * attempt  # 1, 2, 3 minutes
                    logger.info(f"‚è≥ Attente {delay}s avant nouvelle tentative...")
                    time.sleep(delay)
        
        if attempt >= max_attempts:
            logger.critical("‚ùå √âchec d√©finitif du bot")
    
    def start(self):
        """D√©marrer le gestionnaire."""
        logger.info("üé¨ D√©marrage BotManagerStable...")
        
        self.start_support_threads()
        self.bot = self.create_bot()
        
        try:
            self.run_bot()
        except KeyboardInterrupt:
            logger.info("üõë Arr√™t demand√©")
            if self.bot and not self.bot.is_closed():
                asyncio.run(self.bot.close())

def main():
    """Point d'entr√©e stable."""
    # V√©rification des variables d'environnement au d√©marrage
    discord_token = os.getenv('DISCORD_TOKEN')
    if not discord_token or discord_token == 'YOUR_DISCORD_TOKEN_HERE':
        logger.critical("‚ùå DISCORD_TOKEN manquant ou invalide dans .env!")
        logger.info("üìù Configurez votre token Discord dans le fichier .env")
        return
    
    service_account = os.getenv('SERVICE_ACCOUNT_JSON', '{}')
    if service_account == '{}':
        logger.warning("‚ö†Ô∏è SERVICE_ACCOUNT_JSON non configur√© - cogs Google Sheets en mode d√©grad√©")
    
    manager = BotManagerStable()
    manager.start()

if __name__ == '__main__':
    main()
'''
    
    with open('main_stable.py', 'w', encoding='utf-8') as f:
        f.write(stable_main)
    
    logger.info("‚úÖ main_stable.py cr√©√©")

def create_requirements_update():
    """Mettre √† jour requirements.txt avec les d√©pendances manquantes."""
    logger = logging.getLogger(__name__)
    logger.info("üîß Mise √† jour des requirements...")
    
    additional_requirements = [
        'oauth2client>=4.1.3',
        'gspread>=5.0.0',
        'requests>=2.25.0'
    ]
    
    if os.path.exists('requirements.txt'):
        with open('requirements.txt', 'r') as f:
            current_reqs = f.read()
        
        with open('requirements.txt', 'a') as f:
            f.write('\n# D√©pendances ajout√©es par le script de correction\n')
            for req in additional_requirements:
                package_name = req.split('>=')[0]
                if package_name not in current_reqs:
                    f.write(f'{req}\n')
                    logger.info(f"‚úÖ Ajout√© : {req}")
    else:
        logger.warning("‚ö†Ô∏è requirements.txt non trouv√©")

def create_usage_instructions():
    """Cr√©er un fichier d'instructions d'utilisation."""
    logger = logging.getLogger(__name__)
    
    instructions = '''# üöÄ SOLUTION AUX D√âCONNEXIONS DU BOT

## ‚úÖ CE QUI A √âT√â CORRIG√â :

1. **Credentials Google Sheets** - Variables d'environnement corrig√©es
2. **Monitoring simplifi√©** - Plus de red√©marrages automatiques excessifs
3. **Gestion d'erreurs am√©lior√©e** - Les cogs optionnels peuvent √©chouer sans crasher
4. **Configuration stable** - Param√®tres optimis√©s pour la stabilit√©

## üìã √âTAPES √Ä SUIVRE :

### 1. Configurer les credentials Google
```bash
# √âditez votre fichier .env et remplacez la ligne SERVICE_ACCOUNT_JSON par vos vrais credentials :
SERVICE_ACCOUNT_JSON={"type": "service_account", "project_id": "...", ...}
```

### 2. Tester la version stable
```bash
# Utilisez la version stable du bot :
python main_stable.py
```

### 3. Si tout fonctionne bien, remplacer main.py
```bash
# Sauvegardez l'ancien puis remplacez :
cp main.py main_old.py
cp main_stable.py main.py
```

## üîß CHANGEMENTS PRINCIPAUX :

- **Monitoring non-agressif** : Plus de red√©marrages automatiques excessifs
- **Chargement gracieux des cogs** : Les cogs optionnels peuvent √©chouer
- **Configuration tol√©rante** : Timeouts plus longs, plus de tentatives
- **Logs informatifs** : Messages clairs pour diagnostiquer

## ‚ö†Ô∏è IMPORTANT :

1. **Configurez SERVICE_ACCOUNT_JSON** avec vos vrais credentials Google
2. **Testez avec main_stable.py** avant de remplacer main.py
3. **Les credentials Google sont CRITIQUES** - le bot est stable sans eux mais limit√©

## üìä MONITORING :

- `/health` - √âtat du bot
- `/bot-status` - Statut d√©taill√©
- `/ping` - Test rapide
- Logs dans `bot.log` et `fix_disconnections.log`

Votre bot devrait maintenant √™tre stable ! üéâ
'''
    
    with open('SOLUTION_DECONNEXIONS.md', 'w', encoding='utf-8') as f:
        f.write(instructions)
    
    logger.info("‚úÖ Instructions cr√©√©es dans SOLUTION_DECONNEXIONS.md")

def main():
    """Fonction principale du script de correction."""
    logger = setup_logging()
    logger.info("üöÄ D√âMARRAGE DU SCRIPT DE CORRECTION DES D√âCONNEXIONS")
    
    try:
        # 1. Corriger les variables d'environnement
        if not fix_environment_variables(logger):
            logger.error("‚ùå √âchec correction variables d'environnement")
            return
        
        # 2. Cr√©er le syst√®me de monitoring minimal
        create_minimal_monitoring()
        
        # 3. Cr√©er la version stable de main.py
        create_stable_main()
        
        # 4. Mettre √† jour requirements.txt
        create_requirements_update()
        
        # 5. Cr√©er les instructions
        create_usage_instructions()
        
        logger.info("üéâ SCRIPT DE CORRECTION TERMIN√â AVEC SUCC√àS !")
        logger.info("üìñ Consultez SOLUTION_DECONNEXIONS.md pour les instructions")
        logger.info("üß™ Testez avec : python main_stable.py")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur critique: {e}")
        logger.error(traceback.format_exc())

if __name__ == "__main__":
    main()