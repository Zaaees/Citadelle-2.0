import os
import time
import logging
from datetime import datetime, timedelta

from utils.connection_manager import resource_monitor
from server import get_last_heartbeat, get_request_count

logger = logging.getLogger('bot')


def check_cog_tasks_health(bot):
    """V√©rifie la sant√© des t√¢ches dans les cogs."""
    try:
        logger.info("üîç V√©rification de la sant√© des t√¢ches des cogs...")

        # V√©rifier les t√¢ches du cog bump
        bump_cog = bot.get_cog('Bump')
        if bump_cog:
            try:
                if hasattr(bump_cog, 'check_bump'):
                    if not bump_cog.check_bump.is_running():
                        logger.warning("‚ö†Ô∏è T√¢che check_bump arr√™t√©e, tentative de red√©marrage...")
                        bump_cog.check_bump.restart()
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la v√©rification des t√¢ches Bump: {e}")

        # V√©rifier les t√¢ches du cog RPTracker
        rp_tracker_cog = bot.get_cog('RPTracker')
        if rp_tracker_cog:
            try:
                if hasattr(rp_tracker_cog, 'update_loop'):
                    if not rp_tracker_cog.update_loop.is_running():
                        logger.warning("‚ö†Ô∏è T√¢che update_loop arr√™t√©e, tentative de red√©marrage...")
                        rp_tracker_cog.update_loop.restart()
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la v√©rification des t√¢ches RPTracker: {e}")

        logger.info("‚úÖ V√©rification des t√¢ches des cogs termin√©e")

    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la v√©rification globale des t√¢ches: {e}")


def check_bot_health(bot):
    consecutive_failures = 0
    max_consecutive_failures = int(os.environ.get('HEALTHCHECK_MAX_FAILURES', '5'))  # Plus agressif
    force_restart = os.environ.get('HEALTHCHECK_FORCE_RESTART', 'true').lower() in ('1', 'true', 'yes')  # Activ√© par d√©faut
    last_task_check = datetime.now()
    last_latency_check = datetime.now()
    high_latency_count = 0

    while True:
        time.sleep(120)  # V√©rification plus fr√©quente (2 minutes)

        try:
            # V√©rifications de sant√©
            current_time = datetime.now()
            
            # V√©rifier si le bot est ferm√©
            if bot.is_closed():
                logger.warning("‚ö†Ô∏è Bot ferm√© d√©tect√©, arr√™t du monitoring")
                break

            # 1. V√©rifier si on_ready a √©t√© appel√©
            if not bot.ready_called:
                consecutive_failures += 1
                logger.warning(
                    f"‚ö†Ô∏è on_ready n'a pas encore √©t√© appel√© (√©chec {consecutive_failures}/{max_consecutive_failures})"
                )
                if consecutive_failures >= max_consecutive_failures:
                    logger.critical(
                        "‚ùå on_ready n'a jamais √©t√© appel√© apr√®s plusieurs v√©rifications. Red√©marrage du bot..."
                    )
                    if force_restart:
                        try:
                            bot.loop.call_soon_threadsafe(bot.close)
                        except Exception as e:
                            logger.error(f"Erreur lors du close: {e}")
                    else:
                        logger.error("on_ready jamais appel√© - red√©marrage non forc√© (configurable)")
                continue

            # 2. V√©rifier la latence (plus strict)
            if bot.latency == float('inf') or bot.latency > 15.0:  # Seuil plus strict
                high_latency_count += 1
                consecutive_failures += 1
                logger.warning(
                    f"‚ö†Ô∏è Latence probl√©matique: {bot.latency}s (compte: {high_latency_count}, √©chec {consecutive_failures}/{max_consecutive_failures})"
                )
                
                # Plusieurs v√©rifications de latence √©lev√©e = probl√®me
                if high_latency_count >= 3 or consecutive_failures >= max_consecutive_failures:
                    logger.critical(f"‚ùå Latence critique persistante: {bot.latency}s. Red√©marrage du bot...")
                    if force_restart:
                        try:
                            bot.loop.call_soon_threadsafe(bot.close)
                        except Exception as e:
                            logger.error(f"Erreur lors du close: {e}")
                    else:
                        logger.error("Latence critique d√©tect√©e - red√©marrage non forc√© (configurable)")
                continue
            else:
                # R√©initialiser le compteur si la latence redevient normale
                if high_latency_count > 0:
                    logger.info(f"‚úÖ Latence redevenue normale: {bot.latency}s")
                high_latency_count = 0

            # 3. V√©rifier si le bot est connect√© et fonctionnel
            if not bot.is_ready():
                consecutive_failures += 1
                logger.warning(
                    f"‚ö†Ô∏è Bot non pr√™t (√©chec {consecutive_failures}/{max_consecutive_failures})"
                )
                if consecutive_failures >= max_consecutive_failures:
                    logger.critical(
                        "‚ùå Bot non pr√™t apr√®s plusieurs v√©rifications. Red√©marrage..."
                    )
                    if force_restart:
                        try:
                            bot.loop.call_soon_threadsafe(bot.close)
                        except Exception as e:
                            logger.error(f"Erreur lors du close: {e}")
                    else:
                        logger.error("Bot non pr√™t - red√©marrage non forc√© (configurable)")
                continue
            
            # 3.5 V√©rifier la connexion WebSocket
            if hasattr(bot, 'ws') and bot.ws and bot.ws.is_ratelimited():
                logger.warning("‚ö†Ô∏è Bot limit√© par Discord (rate limited)")
                consecutive_failures += 1
                if consecutive_failures >= max_consecutive_failures:
                    logger.critical("‚ùå Rate limiting persistant. Red√©marrage...")
                    if force_restart:
                        try:
                            bot.loop.call_soon_threadsafe(bot.close)
                        except Exception as e:
                            logger.error(f"Erreur lors du close: {e}")
                continue

            # 4. V√©rifier les t√¢ches des cogs toutes les 10 minutes
            if (current_time - last_task_check).total_seconds() > 600:  # 10 minutes
                check_cog_tasks_health(bot)
                last_task_check = current_time

            # 5. Nettoyer les ressources p√©riodiquement
            try:
                resource_monitor.check_and_cleanup()
            except Exception as e:
                logger.error(f"Erreur lors du nettoyage des ressources: {e}")

            # 6. V√©rifier le heartbeat du serveur HTTP
            time_since_heartbeat = current_time - get_last_heartbeat()
            if time_since_heartbeat > timedelta(minutes=8):  # Plus strict
                logger.warning(f"‚ö†Ô∏è Aucun heartbeat HTTP depuis {time_since_heartbeat}")
                consecutive_failures += 1

            # Si on arrive ici, tout va bien
            if consecutive_failures > 0:
                logger.info(
                    f"‚úÖ Sant√© du bot r√©tablie apr√®s {consecutive_failures} √©checs"
                )
            consecutive_failures = 0

            # Mettre √† jour l'√©tat du bot
            try:
                from bot_state import update_bot_state
                update_bot_state('connected', latency=bot.latency)
            except ImportError:
                pass
            
            logger.info(
                f"üíö Sant√© du bot: OK (latence: {bot.latency:.2f}s, requ√™tes HTTP: {get_request_count()}, √©checs: {consecutive_failures})"
            )

        except Exception as e:
            consecutive_failures += 1
            logger.error(
                f"‚ùå Erreur lors de la v√©rification de sant√©: {e} (√©chec {consecutive_failures}/{max_consecutive_failures})"
            )
            traceback.print_exc()
            
            if consecutive_failures >= max_consecutive_failures:
                logger.critical(
                    "‚ùå Trop d'erreurs lors des v√©rifications de sant√©. Red√©marrage..."
                )
                if force_restart:
                    try:
                        bot.loop.call_soon_threadsafe(bot.close)
                    except Exception as close_error:
                        logger.error(f"Erreur lors du close: {close_error}")
                else:
                    logger.error("Trop d'erreurs lors des v√©rifications de sant√© - red√©marrage non forc√© (configurable)")


def self_ping():
    """Fonction pour se ping soi-m√™me et maintenir l'activit√©"""
    import requests
    
    consecutive_failures = 0
    max_failures = 3

    while True:
        try:
            time.sleep(300)  # Ping toutes les 5 minutes
            port = int(os.environ.get("PORT", 10000))
            ping_success = False

            # Essayer de ping localhost d'abord
            try:
                response = requests.get(f"http://localhost:{port}/ping", timeout=10)
                if response.status_code == 200:
                    logger.info("üèì Self-ping r√©ussi (localhost)")
                    ping_success = True
                    consecutive_failures = 0
            except Exception as e:
                logger.debug(f"Localhost ping failed: {e}")

            # Si localhost ne marche pas, essayer l'URL Render si disponible
            if not ping_success:
                render_url = os.environ.get("RENDER_EXTERNAL_URL")
                if render_url:
                    try:
                        response = requests.get(f"{render_url}/ping", timeout=15)
                        if response.status_code == 200:
                            logger.info("üèì Self-ping r√©ussi (Render URL)")
                            ping_success = True
                            consecutive_failures = 0
                    except Exception as e:
                        logger.debug(f"Render URL ping failed: {e}")

            if not ping_success:
                consecutive_failures += 1
                logger.warning(f"‚ö†Ô∏è Self-ping √©chou√© ({consecutive_failures}/{max_failures})")
                
                if consecutive_failures >= max_failures:
                    logger.error("‚ùå Serveur HTTP semble non r√©actif apr√®s plusieurs tentatives")

        except Exception as e:
            consecutive_failures += 1
            logger.error(f"‚ùå Erreur lors du self-ping: {e} ({consecutive_failures}/{max_failures})")
