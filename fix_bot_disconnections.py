#!/usr/bin/env python3
"""
Script de correction pour r√©soudre les d√©connexions du bot sur Render.
Corrige les probl√®mes de credentials Google, timeouts, et optimise le monitoring.
"""

import json
import os
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def fix_google_credentials():
    """V√©rifie et corrige les credentials Google Sheets."""
    try:
        service_account_json = os.getenv('SERVICE_ACCOUNT_JSON')
        if not service_account_json:
            logger.error("‚ùå SERVICE_ACCOUNT_JSON manquant dans les variables d'environnement")
            return False
            
        # Valider le JSON
        try:
            creds_info = json.loads(service_account_json)
            required_keys = ['type', 'project_id', 'private_key_id', 'private_key', 'client_email']
            
            for key in required_keys:
                if key not in creds_info:
                    logger.error(f"‚ùå Cl√© manquante dans SERVICE_ACCOUNT_JSON: {key}")
                    return False
                    
            if not creds_info['private_key'].strip():
                logger.error("‚ùå private_key vide dans SERVICE_ACCOUNT_JSON")
                return False
                
            logger.info("‚úÖ Credentials Google Sheets valides")
            return True
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå SERVICE_ACCOUNT_JSON n'est pas un JSON valide: {e}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la v√©rification des credentials: {e}")
        return False

def optimize_monitoring_settings():
    """Recommandations pour optimiser le monitoring sur Render."""
    recommendations = {
        'HEALTHCHECK_MAX_FAILURES': '12',  # Plus tol√©rant
        'HEALTHCHECK_FORCE_RESTART': 'false',  # D√©sactiv√© pour Render
        'BOT_MONITORING_INTERVAL': '600',  # 10 minutes
        'GOOGLE_SHEETS_TIMEOUT': '30',  # 30 secondes max par op√©ration
        'RENDER_EXTERNAL_URL': 'https://votre-app.onrender.com'  # √Ä remplacer
    }
    
    logger.info("üîß Recommandations de variables d'environnement pour Render:")
    for key, value in recommendations.items():
        current = os.getenv(key, 'NON D√âFINIE')
        logger.info(f"  {key}: {current} ‚Üí {value}")
    
    return recommendations

def check_cog_health():
    """V√©rifie la sant√© des cogs probl√©matiques."""
    project_root = Path(__file__).parent
    
    # V√©rifier les fichiers critiques
    critical_files = [
        'cogs/Surveillance_scene.py',
        'cogs/Cards.py', 
        'cogs/bump.py',
        'monitoring.py',
        'main.py'
    ]
    
    for file_path in critical_files:
        full_path = project_root / file_path
        if not full_path.exists():
            logger.error(f"‚ùå Fichier critique manquant: {file_path}")
            return False
        else:
            logger.info(f"‚úÖ {file_path} pr√©sent")
    
    return True

def main():
    """Point d'entr√©e principal."""
    logger.info("üîß Diagnostic et correction des probl√®mes de d√©connexion")
    logger.info("=" * 60)
    
    # 1. V√©rifier les credentials Google
    logger.info("1Ô∏è‚É£ V√©rification des credentials Google Sheets...")
    if not fix_google_credentials():
        logger.error("‚ùå PROBL√àME CRITIQUE: Credentials Google non valides")
        logger.error("   ‚Üí V√©rifiez SERVICE_ACCOUNT_JSON dans Render Dashboard")
        return False
    
    # 2. V√©rifier les fichiers du projet
    logger.info("2Ô∏è‚É£ V√©rification des fichiers critiques...")
    if not check_cog_health():
        logger.error("‚ùå PROBL√àME: Fichiers critiques manquants")
        return False
    
    # 3. Recommandations d'optimisation
    logger.info("3Ô∏è‚É£ Optimisation des param√®tres de monitoring...")
    recommendations = optimize_monitoring_settings()
    
    # 4. R√©sum√© des actions √† effectuer
    logger.info("=" * 60)
    logger.info("üìã ACTIONS REQUISES:")
    logger.info("1. Dans Render Dashboard ‚Üí Environment:")
    for key, value in recommendations.items():
        logger.info(f"   ‚Ä¢ {key} = {value}")
    
    logger.info("\n2. Red√©ployer l'application sur Render")
    logger.info("3. Surveiller les logs pendant 24h")
    
    logger.info("\n‚úÖ Diagnostic termin√©. Suivez les actions ci-dessus.")
    return True

if __name__ == '__main__':
    main()