"""
Module sp√©cialement con√ßu pour maintenir le bot actif sur Render.
R√©sout les probl√®mes de d√©connexion silencieuse.
"""

import asyncio
import logging
import os
import time
from datetime import datetime, timedelta

logger = logging.getLogger('bot')

class RenderKeepAlive:
    """Gestionnaire sp√©cialis√© pour maintenir la connexion sur Render."""
    
    def __init__(self, bot):
        self.bot = bot
        self.last_activity = datetime.now()
        self.activity_task = None
        self.is_running = False
        
    async def start_keepalive(self):
        """D√©marre le syst√®me de keep-alive."""
        if self.is_running:
            return
            
        self.is_running = True
        self.activity_task = asyncio.create_task(self._activity_loop())
        logger.info("üîÑ Render Keep-Alive activ√©")
        
    async def stop_keepalive(self):
        """Arr√™te le syst√®me de keep-alive."""
        self.is_running = False
        if self.activity_task and not self.activity_task.done():
            self.activity_task.cancel()
            try:
                await self.activity_task
            except asyncio.CancelledError:
                pass
        logger.info("üõë Render Keep-Alive arr√™t√©")
        
    async def _activity_loop(self):
        """Boucle principale de maintien d'activit√©."""
        try:
            while self.is_running and not self.bot.is_closed():
                await asyncio.sleep(240)  # 4 minutes
                
                if not self.bot.is_ready():
                    continue
                    
                try:
                    # Activit√© l√©g√®re : obtenir la latence
                    latency = self.bot.latency
                    self.last_activity = datetime.now()
                    
                    # Log p√©riodique pour confirmer l'activit√©
                    if self.last_activity.minute % 10 == 0:
                        logger.info(f"üíö Keep-Alive: Bot actif (latence: {latency:.2f}s)")
                        
                    # V√©rifier les guildes de mani√®re asynchrone
                    if len(self.bot.guilds) > 0:
                        # Ping tr√®s l√©ger sur la premi√®re guilde
                        guild = self.bot.guilds[0]
                        if guild.me:
                            # Simple v√©rification de pr√©sence
                            _ = guild.me.id
                            
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur dans keep-alive: {e}")
                    
        except asyncio.CancelledError:
            logger.info("üõë Keep-Alive task cancelled")
        except Exception as e:
            logger.error(f"‚ùå Erreur critique dans Keep-Alive: {e}")
            
    def get_last_activity(self):
        """Retourne le timestamp de la derni√®re activit√©."""
        return self.last_activity

# Instance globale
_keepalive_instance = None

def setup_render_keepalive(bot):
    """Configure le keep-alive pour Render."""
    global _keepalive_instance
    if _keepalive_instance is None:
        _keepalive_instance = RenderKeepAlive(bot)
    return _keepalive_instance

def get_keepalive():
    """R√©cup√®re l'instance keep-alive."""
    return _keepalive_instance