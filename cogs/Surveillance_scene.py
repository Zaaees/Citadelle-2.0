"""
Cog de surveillance de sc√®nes RP.
Permet de surveiller l'activit√© dans les salons, threads et forums.
"""

import discord
from discord.ext import commands, tasks
import os
import json
import logging
import asyncio
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime, timedelta
import pytz
import re
from typing import Optional, Dict, List, Union

# Configuration
SURVEILLANCE_CHANNEL_ID = 1380704586016362626
PARIS_TZ = pytz.timezone('Europe/Paris')

class SceneSurveillanceView(discord.ui.View):
    """Vue avec boutons pour la surveillance de sc√®ne."""
    
    def __init__(self, cog, scene_data: dict):
        super().__init__(timeout=None)
        self.cog = cog
        self.scene_data = scene_data
        
    @discord.ui.button(label="üìù Reprendre la sc√®ne", style=discord.ButtonStyle.primary, custom_id="take_scene")
    async def take_scene(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Permet √† un utilisateur de reprendre la direction d'une sc√®ne."""
        try:
            # Mettre √† jour le MJ dans les donn√©es
            old_gm_id = self.scene_data.get('gm_id')
            new_gm_id = str(interaction.user.id)
            
            # Mettre √† jour dans Google Sheets
            await self.cog.update_scene_gm(self.scene_data['channel_id'], new_gm_id)
            
            # Mettre √† jour les donn√©es locales
            self.scene_data['gm_id'] = new_gm_id
            
            # Notifier l'ancien et le nouveau MJ
            if old_gm_id != new_gm_id:
                old_gm = self.cog.bot.get_user(int(old_gm_id)) if old_gm_id else None
                if old_gm:
                    try:
                        await old_gm.send(f"üìù **Changement de MJ**\n{interaction.user.mention} a repris la direction de la sc√®ne **{self.scene_data['scene_name']}**.")
                    except:
                        pass
                
                try:
                    await interaction.user.send(f"üìù **Sc√®ne reprise**\nVous dirigez maintenant la sc√®ne **{self.scene_data['scene_name']}**.")
                except:
                    pass
            
            # Mettre √† jour l'embed
            embed = await self.cog.create_surveillance_embed(self.scene_data)
            await interaction.response.edit_message(embed=embed, view=self)
            
        except Exception as e:
            logging.error(f"Erreur lors de la reprise de sc√®ne: {e}")
            await interaction.response.send_message("‚ùå Erreur lors de la reprise de la sc√®ne.", ephemeral=True)
    
    @discord.ui.button(label="üîí Cl√¥turer la sc√®ne", style=discord.ButtonStyle.danger, custom_id="close_scene")
    async def close_scene(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Cl√¥ture la surveillance d'une sc√®ne."""
        try:
            # Supprimer de Google Sheets
            await self.cog.remove_scene_surveillance(self.scene_data['channel_id'])
            
            # Notifier le MJ
            gm = self.cog.bot.get_user(int(self.scene_data['gm_id']))
            if gm:
                try:
                    await gm.send(f"üîí **Sc√®ne cl√¥tur√©e**\nLa surveillance de la sc√®ne **{self.scene_data['scene_name']}** a √©t√© ferm√©e par {interaction.user.mention}.")
                except:
                    pass
            
            # D√©sactiver tous les boutons et mettre √† jour le message
            for child in self.children:
                child.disabled = True
            
            embed = discord.Embed(
                title="üîí Surveillance cl√¥tur√©e",
                description=f"La surveillance de **{self.scene_data['scene_name']}** a √©t√© ferm√©e.",
                color=0x95a5a6,
                timestamp=datetime.now(PARIS_TZ)
            )
            embed.set_footer(text=f"Cl√¥tur√©e par {interaction.user.display_name}")
            
            await interaction.response.edit_message(embed=embed, view=self)
            
        except Exception as e:
            logging.error(f"Erreur lors de la cl√¥ture de sc√®ne: {e}")
            await interaction.response.send_message("‚ùå Erreur lors de la cl√¥ture de la sc√®ne.", ephemeral=True)

class SurveillanceScene(commands.Cog):
    """Cog pour la surveillance des sc√®nes RP."""
    
    def __init__(self, bot):
        self.bot = bot
        self.paris_tz = PARIS_TZ
        
        # Configuration Google Sheets
        self.setup_google_sheets()
        
        # Cache des sc√®nes surveill√©es
        self.monitored_scenes: Dict[str, dict] = {}
        
        # D√©marrer les t√¢ches
        self.update_surveillance.start()
        self.check_inactive_scenes.start()
        
    def setup_google_sheets(self):
        """Configure la connexion Google Sheets."""
        try:
            credentials = Credentials.from_service_account_info(
                json.loads(os.getenv('SERVICE_ACCOUNT_JSON')),
                scopes=['https://www.googleapis.com/auth/spreadsheets']
            )
            self.gc = gspread.authorize(credentials)
            self.spreadsheet = self.gc.open_by_key(os.getenv('GOOGLE_SHEET_ID_VALIDATION'))
            
            # Cr√©er ou r√©cup√©rer la feuille "Scene surveillance"
            try:
                self.sheet = self.spreadsheet.worksheet("Scene surveillance")
            except gspread.exceptions.WorksheetNotFound:
                self.sheet = self.spreadsheet.add_worksheet(
                    title="Scene surveillance", rows="1000", cols="10"
                )
                # Initialiser l'en-t√™te
                self.sheet.append_row([
                    "channel_id", "scene_name", "gm_id", "start_date", 
                    "participants", "last_activity_user", "last_activity_date",
                    "message_id", "channel_type", "guild_id"
                ])
                
        except Exception as e:
            logging.error(f"Erreur lors de la configuration Google Sheets: {e}")
            self.sheet = None
    
    def cog_unload(self):
        """Nettoie les t√¢ches lors du d√©chargement du cog."""
        self.update_surveillance.cancel()
        self.check_inactive_scenes.cancel()
    
    @tasks.loop(hours=1)
    async def update_surveillance(self):
        """Met √† jour la surveillance toutes les heures."""
        if not self.sheet:
            return
            
        try:
            await self.refresh_monitored_scenes()
            await self.update_all_scenes()
        except Exception as e:
            logging.error(f"Erreur dans update_surveillance: {e}")
    
    @update_surveillance.before_loop
    async def before_update_surveillance(self):
        """Attend que le bot soit pr√™t avant de d√©marrer la t√¢che."""
        await self.bot.wait_until_ready()
        await asyncio.sleep(10)  # Attendre un peu plus pour s'assurer que tout est initialis√©
        await self.refresh_monitored_scenes()
    
    @tasks.loop(hours=24)
    async def check_inactive_scenes(self):
        """V√©rifie les sc√®nes inactives depuis 7 jours."""
        if not self.sheet:
            return
            
        try:
            now = datetime.now(self.paris_tz)
            seven_days_ago = now - timedelta(days=7)
            
            for scene_data in self.monitored_scenes.values():
                last_activity = datetime.fromisoformat(scene_data.get('last_activity_date', now.isoformat()))
                if last_activity.replace(tzinfo=self.paris_tz) < seven_days_ago:
                    await self.notify_inactive_scene(scene_data)
                    
        except Exception as e:
            logging.error(f"Erreur dans check_inactive_scenes: {e}")
    
    @check_inactive_scenes.before_loop
    async def before_check_inactive_scenes(self):
        """Attend que le bot soit pr√™t."""
        await self.bot.wait_until_ready()
        await asyncio.sleep(60)

    async def refresh_monitored_scenes(self):
        """Recharge les sc√®nes surveill√©es depuis Google Sheets."""
        if not self.sheet:
            return

        try:
            records = self.sheet.get_all_records()
            self.monitored_scenes.clear()

            for record in records:
                if record.get('channel_id'):
                    self.monitored_scenes[record['channel_id']] = record

        except Exception as e:
            logging.error(f"Erreur lors du rechargement des sc√®nes: {e}")

    async def get_channel_from_link(self, channel_link: str) -> Optional[Union[discord.TextChannel, discord.Thread, discord.ForumChannel]]:
        """R√©cup√®re un canal √† partir d'un lien Discord."""
        try:
            # Extraire l'ID du canal depuis le lien
            match = re.search(r'/channels/(\d+)/(\d+)(?:/(\d+))?', channel_link)
            if not match:
                return None

            guild_id = int(match.group(1))
            channel_id = int(match.group(2))
            thread_id = int(match.group(3)) if match.group(3) else None

            guild = self.bot.get_guild(guild_id)
            if not guild:
                logging.error(f"Guild {guild_id} non trouv√©e")
                return None

            # Si c'est un thread ou un post de forum (3√®me ID pr√©sent)
            if thread_id:
                # D'abord essayer de r√©cup√©rer directement le thread/post
                try:
                    thread = await self.bot.fetch_channel(thread_id)
                    if thread:
                        logging.info(f"Thread/Post trouv√© directement: {thread.name} (ID: {thread.id})")
                        return thread
                except discord.NotFound:
                    logging.error(f"Thread/Post {thread_id} non trouv√© via fetch_channel")
                except discord.Forbidden:
                    logging.error(f"Pas d'autorisation pour acc√©der au thread/post {thread_id}")
                except Exception as e:
                    logging.error(f"Erreur lors de la r√©cup√©ration du thread/post {thread_id}: {e}")

                # Essayer via le canal parent
                channel = guild.get_channel(channel_id)
                if channel:
                    logging.info(f"Canal parent trouv√©: {channel.name} (Type: {type(channel).__name__})")

                    # Pour les forums, essayer de r√©cup√©rer le post
                    if isinstance(channel, discord.ForumChannel):
                        try:
                            # R√©cup√©rer tous les threads du forum
                            async for thread in channel.archived_threads(limit=None):
                                if thread.id == thread_id:
                                    logging.info(f"Post de forum trouv√© dans les archives: {thread.name}")
                                    return thread

                            # V√©rifier les threads actifs
                            for thread in channel.threads:
                                if thread.id == thread_id:
                                    logging.info(f"Post de forum trouv√© dans les actifs: {thread.name}")
                                    return thread

                        except Exception as e:
                            logging.error(f"Erreur lors de la recherche dans le forum: {e}")

                    # Pour les canaux texte, essayer de r√©cup√©rer le thread
                    elif isinstance(channel, discord.TextChannel):
                        try:
                            # V√©rifier les threads actifs
                            for thread in channel.threads:
                                if thread.id == thread_id:
                                    logging.info(f"Thread trouv√© dans les actifs: {thread.name}")
                                    return thread

                            # V√©rifier les threads archiv√©s
                            async for thread in channel.archived_threads(limit=None):
                                if thread.id == thread_id:
                                    logging.info(f"Thread trouv√© dans les archives: {thread.name}")
                                    return thread

                        except Exception as e:
                            logging.error(f"Erreur lors de la recherche de thread: {e}")

                logging.error(f"Impossible de trouver le thread/post {thread_id}")
                return None

            # Sinon, r√©cup√©rer le canal principal
            channel = guild.get_channel(channel_id)
            if channel:
                logging.info(f"Canal principal trouv√©: {channel.name} (Type: {type(channel).__name__})")
                return channel
            else:
                logging.error(f"Canal {channel_id} non trouv√© dans la guild {guild_id}")
                return None

        except Exception as e:
            logging.error(f"Erreur lors de la r√©cup√©ration du canal: {e}")
            import traceback
            logging.error(f"Traceback: {traceback.format_exc()}")
            return None

    def parse_date(self, date_str: str) -> datetime:
        """Parse une date au format JJ/MM/AA."""
        try:
            return datetime.strptime(date_str, "%d/%m/%y").replace(tzinfo=self.paris_tz)
        except ValueError:
            # Si le format est incorrect, utiliser la date d'aujourd'hui
            return datetime.now(self.paris_tz)

    async def get_webhook_username(self, message: discord.Message) -> Optional[str]:
        """R√©cup√®re le nom d'utilisateur d'un webhook (pour Tupperbox)."""
        try:
            if message.webhook_id:
                # Pour Tupperbox, le nom du personnage est g√©n√©ralement dans le nom d'affichage
                return message.author.display_name
        except:
            pass
        return None

    async def get_channel_participants(self, channel: Union[discord.TextChannel, discord.Thread], start_date: datetime) -> List[str]:
        """R√©cup√®re la liste des participants depuis une date donn√©e."""
        participants = set()

        try:
            # V√©rifier si le canal existe et est accessible
            if not channel:
                logging.error("Canal non fourni pour get_channel_participants")
                return []

            logging.info(f"R√©cup√©ration des participants pour {channel.name} (Type: {type(channel).__name__}) depuis {start_date}")

            message_count = 0
            async for message in channel.history(limit=None, after=start_date):
                message_count += 1
                if message.author.bot:
                    # V√©rifier si c'est un webhook (Tupperbox)
                    webhook_name = await self.get_webhook_username(message)
                    if webhook_name:
                        participants.add(f"{webhook_name} (Webhook)")
                else:
                    participants.add(message.author.display_name)

            logging.info(f"Analys√© {message_count} messages, trouv√© {len(participants)} participants")

        except discord.Forbidden:
            logging.error(f"Pas d'autorisation pour lire l'historique de {channel.name}")
        except Exception as e:
            logging.error(f"Erreur lors de la r√©cup√©ration des participants: {e}")
            import traceback
            logging.error(f"Traceback: {traceback.format_exc()}")

        return list(participants)

    async def get_last_activity(self, channel: Union[discord.TextChannel, discord.Thread]) -> Optional[dict]:
        """R√©cup√®re la derni√®re activit√© dans un canal."""
        try:
            if not channel:
                logging.error("Canal non fourni pour get_last_activity")
                return None

            logging.info(f"R√©cup√©ration de la derni√®re activit√© pour {channel.name}")

            async for message in channel.history(limit=1):
                user_name = message.author.display_name

                # V√©rifier si c'est un webhook
                if message.author.bot:
                    webhook_name = await self.get_webhook_username(message)
                    if webhook_name:
                        user_name = f"{webhook_name} (Webhook)"

                activity = {
                    'user': user_name,
                    'date': message.created_at.astimezone(self.paris_tz),
                    'message_id': message.id
                }

                logging.info(f"Derni√®re activit√© trouv√©e: {user_name} le {activity['date']}")
                return activity

        except discord.Forbidden:
            logging.error(f"Pas d'autorisation pour lire l'historique de {channel.name}")
        except Exception as e:
            logging.error(f"Erreur lors de la r√©cup√©ration de la derni√®re activit√©: {e}")
            import traceback
            logging.error(f"Traceback: {traceback.format_exc()}")

        return None

    async def create_surveillance_embed(self, scene_data: dict) -> discord.Embed:
        """Cr√©e l'embed de surveillance d'une sc√®ne."""
        try:
            embed = discord.Embed(
                title="üé≠ Surveillance de Sc√®ne",
                color=0x3498db,
                timestamp=datetime.now(self.paris_tz)
            )

            # Nom de la sc√®ne
            embed.add_field(
                name="üìç Sc√®ne",
                value=scene_data.get('scene_name', 'Nom inconnu'),
                inline=True
            )

            # MJ responsable
            gm_id = scene_data.get('gm_id')
            gm_mention = f"<@{gm_id}>" if gm_id else "Aucun"
            embed.add_field(
                name="üéØ MJ Responsable",
                value=gm_mention,
                inline=True
            )

            # Date de d√©but
            start_date = scene_data.get('start_date', '')
            if start_date:
                try:
                    date_obj = datetime.fromisoformat(start_date)
                    formatted_date = date_obj.strftime("%d/%m/%Y")
                except:
                    formatted_date = start_date
            else:
                formatted_date = "Date inconnue"

            embed.add_field(
                name="üìÖ D√©but de surveillance",
                value=formatted_date,
                inline=True
            )

            # Participants
            participants = scene_data.get('participants', '[]')
            if isinstance(participants, str):
                try:
                    participants = json.loads(participants)
                except:
                    participants = []

            if participants:
                participants_text = "\n".join([f"‚Ä¢ {p}" for p in participants[:10]])  # Limiter √† 10
                if len(participants) > 10:
                    participants_text += f"\n... et {len(participants) - 10} autres"
            else:
                participants_text = "Aucun participant"

            embed.add_field(
                name=f"üë• R√¥listes Participants ({len(participants)})",
                value=participants_text,
                inline=False
            )

            # Derni√®re activit√©
            last_activity_user = scene_data.get('last_activity_user', 'Aucune activit√©')
            last_activity_date = scene_data.get('last_activity_date', '')

            if last_activity_date:
                try:
                    activity_date = datetime.fromisoformat(last_activity_date)
                    now = datetime.now(self.paris_tz)
                    time_diff = now - activity_date.replace(tzinfo=self.paris_tz)

                    if time_diff.days > 0:
                        time_ago = f"il y a {time_diff.days} jour(s)"
                    elif time_diff.seconds > 3600:
                        hours = time_diff.seconds // 3600
                        time_ago = f"il y a {hours} heure(s)"
                    else:
                        minutes = time_diff.seconds // 60
                        time_ago = f"il y a {minutes} minute(s)"

                    activity_text = f"{last_activity_user}\n{activity_date.strftime('%d/%m/%Y √† %H:%M')} ({time_ago})"
                except:
                    activity_text = f"{last_activity_user}\n{last_activity_date}"
            else:
                activity_text = "Aucune activit√© d√©tect√©e"

            embed.add_field(
                name="‚è∞ Derni√®re Activit√©",
                value=activity_text,
                inline=False
            )

            embed.set_footer(text="Mise √† jour automatique toutes les heures")

            return embed

        except Exception as e:
            logging.error(f"Erreur lors de la cr√©ation de l'embed: {e}")
            return discord.Embed(title="‚ùå Erreur", description="Impossible de cr√©er l'embed de surveillance.")

    @commands.command(name='scene')
    async def scene_command(self, ctx, channel_link: str = None, date: str = None, gm_id: str = None):
        """
        Commande pour initier la surveillance d'une sc√®ne.
        Usage: !scene [Lien du salon] [Date JJ/MM/AA] [ID du MJ]
        """
        if not self.sheet:
            await ctx.send("‚ùå Erreur de configuration Google Sheets.")
            return

        if not channel_link:
            await ctx.send("‚ùå Veuillez fournir un lien vers le salon √† surveiller.")
            return

        try:
            logging.info(f"Tentative de surveillance pour le lien: {channel_link}")

            # R√©cup√©rer le canal
            channel = await self.get_channel_from_link(channel_link)
            if not channel:
                logging.error(f"Canal non trouv√© pour le lien: {channel_link}")
                await ctx.send(f"‚ùå Impossible de trouver le salon sp√©cifi√©.\n**Lien fourni:** {channel_link}\n\n**Formats support√©s:**\n‚Ä¢ Salon: `https://discord.com/channels/GUILD_ID/CHANNEL_ID`\n‚Ä¢ Thread: `https://discord.com/channels/GUILD_ID/CHANNEL_ID/THREAD_ID`\n‚Ä¢ Post de forum: `https://discord.com/channels/GUILD_ID/FORUM_ID/POST_ID`")
                return

            logging.info(f"Canal trouv√©: {channel.name} (ID: {channel.id}, Type: {type(channel).__name__})")

            # Parser la date
            if date:
                start_date = self.parse_date(date)
            else:
                start_date = datetime.now(self.paris_tz)

            # D√©terminer le MJ
            if gm_id:
                try:
                    gm_id = str(int(gm_id.strip('<@!>')))  # Nettoyer les mentions
                except ValueError:
                    await ctx.send("‚ùå ID du MJ invalide.")
                    return
            else:
                gm_id = str(ctx.author.id)

            # V√©rifier si la sc√®ne est d√©j√† surveill√©e
            if str(channel.id) in self.monitored_scenes:
                await ctx.send("‚ùå Cette sc√®ne est d√©j√† sous surveillance.")
                return

            # R√©cup√©rer les participants et la derni√®re activit√©
            participants = await self.get_channel_participants(channel, start_date)
            last_activity = await self.get_last_activity(channel)

            # D√©terminer le type de canal
            if isinstance(channel, discord.Thread):
                channel_type = "Thread"
            elif isinstance(channel, discord.ForumChannel):
                channel_type = "Forum"
            else:
                channel_type = "TextChannel"

            # Cr√©er les donn√©es de la sc√®ne
            scene_data = {
                'channel_id': str(channel.id),
                'scene_name': channel.name,
                'gm_id': gm_id,
                'start_date': start_date.isoformat(),
                'participants': json.dumps(participants),
                'last_activity_user': last_activity['user'] if last_activity else 'Aucune activit√©',
                'last_activity_date': last_activity['date'].isoformat() if last_activity else '',
                'message_id': '',  # Sera mis √† jour apr√®s l'envoi
                'channel_type': channel_type,
                'guild_id': str(channel.guild.id)
            }

            # Ajouter √† Google Sheets
            self.sheet.append_row([
                scene_data['channel_id'],
                scene_data['scene_name'],
                scene_data['gm_id'],
                scene_data['start_date'],
                scene_data['participants'],
                scene_data['last_activity_user'],
                scene_data['last_activity_date'],
                scene_data['message_id'],
                scene_data['channel_type'],
                scene_data['guild_id']
            ])

            # Ajouter au cache local
            self.monitored_scenes[str(channel.id)] = scene_data

            # Envoyer le message de surveillance
            surveillance_channel = self.bot.get_channel(SURVEILLANCE_CHANNEL_ID)
            if surveillance_channel:
                embed = await self.create_surveillance_embed(scene_data)
                view = SceneSurveillanceView(self, scene_data)

                message = await surveillance_channel.send(embed=embed, view=view)

                # Mettre √† jour l'ID du message dans Google Sheets
                scene_data['message_id'] = str(message.id)
                await self.update_scene_message_id(str(channel.id), str(message.id))

            await ctx.send(f"‚úÖ Surveillance initi√©e pour **{channel.name}**.")

            # Notifier le MJ
            gm = self.bot.get_user(int(gm_id))
            if gm and gm.id != ctx.author.id:
                try:
                    await gm.send(f"üé≠ **Nouvelle surveillance de sc√®ne**\nVous avez √©t√© d√©sign√© comme MJ pour la sc√®ne **{channel.name}**.")
                except:
                    pass

        except Exception as e:
            logging.error(f"Erreur dans la commande scene: {e}")
            await ctx.send("‚ùå Une erreur est survenue lors de l'initialisation de la surveillance.")

    async def update_scene_message_id(self, channel_id: str, message_id: str):
        """Met √† jour l'ID du message de surveillance dans Google Sheets."""
        try:
            records = self.sheet.get_all_records()
            for i, record in enumerate(records, start=2):  # Start=2 car ligne 1 = en-t√™te
                if record.get('channel_id') == channel_id:
                    self.sheet.update(f'H{i}', message_id)  # Colonne H = message_id
                    break
        except Exception as e:
            logging.error(f"Erreur lors de la mise √† jour de l'ID du message: {e}")

    async def update_scene_gm(self, channel_id: str, new_gm_id: str):
        """Met √† jour le MJ d'une sc√®ne dans Google Sheets."""
        try:
            records = self.sheet.get_all_records()
            for i, record in enumerate(records, start=2):
                if record.get('channel_id') == channel_id:
                    self.sheet.update(f'C{i}', new_gm_id)  # Colonne C = gm_id
                    break
        except Exception as e:
            logging.error(f"Erreur lors de la mise √† jour du MJ: {e}")

    async def remove_scene_surveillance(self, channel_id: str):
        """Supprime une sc√®ne de la surveillance."""
        try:
            records = self.sheet.get_all_records()
            for i, record in enumerate(records, start=2):
                if record.get('channel_id') == channel_id:
                    self.sheet.delete_rows(i)
                    break

            # Supprimer du cache local
            if channel_id in self.monitored_scenes:
                del self.monitored_scenes[channel_id]

        except Exception as e:
            logging.error(f"Erreur lors de la suppression de la surveillance: {e}")

    async def update_scene_data(self, channel_id: str, scene_data: dict):
        """Met √† jour les donn√©es d'une sc√®ne dans Google Sheets."""
        try:
            records = self.sheet.get_all_records()
            for i, record in enumerate(records, start=2):
                if record.get('channel_id') == channel_id:
                    # Mettre √† jour toute la ligne
                    self.sheet.update(f'A{i}:J{i}', [[
                        scene_data['channel_id'],
                        scene_data['scene_name'],
                        scene_data['gm_id'],
                        scene_data['start_date'],
                        scene_data['participants'],
                        scene_data['last_activity_user'],
                        scene_data['last_activity_date'],
                        scene_data['message_id'],
                        scene_data['channel_type'],
                        scene_data['guild_id']
                    ]])
                    break
        except Exception as e:
            logging.error(f"Erreur lors de la mise √† jour des donn√©es: {e}")

    async def update_all_scenes(self):
        """Met √† jour toutes les sc√®nes surveill√©es."""
        for channel_id, scene_data in self.monitored_scenes.items():
            try:
                channel = self.bot.get_channel(int(channel_id))
                if not channel:
                    # Essayer de r√©cup√©rer via l'API
                    try:
                        channel = await self.bot.fetch_channel(int(channel_id))
                    except:
                        continue

                # R√©cup√©rer les nouvelles donn√©es
                start_date = datetime.fromisoformat(scene_data['start_date'])
                participants = await self.get_channel_participants(channel, start_date)
                last_activity = await self.get_last_activity(channel)

                # Mettre √† jour les donn√©es
                scene_data['participants'] = json.dumps(participants)
                if last_activity:
                    scene_data['last_activity_user'] = last_activity['user']
                    scene_data['last_activity_date'] = last_activity['date'].isoformat()

                # Mettre √† jour Google Sheets
                await self.update_scene_data(channel_id, scene_data)

                # Mettre √† jour le message de surveillance
                await self.update_surveillance_message(scene_data)

            except Exception as e:
                logging.error(f"Erreur lors de la mise √† jour de la sc√®ne {channel_id}: {e}")

    async def update_surveillance_message(self, scene_data: dict):
        """Met √† jour le message de surveillance dans le canal d√©di√©."""
        try:
            surveillance_channel = self.bot.get_channel(SURVEILLANCE_CHANNEL_ID)
            if not surveillance_channel:
                return

            message_id = scene_data.get('message_id')
            if not message_id:
                return

            try:
                message = await surveillance_channel.fetch_message(int(message_id))
                embed = await self.create_surveillance_embed(scene_data)
                view = SceneSurveillanceView(self, scene_data)
                await message.edit(embed=embed, view=view)
            except discord.NotFound:
                # Le message a √©t√© supprim√©, en cr√©er un nouveau
                embed = await self.create_surveillance_embed(scene_data)
                view = SceneSurveillanceView(self, scene_data)
                new_message = await surveillance_channel.send(embed=embed, view=view)
                scene_data['message_id'] = str(new_message.id)
                await self.update_scene_message_id(scene_data['channel_id'], str(new_message.id))

        except Exception as e:
            logging.error(f"Erreur lors de la mise √† jour du message de surveillance: {e}")

    async def notify_inactive_scene(self, scene_data: dict):
        """Notifie le MJ d'une sc√®ne inactive depuis 7 jours."""
        try:
            gm = self.bot.get_user(int(scene_data['gm_id']))
            if gm:
                embed = discord.Embed(
                    title="‚ö†Ô∏è Sc√®ne Inactive",
                    description=f"La sc√®ne **{scene_data['scene_name']}** n'a pas eu d'activit√© depuis 7 jours.",
                    color=0xf39c12,
                    timestamp=datetime.now(self.paris_tz)
                )

                last_activity_date = scene_data.get('last_activity_date', '')
                if last_activity_date:
                    try:
                        activity_date = datetime.fromisoformat(last_activity_date)
                        embed.add_field(
                            name="Derni√®re activit√©",
                            value=f"{activity_date.strftime('%d/%m/%Y √† %H:%M')}",
                            inline=False
                        )
                    except:
                        pass

                await gm.send(embed=embed)

        except Exception as e:
            logging.error(f"Erreur lors de la notification d'inactivit√©: {e}")

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        """√âcoute les nouveaux messages dans les canaux surveill√©s."""
        if message.author == self.bot.user:
            return

        channel_id = str(message.channel.id)
        if channel_id not in self.monitored_scenes:
            return

        try:
            scene_data = self.monitored_scenes[channel_id]

            # Mettre √† jour la derni√®re activit√©
            user_name = message.author.display_name
            if message.author.bot:
                webhook_name = await self.get_webhook_username(message)
                if webhook_name:
                    user_name = f"{webhook_name} (Webhook)"

            scene_data['last_activity_user'] = user_name
            scene_data['last_activity_date'] = message.created_at.astimezone(self.paris_tz).isoformat()

            # Mettre √† jour les participants
            start_date = datetime.fromisoformat(scene_data['start_date'])
            participants = await self.get_channel_participants(message.channel, start_date)
            scene_data['participants'] = json.dumps(participants)

            # Mettre √† jour Google Sheets
            await self.update_scene_data(channel_id, scene_data)

            # Mettre √† jour le message de surveillance
            await self.update_surveillance_message(scene_data)

            # Notifier le MJ
            gm = self.bot.get_user(int(scene_data['gm_id']))
            if gm and gm.id != message.author.id:
                try:
                    embed = discord.Embed(
                        title="üìù Nouvelle activit√©",
                        description=f"Nouveau message dans **{scene_data['scene_name']}**",
                        color=0x2ecc71
                    )
                    embed.add_field(name="Auteur", value=user_name, inline=True)
                    embed.add_field(name="Canal", value=message.channel.mention, inline=True)
                    embed.add_field(name="Aper√ßu", value=message.content[:100] + "..." if len(message.content) > 100 else message.content, inline=False)

                    await gm.send(embed=embed)
                except:
                    pass

        except Exception as e:
            logging.error(f"Erreur lors du traitement du message: {e}")

async def setup(bot):
    await bot.add_cog(SurveillanceScene(bot))
