"""
Cog de surveillance de sc√®nes RP.
Permet de surveiller l'activit√© dans les salons, threads et forums.
"""

import discord
from discord.ext import commands, tasks
import os
import json
import logging
import asyncio
import time
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime, timedelta
import pytz
import re
from typing import Optional, Dict, List, Union

# Configuration
SURVEILLANCE_CHANNEL_ID = 1380704586016362626
PARIS_TZ = pytz.timezone('Europe/Paris')

# Regroupement des mises √† jour
UPDATE_BATCH_SIZE = 10  # Nombre de messages avant un rafra√Æchissement
UPDATE_INTERVAL_MINUTES = 5  # Intervalle de rafra√Æchissement en minutes

# Dur√©e de r√©tention des entr√©es du cache anti-spam (24 heures)
NOTIFICATION_RETENTION_SECONDS = 24 * 60 * 60

# Intervalle minimal entre deux notifications dans un m√™me salon (minutes)
CHANNEL_NOTIFICATION_INTERVAL_MINUTES = 5

# D√©lai entre les mises √† jour des sc√®nes (secondes)
UPDATE_SLEEP_SECONDS = 1

class SceneSurveillanceView(discord.ui.View):
    """Vue avec boutons pour la surveillance de sc√®ne."""
    
    def __init__(self, cog, scene_data: dict):
        super().__init__(timeout=None)
        self.cog = cog
        self.scene_data = scene_data
        
    @discord.ui.button(label="üìù Reprendre la sc√®ne", style=discord.ButtonStyle.primary, custom_id="take_scene")
    async def take_scene(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Permet √† un utilisateur de reprendre la direction d'une sc√®ne."""
        try:
            # Mettre √† jour le MJ dans les donn√©es
            old_gm_id = self.scene_data.get('gm_id')
            new_gm_id = str(interaction.user.id)
            
            # Mettre √† jour dans Google Sheets
            await self.cog.update_scene_gm(self.scene_data['channel_id'], new_gm_id)
            
            # Mettre √† jour les donn√©es locales
            self.scene_data['gm_id'] = new_gm_id
            
            # Notifier l'ancien et le nouveau MJ
            if old_gm_id != new_gm_id:
                old_gm = self.cog.bot.get_user(int(old_gm_id)) if old_gm_id else None
                if old_gm:
                    try:
                        await old_gm.send(f"üìù **Changement de MJ**\n{interaction.user.mention} a repris la direction de la sc√®ne **{self.scene_data['scene_name']}**.")
                    except:
                        pass
                
                try:
                    await interaction.user.send(f"üìù **Sc√®ne reprise**\nVous dirigez maintenant la sc√®ne **{self.scene_data['scene_name']}**.")
                except:
                    pass
            
            # Mettre √† jour l'embed
            embed = await self.cog.create_surveillance_embed(self.scene_data)
            await interaction.response.edit_message(embed=embed, view=self)
            
        except Exception as e:
            logging.error(f"Erreur lors de la reprise de sc√®ne: {e}")
            await interaction.response.send_message("‚ùå Erreur lors de la reprise de la sc√®ne.", ephemeral=True)
    
    @discord.ui.button(label="üîí Cl√¥turer la sc√®ne", style=discord.ButtonStyle.danger, custom_id="close_scene")
    async def close_scene(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Cl√¥ture la surveillance d'une sc√®ne."""
        try:
            # Supprimer de Google Sheets
            await self.cog.remove_scene_surveillance(self.scene_data['channel_id'])

            # R√©pondre √† l'interaction puis supprimer le message
            await interaction.response.send_message(
                f"üîí **Surveillance cl√¥tur√©e**\nLa surveillance de **{self.scene_data['scene_name']}** a √©t√© ferm√©e.",
                ephemeral=True
            )

            # Supprimer le message de surveillance
            try:
                await interaction.followup.delete_message(interaction.message.id)
            except:
                # Si la suppression √©choue, essayer de modifier le message
                embed = discord.Embed(
                    title="üîí Surveillance cl√¥tur√©e",
                    description=f"La surveillance de **{self.scene_data['scene_name']}** a √©t√© ferm√©e.",
                    color=0x95a5a6,
                    timestamp=datetime.now(PARIS_TZ)
                )
                embed.set_footer(text=f"Cl√¥tur√©e par {interaction.user.display_name}")

                for child in self.children:
                    child.disabled = True

                await interaction.edit_original_response(embed=embed, view=self)
            
        except Exception as e:
            logging.error(f"Erreur lors de la cl√¥ture de sc√®ne: {e}")
            await interaction.response.send_message("‚ùå Erreur lors de la cl√¥ture de la sc√®ne.", ephemeral=True)

class SurveillanceScene(commands.Cog):
    """Cog pour la surveillance des sc√®nes RP."""
    
    def __init__(self, bot):
        self.bot = bot
        self.paris_tz = PARIS_TZ
        
        # Configuration Google Sheets
        self.setup_google_sheets()
        
        # Cache des sc√®nes surveill√©es
        self.monitored_scenes: Dict[str, dict] = {}

        # Cache pour √©viter le spam de notifications (channel_id -> {user_id: timestamp})
        self.last_notifications: Dict[str, Dict[str, float]] = {}

        # Derni√®re notification envoy√©e par salon (channel_id -> timestamp)
        self.last_channel_notifications: Dict[str, float] = {}

        # Cache pour tracker les sc√®nes inactives notifi√©es (pour √©viter spam et d√©tecter retour d'activit√©)
        self.notified_inactive_scenes: set = set()

        # Caches pour les mises √† jour diff√©r√©es
        self.pending_updates: Dict[str, dict] = {}
        self.pending_update_counts: Dict[str, int] = {}

        # D√©marrer les t√¢ches
        self.update_surveillance.start()
        self.check_inactive_scenes.start()
        self.process_pending_updates.start()
        self.cleanup_notifications.start()
        
    def setup_google_sheets(self):
        """Configure la connexion Google Sheets."""
        try:
            credentials = Credentials.from_service_account_info(
                json.loads(os.getenv('SERVICE_ACCOUNT_JSON')),
                scopes=['https://www.googleapis.com/auth/spreadsheets'],
            )
        except Exception as e:
            logging.error(f"Erreur lors du chargement des credentials Google Sheets: {e}")
            self.sheet = None
            return

        self.gc = None
        self.spreadsheet = None
        for attempt in range(1, 4):
            try:
                logging.info(f"Tentative {attempt} de connexion √† Google Sheets")
                self.gc = gspread.authorize(credentials)
                self.spreadsheet = self.gc.open_by_key(os.getenv('GOOGLE_SHEET_ID_VALIDATION'))
                break
            except Exception as e:
                logging.warning(
                    f"√âchec de la tentative {attempt} de connexion √† Google Sheets: {e}"
                )
                if attempt < 3:
                    delay = 2 ** attempt
                    logging.info(f"Nouvelle tentative dans {delay} secondes")
                    time.sleep(delay)

        if not self.spreadsheet:
            logging.error("Impossible de se connecter √† Google Sheets apr√®s 3 tentatives")
            self.sheet = None
            return

        try:
            self.sheet = self.spreadsheet.worksheet("Scene surveillance")
        except gspread.exceptions.WorksheetNotFound:
            self.sheet = self.spreadsheet.add_worksheet(
                title="Scene surveillance", rows="1000", cols="10"
            )
            # Initialiser l'en-t√™te
            self.sheet.append_row([
                "channel_id", "scene_name", "gm_id", "start_date",
                "participants", "last_activity_user", "last_activity_date",
                "message_id", "channel_type", "guild_id"
            ])
            logging.info("En-t√™te cr√©√© pour la feuille Scene surveillance")
        except Exception as e:
            logging.error(f"Erreur lors de la configuration Google Sheets: {e}")
            self.sheet = None

    def cog_unload(self):
        """Nettoie les t√¢ches lors du d√©chargement du cog."""
        self.update_surveillance.cancel()
        self.check_inactive_scenes.cancel()
        self.process_pending_updates.cancel()
        self.cleanup_notifications.cancel()

    @commands.Cog.listener()
    async def on_ready(self):
        """√âv√©nement d√©clench√© quand le bot est pr√™t."""
        logging.info("SurveillanceScene: Bot pr√™t, d√©marrage de la mise √† jour...")
        await asyncio.sleep(15)  # Attendre que tout soit initialis√©
        try:
            await self.refresh_monitored_scenes()
            await self.update_all_scenes()
            logging.info("SurveillanceScene: Mise √† jour initiale termin√©e")
        except Exception as e:
            logging.error(f"Erreur lors de la mise √† jour initiale: {e}")
    
    @tasks.loop(hours=1)
    async def update_surveillance(self):
        """Met √† jour la surveillance toutes les heures."""
        if self.sheet is None:
            max_attempts = 3
            for attempt in range(1, max_attempts + 1):
                logging.warning(
                    f"Feuille Google Sheets indisponible, tentative de reconnexion {attempt}/{max_attempts}"
                )
                self.setup_google_sheets()
                if self.sheet is not None:
                    logging.info(
                        f"Reconnexion r√©ussie √† Google Sheets lors de la tentative {attempt}"
                    )
                    break
                delay = 5 * attempt
                logging.error(
                    f"Tentative {attempt} √©chou√©e, nouvel essai dans {delay} secondes"
                )
                await asyncio.sleep(delay)

            if self.sheet is None:
                logging.error(
                    "√âchec de la reconnexion √† Google Sheets dans update_surveillance apr√®s plusieurs tentatives"
                )
                return
            
        try:
            await self.refresh_monitored_scenes()
            await self.update_all_scenes()
        except Exception as e:
            logging.error(f"Erreur dans update_surveillance: {e}")
    
    @update_surveillance.before_loop
    async def before_update_surveillance(self):
        """Attend que le bot soit pr√™t avant de d√©marrer la t√¢che."""
        await self.bot.wait_until_ready()
        await asyncio.sleep(10)  # Attendre un peu plus pour s'assurer que tout est initialis√©
        await self.refresh_monitored_scenes()
        # Forcer une mise √† jour compl√®te au d√©marrage
        logging.info("Mise √† jour compl√®te des sc√®nes au d√©marrage du bot")
        await self.update_all_scenes()
    
    @tasks.loop(hours=24)
    async def check_inactive_scenes(self):
        """V√©rifie les sc√®nes inactives depuis 7 jours."""
        if not self.sheet:
            return

        try:
            # IMPORTANT: Recharger les donn√©es depuis Google Sheets pour avoir les infos √† jour
            await self.refresh_monitored_scenes()
            logging.info(f"V√©rification d'inactivit√© pour {len(self.monitored_scenes)} sc√®nes")

            now = datetime.now(self.paris_tz)
            seven_days_ago = now - timedelta(days=7)

            for scene_data in self.monitored_scenes.values():
                try:
                    last_activity_str = scene_data.get('last_activity_date', '')
                    if not last_activity_str:
                        logging.warning(f"Pas de date d'activit√© pour la sc√®ne {scene_data.get('scene_name', 'Inconnue')}")
                        continue

                    last_activity = datetime.fromisoformat(last_activity_str)
                    # S'assurer que la date a une timezone
                    if last_activity.tzinfo is None:
                        last_activity = self.paris_tz.localize(last_activity)

                    time_since_activity = now - last_activity
                    logging.info(f"Sc√®ne {scene_data.get('scene_name', 'Inconnue')}: derni√®re activit√© il y a {time_since_activity.days} jours")

                    if time_since_activity >= timedelta(days=7):
                        scene_id = scene_data.get('channel_id')
                        # Ne notifier que si on ne l'a pas d√©j√† fait
                        if scene_id not in self.notified_inactive_scenes:
                            logging.info(f"Sc√®ne inactive d√©tect√©e: {scene_data.get('scene_name', 'Inconnue')}")
                            await self.notify_inactive_scene(scene_data)
                            self.notified_inactive_scenes.add(scene_id)
                    else:
                        # Sc√®ne active, retirer du cache des sc√®nes inactives notifi√©es
                        scene_id = scene_data.get('channel_id')
                        if scene_id in self.notified_inactive_scenes:
                            self.notified_inactive_scenes.remove(scene_id)
                            logging.info(f"Sc√®ne redevenue active: {scene_data.get('scene_name', 'Inconnue')}")

                except Exception as scene_error:
                    logging.error(f"Erreur lors de la v√©rification de la sc√®ne {scene_data.get('scene_name', 'Inconnue')}: {scene_error}")

        except Exception as e:
            logging.error(f"Erreur dans check_inactive_scenes: {e}")
    
    @check_inactive_scenes.before_loop
    async def before_check_inactive_scenes(self):
        """Attend que le bot soit pr√™t."""
        await self.bot.wait_until_ready()
        await asyncio.sleep(60)

    def convert_scientific_to_int(self, value) -> str:
        """Convertit une notation scientifique en entier string (pour les IDs Discord)."""
        try:
            # Nettoyer la valeur (supprimer apostrophes de Google Sheets)
            clean_value = str(value).lstrip("'").strip()

            # Si la valeur est vide ou 'nan', retourner une cha√Æne vide
            if not clean_value or clean_value.lower() == 'nan':
                return ""

            # V√©rifier si c'est de la notation scientifique
            if isinstance(clean_value, str) and ('E+' in clean_value.upper() or 'e+' in clean_value):
                # Convertir la notation scientifique en entier
                float_val = float(clean_value.replace(',', '.'))  # G√©rer les virgules europ√©ennes
                int_val = int(float_val)
                return str(int_val)

            # Si c'est d√©j√† un nombre valide, le retourner tel quel
            if clean_value.isdigit():
                return clean_value

            return clean_value
        except (ValueError, TypeError) as e:
            logging.warning(f"Impossible de convertir '{value}' en entier: {e}")
            return str(value).lstrip("'").strip()

    def format_id_for_sheets(self, id_value) -> str:
        """Formate un ID pour Google Sheets en ajoutant l'apostrophe si n√©cessaire."""
        if not id_value:
            return ""

        str_value = str(id_value)

        # Ne pas ajouter d'apostrophe si l'ID est vide ou nan
        if not str_value or str_value.lower() == 'nan':
            return ""

        # Si l'ID commence d√©j√† par une apostrophe, le retourner tel quel
        if str_value.startswith("'"):
            return str_value

        # Sinon, nettoyer et ajouter l'apostrophe
        clean_id = str_value.lstrip("'")
        return f"'{clean_id}"

    async def refresh_monitored_scenes(self):
        """Recharge les sc√®nes surveill√©es depuis Google Sheets."""
        if not self.sheet:
            logging.error("Aucune feuille Google Sheets configur√©e")
            return

        try:
            records = self.sheet.get_all_records()
            logging.info(f"R√©cup√©ration de {len(records)} enregistrements depuis Google Sheets")

            # Sauvegarder l'ancien cache pour comparaison
            old_scenes = set(self.monitored_scenes.keys())
            self.monitored_scenes.clear()

            for i, record in enumerate(records):
                channel_id_raw = record.get('channel_id')
                # Convertir la notation scientifique si n√©cessaire
                channel_id = self.convert_scientific_to_int(channel_id_raw)

                if channel_id and str(channel_id).strip() and channel_id != 'nan':  # V√©rifier que channel_id n'est pas vide
                    # Convertir tous les autres IDs aussi
                    record['channel_id'] = channel_id
                    record['gm_id'] = self.convert_scientific_to_int(record.get('gm_id', ''))
                    record['message_id'] = self.convert_scientific_to_int(record.get('message_id', ''))
                    record['guild_id'] = self.convert_scientific_to_int(record.get('guild_id', ''))

                    self.monitored_scenes[str(channel_id)] = record
                    logging.info(f"Sc√®ne ajout√©e: {channel_id} - {record.get('scene_name', 'N/A')}")
                else:
                    logging.warning(f"Enregistrement {i+1} ignor√©: channel_id vide ou invalide")

            # Identifier les sc√®nes qui ont √©t√© supprim√©es de Google Sheets
            new_scenes = set(self.monitored_scenes.keys())
            removed_scenes = old_scenes - new_scenes
            added_scenes = new_scenes - old_scenes

            if removed_scenes:
                logging.info(f"Sc√®nes supprim√©es de Google Sheets: {removed_scenes}")
            if added_scenes:
                logging.info(f"Nouvelles sc√®nes dans Google Sheets: {added_scenes}")

            logging.info(f"Total des sc√®nes charg√©es: {len(self.monitored_scenes)}")

        except Exception as e:
            logging.error(f"Erreur lors du rechargement des sc√®nes: {e}")
            import traceback
            logging.error(f"Traceback: {traceback.format_exc()}")

    async def get_channel_from_link(self, channel_link: str) -> Optional[Union[discord.TextChannel, discord.Thread, discord.ForumChannel]]:
        """R√©cup√®re un canal √† partir d'un lien Discord."""
        try:
            # V√©rifier si le lien est une mention de canal <#id>
            mention_match = re.match(r'<#(\d+)>', channel_link)
            if mention_match:
                channel_id = int(mention_match.group(1))
                channel = self.bot.get_channel(channel_id)
                if not channel:
                    for guild in self.bot.guilds:
                        channel = guild.get_channel(channel_id)
                        if channel:
                            break
                if channel:
                    logging.info(f"Canal mention trouv√©: {channel.name} (ID: {channel.id})")
                    return channel
                else:
                    logging.error(f"Canal {channel_id} non trouv√© pour la mention {channel_link}")
                    return None

            # Extraire l'ID du canal depuis le lien (support discord.com et discordapp.com)
            match = re.search(r'(?:discord(?:app)?\.com)/channels/(\d+)/(\d+)(?:/(\d+))?', channel_link)
            if not match:
                logging.error(f"Format de lien ou mention non reconnu: {channel_link}")
                return None

            logging.info(f"Lien analys√© - Guild: {match.group(1)}, Channel: {match.group(2)}, Thread/Post: {match.group(3) or 'None'}")

            guild_id = int(match.group(1))
            channel_id = int(match.group(2))
            thread_id = int(match.group(3)) if match.group(3) else None

            guild = self.bot.get_guild(guild_id)
            if not guild:
                logging.error(f"Guild {guild_id} non trouv√©e")
                logging.info(f"Guildes disponibles: {[g.id for g in self.bot.guilds]}")
                return None

            logging.info(f"Guild trouv√©e: {guild.name} (ID: {guild.id})")

            # Si c'est un thread ou un post de forum (3√®me ID pr√©sent)
            if thread_id:
                # D'abord essayer de r√©cup√©rer directement le thread/post
                try:
                    thread = await self.bot.fetch_channel(thread_id)
                    if thread:
                        logging.info(f"Thread/Post trouv√© directement: {thread.name} (ID: {thread.id})")
                        return thread
                except discord.NotFound:
                    logging.error(f"Thread/Post {thread_id} non trouv√© via fetch_channel")
                except discord.Forbidden:
                    logging.error(f"Pas d'autorisation pour acc√©der au thread/post {thread_id}")
                except Exception as e:
                    logging.error(f"Erreur lors de la r√©cup√©ration du thread/post {thread_id}: {e}")

                # Essayer via le canal parent
                channel = guild.get_channel(channel_id)
                if channel:
                    logging.info(f"Canal parent trouv√©: {channel.name} (Type: {type(channel).__name__})")

                    # Pour les forums, essayer de r√©cup√©rer le post
                    if isinstance(channel, discord.ForumChannel):
                        try:
                            # R√©cup√©rer tous les threads du forum
                            async for thread in channel.archived_threads(limit=None):
                                if thread.id == thread_id:
                                    logging.info(f"Post de forum trouv√© dans les archives: {thread.name}")
                                    return thread

                            # V√©rifier les threads actifs
                            for thread in channel.threads:
                                if thread.id == thread_id:
                                    logging.info(f"Post de forum trouv√© dans les actifs: {thread.name}")
                                    return thread

                        except Exception as e:
                            logging.error(f"Erreur lors de la recherche dans le forum: {e}")

                    # Pour les canaux texte, essayer de r√©cup√©rer le thread
                    elif isinstance(channel, discord.TextChannel):
                        try:
                            # V√©rifier les threads actifs
                            for thread in channel.threads:
                                if thread.id == thread_id:
                                    logging.info(f"Thread trouv√© dans les actifs: {thread.name}")
                                    return thread

                            # V√©rifier les threads archiv√©s
                            async for thread in channel.archived_threads(limit=None):
                                if thread.id == thread_id:
                                    logging.info(f"Thread trouv√© dans les archives: {thread.name}")
                                    return thread

                        except Exception as e:
                            logging.error(f"Erreur lors de la recherche de thread: {e}")

                logging.error(f"Impossible de trouver le thread/post {thread_id}")
                return None

            # Sinon, r√©cup√©rer le canal principal
            channel = guild.get_channel(channel_id)
            if channel:
                logging.info(f"Canal principal trouv√©: {channel.name} (Type: {type(channel).__name__})")
                return channel
            else:
                logging.error(f"Canal {channel_id} non trouv√© dans la guild {guild_id}")
                logging.info(f"Canaux disponibles dans la guild: {[(c.id, c.name, type(c).__name__) for c in guild.channels[:10]]}")

                # Essayer de r√©cup√©rer via l'API Discord
                try:
                    logging.info(f"Tentative de r√©cup√©ration via fetch_channel pour {channel_id}")
                    fetched_channel = await self.bot.fetch_channel(channel_id)
                    if fetched_channel:
                        logging.info(f"Canal r√©cup√©r√© via API: {fetched_channel.name} (Type: {type(fetched_channel).__name__})")
                        return fetched_channel
                except discord.NotFound:
                    logging.error(f"Canal {channel_id} n'existe pas ou n'est pas accessible")
                except discord.Forbidden:
                    logging.error(f"Pas d'autorisation pour acc√©der au canal {channel_id}")
                except Exception as e:
                    logging.error(f"Erreur lors de fetch_channel: {e}")

                return None

        except Exception as e:
            logging.error(f"Erreur lors de la r√©cup√©ration du canal: {e}")
            import traceback
            logging.error(f"Traceback: {traceback.format_exc()}")
            return None

    def parse_date(self, date_str: str) -> datetime:
        """Parse une date au format JJ/MM/AA ou JJ/MM/AAAA."""
        try:
            # Essayer d'abord le format avec ann√©e sur 4 chiffres (JJ/MM/AAAA)
            parsed_date = datetime.strptime(date_str, "%d/%m/%Y").replace(hour=0, minute=0, second=0, microsecond=0)
            # Ajouter la timezone Paris
            return self.paris_tz.localize(parsed_date)
        except ValueError:
            try:
                # Essayer le format avec ann√©e sur 2 chiffres (JJ/MM/AA)
                parsed_date = datetime.strptime(date_str, "%d/%m/%y").replace(hour=0, minute=0, second=0, microsecond=0)
                # Ajouter la timezone Paris
                return self.paris_tz.localize(parsed_date)
            except ValueError:
                # Si aucun format ne fonctionne, utiliser la date d'aujourd'hui au d√©but de la journ√©e
                today = datetime.now(self.paris_tz).replace(hour=0, minute=0, second=0, microsecond=0)
                return today

    async def get_webhook_username(self, message: discord.Message) -> Optional[str]:
        """R√©cup√®re le nom d'utilisateur d'un webhook (pour Tupperbox)."""
        try:
            if message.webhook_id:
                # Pour Tupperbox, le nom du personnage est g√©n√©ralement dans le nom d'affichage
                return message.author.display_name
        except:
            pass
        return None

    async def get_user_display_name_async(self, message: discord.Message) -> str:
        """Version asynchrone pour r√©cup√©rer le nom d'affichage d'un utilisateur."""
        if message.author.bot and message.webhook_id:
            # C'est un webhook (Tupperbox), utiliser le nom du personnage
            return message.author.name if message.author.name else message.author.display_name
        else:
            # Utilisateur normal - r√©cup√©rer le Member pour avoir le nickname du serveur
            if message.guild:
                # Essayer d'abord le cache
                member = message.guild.get_member(message.author.id)

                # Si pas dans le cache, essayer de le r√©cup√©rer via l'API
                if not member:
                    try:
                        member = await message.guild.fetch_member(message.author.id)
                        logging.debug(f"Membre {message.author.id} r√©cup√©r√© via fetch_member")
                    except discord.NotFound:
                        logging.warning(f"Membre {message.author.id} non trouv√© dans le serveur {message.guild.id}")
                    except discord.Forbidden:
                        logging.warning(f"Pas de permission pour r√©cup√©rer le membre {message.author.id}")
                    except Exception as e:
                        logging.error(f"Erreur lors de la r√©cup√©ration du membre {message.author.id}: {e}")

                if member:
                    display_name = member.display_name
                    logging.debug(f"Nom d'affichage pour {message.author.id}: '{display_name}' (nickname: '{member.nick}', global_name: '{member.global_name}', username: '{member.name}')")
                    return display_name

            # Fallback si pas de serveur ou membre non trouv√©
            fallback_name = message.author.display_name
            logging.debug(f"Fallback pour {message.author.id}: '{fallback_name}'")
            return fallback_name

    def get_user_display_name(self, message: discord.Message) -> str:
        """R√©cup√®re le nom d'affichage d'un utilisateur (version synchrone pour compatibilit√©)."""
        if message.author.bot and message.webhook_id:
            # C'est un webhook (Tupperbox), utiliser le nom du personnage
            return message.author.name if message.author.name else message.author.display_name
        else:
            # Utilisateur normal - r√©cup√©rer le Member pour avoir le nickname du serveur
            if message.guild:
                member = message.guild.get_member(message.author.id)
                if member:
                    display_name = member.display_name
                    logging.debug(f"Nom d'affichage pour {message.author.id}: '{display_name}' (nickname: '{member.nick}', global_name: '{member.global_name}', username: '{member.name}')")
                    return display_name
                else:
                    logging.warning(f"Membre {message.author.id} non trouv√© dans le cache du serveur {message.guild.id}")

            # Fallback si pas de serveur ou membre non trouv√©
            fallback_name = message.author.display_name
            logging.debug(f"Fallback pour {message.author.id}: '{fallback_name}'")
            return fallback_name

    def should_ignore_message_for_participants(self, message: discord.Message) -> bool:
        """D√©termine si un message doit √™tre ignor√© pour la liste des participants (ex: Ma√Ætre du Jeu, message initiateur de forum)."""
        # Ignorer des utilisateurs sp√©cifiques par leur ID
        ignored_user_ids = [249497144698863617, 496737005720436756]
        if message.author.id in ignored_user_ids:
            return True

        # Ignorer tous les webhooks qui ont le nom "Ma√Ætre du Jeu" (avec ou sans caract√®res invisibles)
        if message.author.bot and message.webhook_id:
            user_name = self.get_user_display_name(message)
            # Nettoyer le nom en supprimant les caract√®res invisibles et espaces
            clean_name = ''.join(char for char in user_name if char.isprintable()).strip()
            if clean_name == "Ma√Ætre du Jeu" or user_name.startswith("Ma√Ætre du Jeu"):
                return True

        # Ignorer le message initiateur des posts de forum
        if isinstance(message.channel, discord.Thread) and hasattr(message.channel, 'parent'):
            # V√©rifier si c'est un thread de forum
            if isinstance(message.channel.parent, discord.ForumChannel):
                # V√©rifier si c'est le message initiateur en utilisant l'ID du thread
                # Le message initiateur d'un post de forum a le m√™me ID que le thread
                if message.id == message.channel.id:
                    return True

        return False

    def is_game_master_message(self, message: discord.Message) -> bool:
        """D√©termine si un message provient du 'Ma√Ætre du Jeu' ou doit √™tre ignor√© pour l'activit√©."""
        # Ignorer des utilisateurs sp√©cifiques par leur ID
        ignored_user_ids = [249497144698863617, 496737005720436756]
        if message.author.id in ignored_user_ids:
            return True

        # Ignorer les messages du Ma√Ætre du Jeu
        if message.author.bot and message.webhook_id:
            user_name = self.get_user_display_name(message)
            # Nettoyer le nom en supprimant les caract√®res invisibles et espaces
            clean_name = ''.join(char for char in user_name if char.isprintable()).strip()
            if clean_name == "Ma√Ætre du Jeu" or user_name.startswith("Ma√Ætre du Jeu"):
                return True

        # Ignorer le message initiateur des posts de forum pour les notifications
        if isinstance(message.channel, discord.Thread) and hasattr(message.channel, 'parent'):
            # V√©rifier si c'est un thread de forum
            if isinstance(message.channel.parent, discord.ForumChannel):
                # V√©rifier si c'est le message initiateur en utilisant l'ID du thread
                # Le message initiateur d'un post de forum a le m√™me ID que le thread
                if message.id == message.channel.id:
                    return True

        return False

    async def get_channel_participants(self, channel: Union[discord.TextChannel, discord.Thread], start_date: datetime) -> List[str]:
        """R√©cup√®re la liste des participants depuis une date donn√©e."""
        participants = set()

        try:
            # V√©rifier si le canal existe et est accessible
            if not channel:
                logging.error("Canal non fourni pour get_channel_participants")
                return []

            logging.info(f"R√©cup√©ration des participants pour {channel.name} (Type: {type(channel).__name__}) depuis {start_date}")
            logging.info(f"Date de surveillance (timezone): {start_date} - Timezone: {start_date.tzinfo}")

            # Tester d'abord sans filtre de date pour voir s'il y a des messages
            total_messages = 0
            async for message in channel.history(limit=10):
                total_messages += 1
                if total_messages <= 3:
                    logging.info(f"Message r√©cent {total_messages}: '{self.get_user_display_name(message)}' le {message.created_at} (apr√®s {start_date}? {message.created_at > start_date})")

            logging.info(f"Total des messages r√©cents dans le canal: {total_messages}")

            # Maintenant r√©cup√©rer avec le filtre de date
            message_count = 0
            async for message in channel.history(limit=None, after=start_date):
                message_count += 1

                # Ignorer les messages qui doivent √™tre filtr√©s pour les participants (ex: Ma√Ætre du Jeu)
                if self.should_ignore_message_for_participants(message):
                    continue

                # Utiliser la version asynchrone pour obtenir le nom d'affichage
                user_name = await self.get_user_display_name_async(message)
                participants.add(user_name)



            # Convertir en liste tri√©e et d√©doublonn√©e (le set garantit d√©j√† l'unicit√©)
            participants_list = sorted(list(participants))  # Trier pour plus de lisibilit√©
            logging.info(f"Analys√© {message_count} messages depuis {start_date}, trouv√© {len(participants_list)} participants: {participants_list}")

        except discord.Forbidden:
            logging.error(f"Pas d'autorisation pour lire l'historique de {channel.name}")
        except Exception as e:
            logging.error(f"Erreur lors de la r√©cup√©ration des participants: {e}")
            import traceback
            logging.error(f"Traceback: {traceback.format_exc()}")

        return list(participants)

    async def get_last_activity(self, channel: Union[discord.TextChannel, discord.Thread]) -> Optional[dict]:
        """R√©cup√®re la derni√®re activit√© dans un canal."""
        try:
            if not channel:
                logging.error("Canal non fourni pour get_last_activity")
                return None

            logging.info(f"R√©cup√©ration de la derni√®re activit√© pour {channel.name}")

            async for message in channel.history(limit=50):
                # Pour la derni√®re activit√©, on prend TOUS les messages (y compris Ma√Ætre du Jeu)
                # car on veut savoir quand la sc√®ne a vraiment √©t√© active pour la derni√®re fois

                # Utiliser la version asynchrone pour obtenir le nom d'affichage
                user_name = await self.get_user_display_name_async(message)

                activity = {
                    'user': user_name,
                    'date': message.created_at.astimezone(self.paris_tz),
                    'message_id': message.id
                }

                logging.info(f"Derni√®re activit√© trouv√©e: {user_name} le {activity['date']}")
                return activity

        except discord.Forbidden:
            logging.error(f"Pas d'autorisation pour lire l'historique de {channel.name}")
        except Exception as e:
            logging.error(f"Erreur lors de la r√©cup√©ration de la derni√®re activit√©: {e}")
            import traceback
            logging.error(f"Traceback: {traceback.format_exc()}")

        return None

    async def create_surveillance_embed(self, scene_data: dict) -> discord.Embed:
        """Cr√©e l'embed de surveillance d'une sc√®ne."""
        try:
            embed = discord.Embed(
                title="üé≠ Surveillance de Sc√®ne",
                color=0x3498db,
                timestamp=datetime.now(self.paris_tz)
            )

            # Lien vers la sc√®ne (remplace le nom par un lien cliquable)
            channel_id = scene_data.get('channel_id')
            if channel_id:
                embed.add_field(
                    name="üìç Sc√®ne",
                    value=f"<#{channel_id}>",
                    inline=True
                )
            else:
                embed.add_field(
                    name="üìç Sc√®ne",
                    value=scene_data.get('scene_name', 'Nom inconnu'),
                    inline=True
                )

            # MJ responsable
            gm_id = scene_data.get('gm_id')
            gm_mention = f"<@{gm_id}>" if gm_id else "Aucun"
            embed.add_field(
                name="üéØ MJ Responsable",
                value=gm_mention,
                inline=True
            )

            # Date de d√©but
            start_date = scene_data.get('start_date', '')
            if start_date:
                try:
                    date_obj = datetime.fromisoformat(start_date)
                    formatted_date = date_obj.strftime("%d/%m/%Y")
                except:
                    formatted_date = start_date
            else:
                formatted_date = "Date inconnue"

            embed.add_field(
                name="üìÖ D√©but de surveillance",
                value=formatted_date,
                inline=True
            )

            # Participants
            participants = scene_data.get('participants', '[]')
            if isinstance(participants, str):
                try:
                    participants = json.loads(participants)
                except:
                    participants = []

            if participants:
                participants_text = "\n".join([f"‚Ä¢ {p}" for p in participants])  # Afficher tous les participants
            else:
                participants_text = "Aucun participant"

            embed.add_field(
                name=f"üé≠ Personnages ({len(participants)})",
                value=participants_text,
                inline=False
            )

            # Derni√®re activit√©
            last_activity_user = scene_data.get('last_activity_user', 'Aucune activit√©')
            last_activity_date = scene_data.get('last_activity_date', '')

            if last_activity_date:
                try:
                    activity_date = datetime.fromisoformat(last_activity_date)
                    # S'assurer que activity_date a une timezone
                    if activity_date.tzinfo is None:
                        activity_date = self.paris_tz.localize(activity_date)

                    now = datetime.now(self.paris_tz)
                    time_diff = now - activity_date

                    if time_diff.days > 0:
                        time_ago = f"il y a {time_diff.days} jour(s)"
                    elif time_diff.seconds > 3600:
                        hours = time_diff.seconds // 3600
                        time_ago = f"il y a {hours} heure(s)"
                    else:
                        minutes = time_diff.seconds // 60
                        time_ago = f"il y a {minutes} minute(s)"

                    activity_text = f"{last_activity_user}\n{activity_date.strftime('%d/%m/%Y √† %H:%M')} ({time_ago})"
                except:
                    activity_text = f"{last_activity_user}\n{last_activity_date}"
            else:
                activity_text = "Aucune activit√© d√©tect√©e"

            embed.add_field(
                name="‚è∞ Derni√®re Activit√©",
                value=activity_text,
                inline=False
            )

            embed.set_footer(text="Mise √† jour automatique toutes les heures")

            return embed

        except Exception as e:
            logging.error(f"Erreur lors de la cr√©ation de l'embed: {e}")
            return discord.Embed(title="‚ùå Erreur", description="Impossible de cr√©er l'embed de surveillance.")

    @commands.command(name='scene')
    async def scene_command(self, ctx, channel_link: str = None, date: str = None, gm_id: str = None):
        """
        Commande pour initier la surveillance d'une sc√®ne.
        Usage: !scene [Lien du salon] [Date JJ/MM/AA ou JJ/MM/AAAA] [ID du MJ]
        """
        if not self.sheet:
            await ctx.send("‚ùå Erreur de configuration Google Sheets.")
            return

        if not channel_link:
            await ctx.send("‚ùå Veuillez fournir un lien vers le salon √† surveiller.")
            return

        try:
            logging.info(f"Tentative de surveillance pour le lien: {channel_link}")

            # R√©cup√©rer le canal
            channel = await self.get_channel_from_link(channel_link)
            if not channel:
                logging.error(f"Canal non trouv√© pour le lien: {channel_link}")

                # Analyser le lien pour donner plus d'infos
                match = re.search(r'(?:discord(?:app)?\.com)/channels/(\d+)/(\d+)(?:/(\d+))?', channel_link)
                if match:
                    guild_id = int(match.group(1))
                    channel_id = int(match.group(2))

                    guild = self.bot.get_guild(guild_id)
                    if not guild:
                        error_msg = f"‚ùå **Serveur non trouv√©**\nLe bot n'a pas acc√®s au serveur avec l'ID `{guild_id}`.\n\n**V√©rifiez que :**\n‚Ä¢ Le bot est bien pr√©sent sur ce serveur\n‚Ä¢ L'ID du serveur est correct"
                    else:
                        error_msg = f"‚ùå **Canal non trouv√©**\nLe canal avec l'ID `{channel_id}` n'existe pas ou n'est pas accessible sur le serveur **{guild.name}**.\n\n**Causes possibles :**\n‚Ä¢ Le canal a √©t√© supprim√©\n‚Ä¢ Le bot n'a pas les permissions pour voir ce canal\n‚Ä¢ L'ID du canal est incorrect"
                else:
                    error_msg = f"‚ùå **Format de lien invalide**\n**Lien fourni:** {channel_link}\n\n**Formats support√©s:**\n‚Ä¢ Salon: `https://discord.com/channels/GUILD_ID/CHANNEL_ID`\n‚Ä¢ Thread: `https://discord.com/channels/GUILD_ID/CHANNEL_ID/THREAD_ID`\n‚Ä¢ Post de forum: `https://discord.com/channels/GUILD_ID/FORUM_ID/POST_ID`\n‚Ä¢ √âgalement support√©: `discordapp.com` au lieu de `discord.com`"

                await ctx.send(error_msg)
                return

            logging.info(f"Canal trouv√©: {channel.name} (ID: {channel.id}, Type: {type(channel).__name__})")

            # Parser la date
            if date:
                start_date = self.parse_date(date)
            else:
                start_date = datetime.now(self.paris_tz)

            # D√©terminer le MJ
            if gm_id:
                try:
                    gm_id = str(int(gm_id.strip('<@!>')))  # Nettoyer les mentions
                except ValueError:
                    await ctx.send("‚ùå ID du MJ invalide.")
                    return
            else:
                gm_id = str(ctx.author.id)

            # V√©rifier si la sc√®ne est d√©j√† surveill√©e
            if str(channel.id) in self.monitored_scenes:
                await ctx.send("‚ùå Cette sc√®ne est d√©j√† sous surveillance.")
                return

            # R√©cup√©rer les participants et la derni√®re activit√©
            participants = await self.get_channel_participants(channel, start_date)
            last_activity = await self.get_last_activity(channel)

            # D√©terminer le type de canal
            if isinstance(channel, discord.Thread):
                channel_type = "Thread"
            elif isinstance(channel, discord.ForumChannel):
                channel_type = "Forum"
            else:
                channel_type = "TextChannel"

            # Cr√©er les donn√©es de la sc√®ne
            scene_data = {
                'channel_id': str(channel.id),
                'scene_name': channel.name,
                'gm_id': gm_id,
                'start_date': start_date.isoformat(),
                'participants': json.dumps(participants),
                'last_activity_user': last_activity['user'] if last_activity else 'Aucune activit√©',
                'last_activity_date': last_activity['date'].isoformat() if last_activity else '',
                'message_id': '',  # Sera mis √† jour apr√®s l'envoi
                'channel_type': channel_type,
                'guild_id': str(channel.guild.id)
            }

            # Ajouter √† Google Sheets (avec apostrophe pour forcer le format texte sur les IDs)
            self.sheet.append_row([
                self.format_id_for_sheets(scene_data['channel_id']),
                scene_data['scene_name'],
                self.format_id_for_sheets(scene_data['gm_id']),
                scene_data['start_date'],
                scene_data['participants'],
                scene_data['last_activity_user'],
                scene_data['last_activity_date'],
                self.format_id_for_sheets(scene_data['message_id']),
                scene_data['channel_type'],
                self.format_id_for_sheets(scene_data['guild_id'])
            ])

            # Ajouter au cache local
            self.monitored_scenes[str(channel.id)] = scene_data

            # Envoyer le message de surveillance
            surveillance_channel = self.bot.get_channel(SURVEILLANCE_CHANNEL_ID)
            if surveillance_channel:
                embed = await self.create_surveillance_embed(scene_data)
                view = SceneSurveillanceView(self, scene_data)

                message = await surveillance_channel.send(embed=embed, view=view)

                # Mettre √† jour l'ID du message dans Google Sheets
                scene_data['message_id'] = str(message.id)
                await self.update_scene_message_id(str(channel.id), str(message.id))

            await ctx.send(f"‚úÖ Surveillance initi√©e pour **{channel.name}**.")

            # Notifier le MJ
            gm = self.bot.get_user(int(gm_id))
            if gm and gm.id != ctx.author.id:
                try:
                    await gm.send(f"üé≠ **Nouvelle surveillance de sc√®ne**\nVous avez √©t√© d√©sign√© comme MJ pour la sc√®ne **{channel.name}**.")
                except:
                    pass

        except Exception as e:
            logging.error(f"Erreur dans la commande scene: {e}")
            await ctx.send("‚ùå Une erreur est survenue lors de l'initialisation de la surveillance.")

    @commands.command(name='diagnose_sheet')
    @commands.has_permissions(administrator=True)
    async def diagnose_sheet_command(self, ctx):
        """Diagnostique l'√©tat du Google Sheet pour identifier les probl√®mes."""
        if not self.sheet:
            await ctx.send("‚ùå Erreur de configuration Google Sheets.")
            return

        try:
            records = self.sheet.get_all_records()

            issues = {
                'double_apostrophes': 0,
                'scientific_notation': 0,
                'missing_message_id': 0,
                'empty_ids': 0,
                'duplicates': 0
            }

            seen_channels = set()

            for i, record in enumerate(records, start=2):
                channel_id = str(record.get('channel_id', ''))
                gm_id = str(record.get('gm_id', ''))
                message_id = str(record.get('message_id', ''))
                guild_id = str(record.get('guild_id', ''))

                # V√©rifier les doubles apostrophes
                for id_name, id_value in [('channel_id', channel_id), ('gm_id', gm_id), ('message_id', message_id), ('guild_id', guild_id)]:
                    if id_value.startswith("''"):
                        issues['double_apostrophes'] += 1
                        logging.info(f"Double apostrophe d√©tect√©e ligne {i} {id_name}: {id_value}")

                # V√©rifier la notation scientifique
                for id_value in [channel_id, gm_id, message_id, guild_id]:
                    if 'E+' in id_value.upper():
                        issues['scientific_notation'] += 1
                        logging.info(f"Notation scientifique d√©tect√©e ligne {i}: {id_value}")

                # V√©rifier les message_id manquants
                if not message_id or message_id.strip() == '' or message_id.lower() == 'nan':
                    issues['missing_message_id'] += 1
                    logging.info(f"Message_id manquant ligne {i}")

                # V√©rifier les IDs vides
                if not channel_id.lstrip("'").strip():
                    issues['empty_ids'] += 1
                    logging.info(f"Channel_id vide ligne {i}")

                # V√©rifier les doublons
                clean_channel_id = channel_id.lstrip("'")
                if clean_channel_id in seen_channels:
                    issues['duplicates'] += 1
                    logging.info(f"Doublon d√©tect√© ligne {i}: {clean_channel_id}")
                else:
                    seen_channels.add(clean_channel_id)

            embed = discord.Embed(
                title="üîç Diagnostic du Google Sheet",
                color=0x3498db
            )

            embed.add_field(
                name="üìä R√©sum√© des probl√®mes",
                value=f"‚Ä¢ Doubles apostrophes: {issues['double_apostrophes']}\n"
                      f"‚Ä¢ Notation scientifique: {issues['scientific_notation']}\n"
                      f"‚Ä¢ Message_id manquants: {issues['missing_message_id']}\n"
                      f"‚Ä¢ IDs vides: {issues['empty_ids']}\n"
                      f"‚Ä¢ Doublons: {issues['duplicates']}",
                inline=False
            )

            embed.add_field(
                name="üõ†Ô∏è Actions recommand√©es",
                value="‚Ä¢ `!fix_sheet_ids` - Corriger les formats d'IDs\n"
                      "‚Ä¢ `!restore_message_ids` - Restaurer les message_id\n"
                      "‚Ä¢ `!remove_duplicates` - Supprimer les doublons",
                inline=False
            )

            await ctx.send(embed=embed)

        except Exception as e:
            logging.error(f"Erreur lors du diagnostic: {e}")
            await ctx.send(f"‚ùå Erreur lors du diagnostic: {str(e)}")

    @commands.command(name='remove_duplicates')
    @commands.has_permissions(administrator=True)
    async def remove_duplicates_command(self, ctx):
        """Supprime les doublons dans Google Sheets bas√©s sur channel_id."""
        if not self.sheet:
            await ctx.send("‚ùå Erreur de configuration Google Sheets.")
            return

        try:
            await ctx.send("üîß Suppression des doublons en cours...")

            records = self.sheet.get_all_records()
            seen_channels = set()
            rows_to_delete = []

            # Identifier les doublons (en partant de la fin pour √©viter les probl√®mes d'index)
            for i, record in enumerate(records, start=2):
                channel_id = str(record.get('channel_id', '')).lstrip("'")

                if channel_id and channel_id != 'nan':
                    if channel_id in seen_channels:
                        rows_to_delete.append(i)
                        logging.info(f"Doublon d√©tect√© ligne {i}: {channel_id}")
                    else:
                        seen_channels.add(channel_id)

            # Supprimer les doublons (en commen√ßant par la fin)
            for row_num in reversed(rows_to_delete):
                self.sheet.delete_rows(row_num)
                logging.info(f"Ligne {row_num} supprim√©e")

            await ctx.send(f"‚úÖ Suppression termin√©e ! {len(rows_to_delete)} doublons supprim√©s.")

            # Recharger le cache
            await self.refresh_monitored_scenes()
            await ctx.send("üîÑ Cache des sc√®nes recharg√©.")

        except Exception as e:
            logging.error(f"Erreur lors de la suppression des doublons: {e}")
            await ctx.send(f"‚ùå Erreur lors de la suppression: {str(e)}")

    @commands.command(name='recover_message_ids')
    @commands.has_permissions(administrator=True)
    async def recover_message_ids_command(self, ctx):
        """R√©cup√®re les message_id depuis les messages existants dans le canal de surveillance."""
        if not self.sheet:
            await ctx.send("‚ùå Erreur de configuration Google Sheets.")
            return

        try:
            await ctx.send("üîß R√©cup√©ration des message_id depuis le canal de surveillance...")

            surveillance_channel = self.bot.get_channel(SURVEILLANCE_CHANNEL_ID)
            if not surveillance_channel:
                await ctx.send("‚ùå Canal de surveillance non trouv√©.")
                return

            # R√©cup√©rer les messages r√©cents du canal de surveillance
            messages = []
            async for message in surveillance_channel.history(limit=200):
                if message.author == self.bot.user and message.embeds:
                    embed = message.embeds[0]
                    # Chercher le channel_id dans l'embed
                    for field in embed.fields:
                        if "Canal:" in field.value or "Informations de debug" in field.name:
                            # Extraire l'ID du canal depuis le mention <#123456>
                            import re
                            channel_match = re.search(r'<#(\d+)>', field.value)
                            if channel_match:
                                channel_id = channel_match.group(1)
                                messages.append((channel_id, str(message.id)))
                                break

            await ctx.send(f"üìã {len(messages)} messages de surveillance trouv√©s.")

            # Mettre √† jour Google Sheets
            records = self.sheet.get_all_records()
            updated_count = 0

            for i, record in enumerate(records, start=2):
                record_channel_id = str(record.get('channel_id', '')).lstrip("'")
                current_message_id = record.get('message_id', '')

                # Chercher le message_id correspondant
                for msg_channel_id, msg_id in messages:
                    if record_channel_id == msg_channel_id:
                        if not current_message_id or current_message_id.strip() == '' or current_message_id.lower() == 'nan':
                            # Mettre √† jour le message_id
                            self.sheet.update(f'H{i}', self.format_id_for_sheets(msg_id))
                            updated_count += 1
                            logging.info(f"Message_id r√©cup√©r√© pour canal {record_channel_id}: {msg_id}")
                        break

            await ctx.send(f"‚úÖ R√©cup√©ration termin√©e ! {updated_count} message_id r√©cup√©r√©s.")

            # Recharger le cache
            await self.refresh_monitored_scenes()
            await ctx.send("üîÑ Cache des sc√®nes recharg√©.")

        except Exception as e:
            logging.error(f"Erreur lors de la r√©cup√©ration des message_id: {e}")
            await ctx.send(f"‚ùå Erreur lors de la r√©cup√©ration: {str(e)}")

    @commands.command(name='restore_message_ids')
    @commands.has_permissions(administrator=True)
    async def restore_message_ids_command(self, ctx):
        """Restaure les message_id manquants en recr√©ant les messages de surveillance."""
        if not self.sheet:
            await ctx.send("‚ùå Erreur de configuration Google Sheets.")
            return

        try:
            await ctx.send("üîß Restauration des message_id en cours...")

            records = self.sheet.get_all_records()
            restored_count = 0

            surveillance_channel = self.bot.get_channel(SURVEILLANCE_CHANNEL_ID)
            if not surveillance_channel:
                await ctx.send("‚ùå Canal de surveillance non trouv√©.")
                return

            for i, record in enumerate(records, start=2):
                message_id = record.get('message_id', '')
                channel_id = record.get('channel_id', '')

                # Si message_id est vide ou invalide
                if not message_id or message_id.strip() == '' or message_id.lower() == 'nan':
                    try:
                        # Cr√©er un nouveau message de surveillance
                        scene_data = {
                            'channel_id': self.convert_scientific_to_int(channel_id),
                            'scene_name': record.get('scene_name', ''),
                            'gm_id': self.convert_scientific_to_int(record.get('gm_id', '')),
                            'start_date': record.get('start_date', ''),
                            'participants': record.get('participants', '[]'),
                            'last_activity_user': record.get('last_activity_user', ''),
                            'last_activity_date': record.get('last_activity_date', ''),
                            'channel_type': record.get('channel_type', ''),
                            'guild_id': self.convert_scientific_to_int(record.get('guild_id', ''))
                        }

                        embed = await self.create_surveillance_embed(scene_data)
                        view = SceneSurveillanceView(self, scene_data)

                        new_message = await surveillance_channel.send(embed=embed, view=view)

                        # Mettre √† jour le message_id dans Google Sheets
                        self.sheet.update(f'H{i}', self.format_id_for_sheets(str(new_message.id)))
                        restored_count += 1

                        logging.info(f"Message_id restaur√© pour la sc√®ne {scene_data['scene_name']}: {new_message.id}")

                    except Exception as e:
                        logging.error(f"Erreur lors de la restauration du message_id ligne {i}: {e}")

            await ctx.send(f"‚úÖ Restauration termin√©e ! {restored_count} message_id restaur√©s.")

            # Recharger le cache
            await self.refresh_monitored_scenes()
            await ctx.send("üîÑ Cache des sc√®nes recharg√©.")

        except Exception as e:
            logging.error(f"Erreur lors de la restauration des message_id: {e}")
            await ctx.send(f"‚ùå Erreur lors de la restauration: {str(e)}")

    @commands.command(name='fix_sheet_ids')
    @commands.has_permissions(administrator=True)
    async def fix_sheet_ids_command(self, ctx):
        """Corrige les IDs Discord mal format√©s dans Google Sheets."""
        if not self.sheet:
            await ctx.send("‚ùå Erreur de configuration Google Sheets.")
            return

        try:
            await ctx.send("üîß Correction des IDs Discord en cours...")

            records = self.sheet.get_all_records()
            fixed_count = 0

            for i, record in enumerate(records, start=2):  # Start=2 car ligne 1 = en-t√™te
                needs_update = False
                updated_row = []

                # Colonnes √† corriger : A=channel_id, C=gm_id, H=message_id, J=guild_id
                columns_to_fix = {
                    'A': record.get('channel_id', ''),
                    'B': record.get('scene_name', ''),
                    'C': record.get('gm_id', ''),
                    'D': record.get('start_date', ''),
                    'E': record.get('participants', ''),
                    'F': record.get('last_activity_user', ''),
                    'G': record.get('last_activity_date', ''),
                    'H': record.get('message_id', ''),
                    'I': record.get('channel_type', ''),
                    'J': record.get('guild_id', '')
                }

                # V√©rifier et corriger les IDs
                for col, value in columns_to_fix.items():
                    if col in ['A', 'C', 'H', 'J']:  # Colonnes contenant des IDs Discord
                        original_value = str(value)

                        # V√©rifier si l'ID a besoin d'√™tre corrig√©
                        needs_id_fix = False

                        if 'E+' in original_value.upper():  # Notation scientifique
                            needs_id_fix = True
                        elif original_value.startswith("''"):  # Double apostrophe
                            needs_id_fix = True
                        elif original_value and not original_value.startswith("'") and original_value.strip() and original_value.lower() != 'nan':  # Pas d'apostrophe mais pas vide
                            needs_id_fix = True

                        if needs_id_fix:
                            # Convertir et formater l'ID
                            if 'E+' in original_value.upper():
                                # Notation scientifique - convertir
                                clean_id = self.convert_scientific_to_int(value)
                                if clean_id and clean_id.strip():
                                    formatted_id = self.format_id_for_sheets(clean_id)
                                    updated_row.append(formatted_id)
                                    needs_update = True
                                    logging.info(f"ID converti (notation scientifique): '{original_value}' ‚Üí '{formatted_id}'")
                                else:
                                    updated_row.append(original_value)
                            elif original_value.startswith("''"):
                                # Double apostrophe - corriger
                                clean_id = original_value.lstrip("'")
                                if clean_id and clean_id.strip():
                                    formatted_id = self.format_id_for_sheets(clean_id)
                                    updated_row.append(formatted_id)
                                    needs_update = True
                                    logging.info(f"ID corrig√© (double apostrophe): '{original_value}' ‚Üí '{formatted_id}'")
                                else:
                                    updated_row.append(original_value)
                            else:
                                # Pas d'apostrophe - ajouter une apostrophe
                                if original_value and original_value.strip() and original_value.lower() != 'nan':
                                    formatted_id = self.format_id_for_sheets(original_value)
                                    updated_row.append(formatted_id)
                                    needs_update = True
                                    logging.info(f"ID format√© (ajout apostrophe): '{original_value}' ‚Üí '{formatted_id}'")
                                else:
                                    updated_row.append(original_value)
                        else:
                            updated_row.append(value)
                    else:
                        updated_row.append(value)

                if needs_update:
                    self.sheet.update(f'A{i}:J{i}', [updated_row])
                    fixed_count += 1
                    logging.info(f"Ligne {i} corrig√©e")

            await ctx.send(f"‚úÖ Correction termin√©e ! {fixed_count} lignes ont √©t√© corrig√©es.")

            # Recharger le cache
            await self.refresh_monitored_scenes()
            await ctx.send("üîÑ Cache des sc√®nes recharg√©.")

        except Exception as e:
            logging.error(f"Erreur lors de la correction des IDs: {e}")
            await ctx.send(f"‚ùå Erreur lors de la correction: {str(e)}")

    @commands.command(name='check_channels')
    @commands.has_permissions(administrator=True)
    async def check_channels_command(self, ctx):
        """V√©rifie l'acc√®s aux canaux surveill√©s."""
        if not self.sheet:
            await ctx.send("‚ùå Erreur de configuration Google Sheets.")
            return

        try:
            await self.refresh_monitored_scenes()

            embed = discord.Embed(
                title="üîç V√©rification des canaux surveill√©s",
                color=0x3498db
            )

            accessible = 0
            inaccessible = 0
            details = []

            for channel_id, scene_data in self.monitored_scenes.items():
                clean_channel_id = self.convert_scientific_to_int(channel_id)
                scene_name = scene_data.get('scene_name', 'Inconnu')

                try:
                    channel = self.bot.get_channel(int(clean_channel_id))
                    if not channel:
                        channel = await self.bot.fetch_channel(int(clean_channel_id))

                    accessible += 1
                    details.append(f"‚úÖ {scene_name} ({clean_channel_id})")

                except discord.NotFound:
                    inaccessible += 1
                    details.append(f"‚ùå {scene_name} ({clean_channel_id}) - Canal non trouv√©")
                except discord.Forbidden:
                    inaccessible += 1
                    details.append(f"üîí {scene_name} ({clean_channel_id}) - Permissions insuffisantes")
                except Exception as e:
                    inaccessible += 1
                    details.append(f"‚ö†Ô∏è {scene_name} ({clean_channel_id}) - Erreur: {str(e)[:50]}")

            embed.add_field(
                name="üìä R√©sum√©",
                value=f"Accessibles: {accessible}\nInaccessibles: {inaccessible}",
                inline=False
            )

            # Limiter les d√©tails pour √©viter les messages trop longs
            if details:
                details_text = "\n".join(details[:10])
                if len(details) > 10:
                    details_text += f"\n... et {len(details) - 10} autres"

                embed.add_field(
                    name="üìã D√©tails",
                    value=f"```{details_text}```",
                    inline=False
                )

            await ctx.send(embed=embed)

        except Exception as e:
            await ctx.send(f"‚ùå Erreur lors de la v√©rification: {e}")

    @commands.command(name="refresh_embeds")
    @commands.has_permissions(administrator=True)
    async def refresh_embeds(self, ctx):
        """Force la mise √† jour de tous les embeds de surveillance avec les noms d'utilisateur actuels."""
        if not self.sheet:
            await ctx.send("‚ùå Google Sheets non configur√©.")
            return

        try:
            await ctx.send("üîÑ Mise √† jour forc√©e de tous les embeds en cours...")

            # Recharger les donn√©es depuis Google Sheets
            await self.refresh_monitored_scenes()

            updated_count = 0
            failed_count = 0

            for channel_id, scene_data in self.monitored_scenes.items():
                try:
                    # R√©cup√©rer le canal
                    channel = self.bot.get_channel(int(channel_id))
                    if not channel:
                        channel = await self.bot.fetch_channel(int(channel_id))

                    # Recalculer les participants et la derni√®re activit√© avec les nouveaux noms
                    start_date = datetime.fromisoformat(scene_data['start_date'])
                    participants = await self.get_channel_participants(channel, start_date)
                    last_activity = await self.get_last_activity(channel)

                    # Mettre √† jour les donn√©es
                    scene_data['participants'] = json.dumps(participants)
                    if last_activity:
                        scene_data['last_activity_user'] = last_activity['user']
                        scene_data['last_activity_date'] = last_activity['date'].isoformat()

                    # Forcer la mise √† jour de l'embed
                    await self.update_surveillance_message(scene_data)

                    # Mettre √† jour Google Sheets
                    await self.update_scene_data(channel_id, scene_data)

                    updated_count += 1
                    logging.info(f"Embed mis √† jour pour la sc√®ne: {scene_data.get('scene_name', 'Inconnu')}")

                except Exception as e:
                    failed_count += 1
                    logging.error(f"Erreur lors de la mise √† jour de l'embed pour {channel_id}: {e}")

            await ctx.send(f"‚úÖ Mise √† jour termin√©e ! {updated_count} embeds mis √† jour, {failed_count} √©checs.")

        except Exception as e:
            await ctx.send(f"‚ùå Erreur lors de la mise √† jour des embeds: {e}")
            logging.error(f"Erreur dans refresh_embeds: {e}")

    @commands.command(name="test_names")
    @commands.has_permissions(administrator=True)
    async def test_names(self, ctx, channel_id: str = None):
        """Teste la r√©cup√©ration des noms d'utilisateur dans un canal sp√©cifique."""
        try:
            if channel_id:
                channel = self.bot.get_channel(int(channel_id))
                if not channel:
                    channel = await self.bot.fetch_channel(int(channel_id))
            else:
                channel = ctx.channel

            await ctx.send(f"üîç Test des noms d'utilisateur dans {channel.mention}...")

            # R√©cup√©rer les 10 derniers messages
            test_results = []
            async for message in channel.history(limit=10):
                if not message.author.bot or message.webhook_id:  # Inclure les webhooks mais pas les autres bots
                    user_name = await self.get_user_display_name_async(message)

                    # Informations d√©taill√©es
                    if message.guild:
                        # Essayer d'abord le cache
                        member = message.guild.get_member(message.author.id)

                        # Si pas dans le cache, essayer fetch_member
                        if not member:
                            try:
                                member = await message.guild.fetch_member(message.author.id)
                            except:
                                pass

                        if member:
                            info = f"**{user_name}** (ID: {message.author.id})\n"
                            info += f"  ‚Ä¢ Nickname: `{member.nick}`\n"
                            info += f"  ‚Ä¢ Global name: `{member.global_name}`\n"
                            info += f"  ‚Ä¢ Username: `{member.name}`\n"
                            info += f"  ‚Ä¢ Display name: `{member.display_name}`\n"
                            if message.webhook_id:
                                info += f"  ‚Ä¢ Webhook: `{message.author.name}`"
                        else:
                            info = f"**{user_name}** (ID: {message.author.id}) - Membre non trouv√© (cache + fetch)"
                    else:
                        info = f"**{user_name}** (ID: {message.author.id}) - Pas de serveur"

                    test_results.append(info)

            if test_results:
                # Diviser en chunks pour √©viter les messages trop longs
                chunk_size = 5
                for i in range(0, len(test_results), chunk_size):
                    chunk = test_results[i:i+chunk_size]
                    embed = discord.Embed(
                        title=f"üîç Test des noms - Partie {i//chunk_size + 1}",
                        description="\n\n".join(chunk),
                        color=0x3498db
                    )
                    await ctx.send(embed=embed)
            else:
                await ctx.send("‚ùå Aucun message d'utilisateur trouv√© dans ce canal.")

        except Exception as e:
            await ctx.send(f"‚ùå Erreur lors du test: {e}")
            logging.error(f"Erreur dans test_names: {e}")

    async def update_scene_message_id(self, channel_id: str, message_id: str):
        """Met √† jour l'ID du message de surveillance dans Google Sheets."""
        try:
            records = self.sheet.get_all_records()
            for i, record in enumerate(records, start=2):  # Start=2 car ligne 1 = en-t√™te
                record_channel_id = str(record.get('channel_id')).lstrip("'")
                clean_channel_id = str(channel_id).lstrip("'")
                if record_channel_id == clean_channel_id:
                    self.sheet.update(f'H{i}', self.format_id_for_sheets(message_id))  # Colonne H = message_id
                    break
        except Exception as e:
            logging.error(f"Erreur lors de la mise √† jour de l'ID du message: {e}")

    async def update_scene_gm(self, channel_id: str, new_gm_id: str):
        """Met √† jour le MJ d'une sc√®ne dans Google Sheets."""
        try:
            records = self.sheet.get_all_records()
            for i, record in enumerate(records, start=2):
                record_channel_id = str(record.get('channel_id')).lstrip("'")
                clean_channel_id = str(channel_id).lstrip("'")
                if record_channel_id == clean_channel_id:
                    self.sheet.update(f'C{i}', self.format_id_for_sheets(new_gm_id))  # Colonne C = gm_id
                    break
        except Exception as e:
            logging.error(f"Erreur lors de la mise √† jour du MJ: {e}")

    async def remove_scene_from_sheets(self, channel_id: str):
        """Supprime une sc√®ne de Google Sheets seulement (pour nettoyage)."""
        try:
            records = self.sheet.get_all_records()
            for i, record in enumerate(records, start=2):
                if str(record.get('channel_id')) == str(channel_id):
                    self.sheet.delete_rows(i)
                    logging.info(f"Sc√®ne {channel_id} supprim√©e de Google Sheets")
                    break
        except Exception as e:
            logging.error(f"Erreur lors de la suppression de Google Sheets: {e}")

    async def remove_scene_surveillance(self, channel_id: str):
        """Supprime une sc√®ne de la surveillance."""
        try:
            records = self.sheet.get_all_records()
            for i, record in enumerate(records, start=2):
                record_channel_id = str(record.get('channel_id')).lstrip("'")
                clean_channel_id = str(channel_id).lstrip("'")
                if record_channel_id == clean_channel_id:
                    self.sheet.delete_rows(i)
                    break

            # Supprimer du cache local
            if channel_id in self.monitored_scenes:
                del self.monitored_scenes[channel_id]

        except Exception as e:
            logging.error(f"Erreur lors de la suppression de la surveillance: {e}")

    async def update_scene_data(self, channel_id: str, scene_data: dict):
        """Met √† jour les donn√©es d'une sc√®ne dans Google Sheets."""
        try:
            logging.info(f"Mise √† jour des donn√©es pour le canal {channel_id}")



            records = self.sheet.get_all_records()

            found = False
            for i, record in enumerate(records, start=2):
                record_channel_id = record.get('channel_id')

                # Comparaison robuste en nettoyant les apostrophes des deux c√¥t√©s
                clean_record_id = str(record_channel_id).lstrip("'")
                clean_channel_id = str(channel_id).lstrip("'")

                if clean_record_id == clean_channel_id:
                    # Mettre √† jour toute la ligne (avec apostrophe pour forcer le format texte sur les IDs)
                    self.sheet.update(f'A{i}:J{i}', [[
                        self.format_id_for_sheets(scene_data['channel_id']),
                        scene_data['scene_name'],
                        self.format_id_for_sheets(scene_data['gm_id']),
                        scene_data['start_date'],
                        scene_data['participants'],
                        scene_data['last_activity_user'],
                        scene_data['last_activity_date'],
                        self.format_id_for_sheets(scene_data['message_id']),
                        scene_data['channel_type'],
                        self.format_id_for_sheets(scene_data['guild_id'])
                    ]])
                    logging.info(f"Donn√©es mises √† jour dans Google Sheets ligne {i}")
                    found = True
                    break

            if not found:
                # Canal non trouv√© dans Google Sheets - l'ajouter automatiquement
                logging.warning(f"Canal {channel_id} non trouv√© dans Google Sheets - ajout automatique")
                try:
                    self.sheet.append_row([
                        self.format_id_for_sheets(scene_data['channel_id']),
                        scene_data['scene_name'],
                        self.format_id_for_sheets(scene_data['gm_id']),
                        scene_data['start_date'],
                        scene_data['participants'],
                        scene_data['last_activity_user'],
                        scene_data['last_activity_date'],
                        self.format_id_for_sheets(scene_data['message_id']),
                        scene_data['channel_type'],
                        self.format_id_for_sheets(scene_data['guild_id'])
                    ])
                    logging.info(f"Canal {channel_id} ajout√© automatiquement √† Google Sheets")
                except Exception as add_error:
                    logging.error(f"Erreur lors de l'ajout automatique du canal {channel_id}: {add_error}")

        except Exception as e:
            logging.error(f"Erreur lors de la mise √† jour des donn√©es: {e}")
            import traceback
            logging.error(f"Traceback: {traceback.format_exc()}")

    async def update_all_scenes(self):
        """Met √† jour toutes les sc√®nes surveill√©es."""
        logging.info(f"Mise √† jour de {len(self.monitored_scenes)} sc√®nes surveill√©es")

        for channel_id, scene_data in self.monitored_scenes.items():
            try:
                # Convertir l'ID en cas de notation scientifique
                clean_channel_id = self.convert_scientific_to_int(channel_id)
                logging.info(f"Mise √† jour de la sc√®ne {clean_channel_id} ({scene_data.get('scene_name', 'Nom inconnu')})")

                try:
                    channel = self.bot.get_channel(int(clean_channel_id))
                    if not channel:
                        # Essayer de r√©cup√©rer via l'API
                        channel = await self.bot.fetch_channel(int(clean_channel_id))
                except ValueError as ve:
                    logging.error(f"ID de canal invalide '{clean_channel_id}': {ve}")
                    continue
                except discord.NotFound:
                    # Canal non trouv√© - peut √™tre supprim√© ou inaccessible
                    logging.warning(f"Canal {clean_channel_id} ({scene_data.get('scene_name', 'Inconnu')}) non trouv√© (404) - v√©rifiez les permissions ou si le canal existe")
                    continue
                except discord.Forbidden:
                    # Pas de permissions pour acc√©der au canal
                    logging.warning(f"Canal {clean_channel_id} ({scene_data.get('scene_name', 'Inconnu')}) inaccessible - permissions insuffisantes")
                    continue
                except Exception as e:
                    logging.error(f"Impossible de r√©cup√©rer le canal {clean_channel_id} ({scene_data.get('scene_name', 'Inconnu')}): {e}")
                    continue

                # R√©cup√©rer les nouvelles donn√©es
                start_date = datetime.fromisoformat(scene_data['start_date'])
                # S'assurer que la date a une timezone
                if start_date.tzinfo is None:
                    start_date = self.paris_tz.localize(start_date)

                logging.info(f"R√©cup√©ration des participants depuis {start_date} (timezone: {start_date.tzinfo})")

                participants = await self.get_channel_participants(channel, start_date)
                last_activity = await self.get_last_activity(channel)

                # Mettre √† jour les donn√©es locales
                old_participants = scene_data.get('participants', '[]')
                scene_data['participants'] = json.dumps(participants)

                if last_activity:
                    scene_data['last_activity_user'] = last_activity['user']
                    scene_data['last_activity_date'] = last_activity['date'].isoformat()

                logging.info(f"Participants mis √† jour: {len(participants)} trouv√©s")

                # Mettre √† jour Google Sheets
                await self.update_scene_data(channel_id, scene_data)

                # Mettre √† jour le message de surveillance
                await self.update_surveillance_message(scene_data)
                await asyncio.sleep(UPDATE_SLEEP_SECONDS)

            except Exception as e:
                logging.error(f"Erreur lors de la mise √† jour de la sc√®ne {channel_id}: {e}")
                import traceback
                logging.error(f"Traceback: {traceback.format_exc()}")

        await self.reorder_surveillance_messages()
        logging.info("Mise √† jour de toutes les sc√®nes termin√©e")

    async def update_surveillance_message(self, scene_data: dict):
        """Met √† jour le message de surveillance dans le canal d√©di√©."""
        try:
            surveillance_channel = self.bot.get_channel(SURVEILLANCE_CHANNEL_ID)
            if not surveillance_channel:
                return

            message_id = scene_data.get('message_id')
            if not message_id:
                return

            try:
                message = await surveillance_channel.fetch_message(int(message_id))
                embed = await self.create_surveillance_embed(scene_data)
                view = SceneSurveillanceView(self, scene_data)
                await message.edit(embed=embed, view=view)
            except discord.NotFound:
                # Le message a √©t√© supprim√©, en cr√©er un nouveau
                embed = await self.create_surveillance_embed(scene_data)
                view = SceneSurveillanceView(self, scene_data)
                new_message = await surveillance_channel.send(embed=embed, view=view)
                scene_data['message_id'] = str(new_message.id)
                await self.update_scene_message_id(scene_data['channel_id'], str(new_message.id))

        except Exception as e:
            logging.error(f"Erreur lors de la mise √† jour du message de surveillance: {e}")

    async def reorder_surveillance_messages(self):
        """R√©ordonne les messages de surveillance par date d'activit√©.

        Les sc√®nes les moins actives sont affich√©es dans les messages les plus
        r√©cents du salon de surveillance.
        """
        try:
            surveillance_channel = self.bot.get_channel(SURVEILLANCE_CHANNEL_ID)
            if not surveillance_channel:
                return

            scenes = [s for s in self.monitored_scenes.values() if s.get('message_id')]
            if not scenes:
                return

            def activity_date(scene: dict) -> datetime:
                date_str = scene.get('last_activity_date') or scene.get('start_date')
                if not date_str:
                    return datetime.fromtimestamp(0, tz=self.paris_tz)
                try:
                    dt = datetime.fromisoformat(date_str)
                    if dt.tzinfo is None:
                        dt = self.paris_tz.localize(dt)
                    return dt
                except Exception:
                    return datetime.fromtimestamp(0, tz=self.paris_tz)

            # Place the least active scenes in the most recent messages
            scenes.sort(key=activity_date, reverse=True)
            message_ids = sorted(int(s['message_id']) for s in scenes)

            for msg_id, scene in zip(message_ids, scenes):
                try:
                    message = await surveillance_channel.fetch_message(msg_id)
                    embed = await self.create_surveillance_embed(scene)
                    view = SceneSurveillanceView(self, scene)
                    await message.edit(embed=embed, view=view)
                    if int(scene['message_id']) != msg_id:
                        scene['message_id'] = str(msg_id)
                        await self.update_scene_message_id(scene['channel_id'], str(msg_id))
                    await asyncio.sleep(1)
                except Exception as e:
                    logging.error(f"Erreur lors du r√©ordonnancement des messages: {e}")

        except Exception as e:
            logging.error(f"Erreur dans reorder_surveillance_messages: {e}")

    async def notify_inactive_scene(self, scene_data: dict):
        """Notifie le MJ d'une sc√®ne inactive depuis 7 jours."""
        try:
            gm = self.bot.get_user(int(scene_data['gm_id']))
            if gm:
                # Calculer le temps exact d'inactivit√©
                last_activity_date = scene_data.get('last_activity_date', '')
                now = datetime.now(self.paris_tz)

                embed = discord.Embed(
                    title="‚ö†Ô∏è Sc√®ne Inactive",
                    description=f"La sc√®ne **{scene_data['scene_name']}** n'a pas eu d'activit√© depuis 7 jours.",
                    color=0xf39c12,
                    timestamp=now
                )

                if last_activity_date:
                    try:
                        activity_date = datetime.fromisoformat(last_activity_date)
                        if activity_date.tzinfo is None:
                            activity_date = self.paris_tz.localize(activity_date)

                        time_diff = now - activity_date
                        days_inactive = time_diff.days

                        embed.add_field(
                            name="Derni√®re activit√©",
                            value=f"{activity_date.strftime('%d/%m/%Y √† %H:%M')}\n({days_inactive} jours d'inactivit√©)",
                            inline=False
                        )

                        # Ajouter des infos de debug
                        embed.add_field(
                            name="üîç Informations de debug",
                            value=f"Canal: <#{scene_data['channel_id']}>\nDerni√®re v√©rification: {now.strftime('%d/%m/%Y √† %H:%M')}",
                            inline=False
                        )

                    except Exception as date_error:
                        logging.error(f"Erreur lors du parsing de la date d'activit√©: {date_error}")
                        embed.add_field(
                            name="Derni√®re activit√©",
                            value=f"Erreur de format: {last_activity_date}",
                            inline=False
                        )

                await gm.send(embed=embed)
                logging.info(f"Notification d'inactivit√© envoy√©e pour la sc√®ne {scene_data['scene_name']}")

        except Exception as e:
            logging.error(f"Erreur lors de la notification d'inactivit√©: {e}")

    async def flush_channel_update(self, channel_id: str):
        """Applique les mises √† jour diff√©r√©es pour un canal."""
        scene_data = self.pending_updates.get(channel_id)
        if not scene_data:
            return
        try:
            start_date = datetime.fromisoformat(scene_data['start_date'])
            channel = self.bot.get_channel(int(channel_id))
            participants = await self.get_channel_participants(channel, start_date)
            scene_data['participants'] = json.dumps(participants)
            await self.update_scene_data(channel_id, scene_data)
            await self.update_surveillance_message(scene_data)
            self.monitored_scenes[channel_id] = scene_data
        except Exception as e:
            logging.error(f"Erreur lors du rafra√Æchissement diff√©r√©: {e}")
        finally:
            self.pending_update_counts[channel_id] = 0
            self.pending_updates.pop(channel_id, None)

    @tasks.loop(minutes=UPDATE_INTERVAL_MINUTES)
    async def process_pending_updates(self):
        """Traite p√©riodiquement les mises √† jour en attente."""
        if not self.pending_updates:
            return
        for channel_id in list(self.pending_updates.keys()):
            await self.flush_channel_update(channel_id)
        await self.reorder_surveillance_messages()

    @process_pending_updates.before_loop
    async def before_process_pending_updates(self):
        await self.bot.wait_until_ready()

    def cleanup_old_notifications(self, current_time: Optional[float] = None) -> None:
        """Supprime les entr√©es p√©rim√©es du cache anti-spam."""
        if current_time is None:
            current_time = time.time()
        for channel_id in list(self.last_notifications.keys()):
            cache = self.last_notifications[channel_id]
            self.last_notifications[channel_id] = {
                uid: ts for uid, ts in cache.items()
                if current_time - ts <= NOTIFICATION_RETENTION_SECONDS
            }
            if not self.last_notifications[channel_id]:
                del self.last_notifications[channel_id]

        for channel_id in list(self.last_channel_notifications.keys()):
            if current_time - self.last_channel_notifications[channel_id] > NOTIFICATION_RETENTION_SECONDS:
                del self.last_channel_notifications[channel_id]

    @tasks.loop(hours=1)
    async def cleanup_notifications(self):
        """Nettoie p√©riodiquement le cache anti-spam."""
        self.cleanup_old_notifications()

    @cleanup_notifications.before_loop
    async def before_cleanup_notifications(self):
        await self.bot.wait_until_ready()

    def should_notify_gm(self, channel_id: str, user_id: int) -> bool:
        """D√©termine si le MJ doit √™tre notifi√© en fonction de l'anti-spam."""
        current_time = time.time()

        # Nettoyer les notifications expir√©es
        self.cleanup_old_notifications(current_time)

        # Initialiser le cache pour ce canal si n√©cessaire
        channel_cache = self.last_notifications.setdefault(channel_id, {})
        # V√©rifier la derni√®re notification pour cet utilisateur
        last_notification = channel_cache.get(user_id, 0)

        # D√©terminer le dernier utilisateur notifi√©
        last_user_notified = max(channel_cache, key=channel_cache.get, default=None)

        # V√©rifier l'intervalle global par salon
        last_channel_notif = self.last_channel_notifications.get(channel_id, 0)
        if (
            current_time - last_channel_notif
            < CHANNEL_NOTIFICATION_INTERVAL_MINUTES * 60
        ):
            return False

        if last_user_notified != user_id:
            # Utilisateur diff√©rent, notifier imm√©diatement
            channel_cache[user_id] = current_time
            self.last_channel_notifications[channel_id] = current_time
            return True

        # M√™me utilisateur, v√©rifier l'intervalle de 10 minutes (600 secondes)
        if current_time - last_notification >= 600:
            channel_cache[user_id] = current_time
            self.last_channel_notifications[channel_id] = current_time
            return True

        return False

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        """√âcoute les nouveaux messages dans les canaux surveill√©s."""
        if message.author == self.bot.user:
            return

        channel_id = str(message.channel.id)
        if channel_id not in self.monitored_scenes:
            return

        # V√©rifier que le message n'a pas √©t√© remplac√© par un webhook (ex: Tupperbox)
        if message.webhook_id is None:
            await asyncio.sleep(1)
            try:
                await message.channel.fetch_message(message.id)
            except discord.NotFound:
                return

        try:
            scene_data = self.monitored_scenes[channel_id]

            # Mettre √† jour la derni√®re activit√© (TOUJOURS, m√™me pour Ma√Ætre du Jeu)
            user_name = await self.get_user_display_name_async(message)

            scene_data['last_activity_user'] = user_name
            scene_data['last_activity_date'] = message.created_at.astimezone(self.paris_tz).isoformat()

            # Ajouter aux mises √† jour en attente
            self.pending_updates[channel_id] = scene_data
            self.pending_update_counts[channel_id] = self.pending_update_counts.get(channel_id, 0) + 1

            # Rafra√Æchir imm√©diatement si le seuil est atteint
            if self.pending_update_counts[channel_id] >= UPDATE_BATCH_SIZE:
                await self.flush_channel_update(channel_id)
                await self.reorder_surveillance_messages()

            # Notifier le MJ avec syst√®me anti-spam (SAUF si c'est un message de Ma√Ætre du Jeu)
            if not self.is_game_master_message(message):
                gm = self.bot.get_user(int(scene_data['gm_id']))
                if gm and gm.id != message.author.id:
                    # V√©rifier si on doit notifier (anti-spam)
                    if self.should_notify_gm(channel_id, message.author.id):
                        try:
                            embed = discord.Embed(
                                title="üìù Nouvelle activit√©",
                                description=f"Nouveau message dans **{scene_data['scene_name']}**",
                                color=0x2ecc71,
                                timestamp=message.created_at
                            )
                            embed.add_field(name="Auteur", value=user_name, inline=True)
                            embed.add_field(name="Canal", value=message.channel.mention, inline=True)
                            embed.add_field(name="Aper√ßu", value=message.content[:100] + "..." if len(message.content) > 100 else message.content, inline=False)

                            await gm.send(embed=embed)
                        except Exception as e:
                            logging.error(f"Erreur lors de l'envoi de notification au MJ: {e}")

        except Exception as e:
            logging.error(f"Erreur lors du traitement du message: {e}")

async def setup(bot):
    await bot.add_cog(SurveillanceScene(bot))
