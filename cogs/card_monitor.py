"""
Cog de surveillance quotidienne des donn√©es Google Sheets pour les cartes.
Surveille les ajouts/suppressions de cartes et envoie un rapport quotidien.
"""

import discord
from discord.ext import commands, tasks
import os
import json
import logging
import pytz
from datetime import datetime, time as dt_time
from typing import Dict, List, Tuple, Optional, Set
import gspread
from google.oauth2.service_account import Credentials


class CardMonitor(commands.Cog):
    """Surveillance quotidienne des changements dans les donn√©es de cartes."""
    
    def __init__(self, bot):
        self.bot = bot
        self.paris_tz = pytz.timezone('Europe/Paris')
        self.notification_channel_id = 1230946716849799381
        
        # Configuration Google Sheets
        self.setup_google_sheets()
        
        # Stockage des snapshots
        self.snapshot_file = "card_snapshots.json"
        self.last_snapshot = self.load_last_snapshot()
        
        # D√©marrer la t√¢che de surveillance
        self.daily_monitor.start()
        
        logging.info("[CARD_MONITOR] Cog de surveillance des cartes initialis√©")
    
    def setup_google_sheets(self):
        """Configure l'acc√®s √† Google Sheets."""
        try:
            service_account_info = eval(os.getenv('SERVICE_ACCOUNT_JSON'))
            creds = Credentials.from_service_account_info(
                service_account_info,
                scopes=['https://www.googleapis.com/auth/spreadsheets']
            )
            self.gspread_client = gspread.authorize(creds)
            self.spreadsheet = self.gspread_client.open_by_key(os.getenv('GOOGLE_SHEET_ID_CARTES'))
            self.sheet_cards = self.spreadsheet.sheet1
            logging.info("[CARD_MONITOR] Connexion Google Sheets √©tablie")
        except Exception as e:
            logging.error(f"[CARD_MONITOR] Erreur lors de la configuration Google Sheets: {e}")
            self.gspread_client = None
            self.sheet_cards = None
    
    def load_last_snapshot(self) -> Optional[Dict]:
        """Charge le dernier snapshot sauvegard√©."""
        try:
            if os.path.exists(self.snapshot_file):
                with open(self.snapshot_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logging.error(f"[CARD_MONITOR] Erreur lors du chargement du snapshot: {e}")
        return None
    
    def save_snapshot(self, snapshot: Dict):
        """Sauvegarde un snapshot des donn√©es."""
        try:
            with open(self.snapshot_file, 'w', encoding='utf-8') as f:
                json.dump(snapshot, f, ensure_ascii=False, indent=2)
            logging.info("[CARD_MONITOR] Snapshot sauvegard√©")
        except Exception as e:
            logging.error(f"[CARD_MONITOR] Erreur lors de la sauvegarde du snapshot: {e}")
    
    def get_current_data(self) -> Optional[Dict]:
        """R√©cup√®re les donn√©es actuelles du Google Sheet."""
        if not self.sheet_cards:
            return None
        
        try:
            all_rows = self.sheet_cards.get_all_values()
            if not all_rows:
                return None
            
            # Cr√©er un dictionnaire des donn√©es actuelles
            current_data = {
                'timestamp': datetime.now(self.paris_tz).isoformat(),
                'cards': {}
            }
            
            # Parser les donn√©es (ignorer la premi√®re ligne si c'est un header)
            start_row = 1 if all_rows and all_rows[0] and all_rows[0][0].lower() in ['category', 'cat√©gorie'] else 0
            
            for row in all_rows[start_row:]:
                if len(row) < 3 or not row[0] or not row[1]:
                    continue
                
                category, name = row[0].strip(), row[1].strip()
                card_key = f"{category}|{name}"
                
                # Parser les donn√©es utilisateurs
                user_data = {}
                for cell in row[2:]:
                    if not cell or ':' not in cell:
                        continue
                    try:
                        user_id, count = cell.split(':', 1)
                        user_id = user_id.strip()
                        count = int(count.strip())
                        if count > 0:
                            user_data[user_id] = count
                    except (ValueError, IndexError):
                        continue
                
                if user_data:  # Seulement si la carte a des propri√©taires
                    current_data['cards'][card_key] = {
                        'category': category,
                        'name': name,
                        'users': user_data
                    }
            
            return current_data
            
        except Exception as e:
            logging.error(f"[CARD_MONITOR] Erreur lors de la r√©cup√©ration des donn√©es: {e}")
            return None
    
    async def get_user_display_name(self, user_id: str) -> str:
        """R√©cup√®re le nom d'affichage d'un utilisateur √† partir de son ID."""
        try:
            user_id_int = int(user_id)
            
            # Essayer d'abord avec get_user (cache)
            user = self.bot.get_user(user_id_int)
            if user:
                return user.display_name
            
            # Si pas en cache, essayer avec fetch_user (API)
            try:
                user = await self.bot.fetch_user(user_id_int)
                return user.display_name
            except discord.NotFound:
                return f"Utilisateur#{user_id[-4:]}"  # Derniers 4 chiffres
            
        except (ValueError, discord.HTTPException):
            return f"Utilisateur#{user_id[-4:] if len(user_id) >= 4 else user_id}"
    
    @tasks.loop(time=dt_time(hour=0, minute=0, tzinfo=pytz.timezone('Europe/Paris')))
    async def daily_monitor(self):
        """T√¢che quotidienne de surveillance √† minuit (heure de Paris)."""
        logging.info("[CARD_MONITOR] D√©but de la surveillance quotidienne")
        
        channel = self.bot.get_channel(self.notification_channel_id)
        if not channel:
            logging.error(f"[CARD_MONITOR] Canal de notification non trouv√©: {self.notification_channel_id}")
            return
        
        try:
            # R√©cup√©rer les donn√©es actuelles
            current_data = self.get_current_data()
            
            if not current_data:
                # Erreur d'acc√®s √† Google Sheets
                embed = discord.Embed(
                    title="‚ö†Ô∏è Erreur de surveillance des cartes",
                    description="Impossible d'acc√©der aux donn√©es Google Sheets pour la surveillance quotidienne.",
                    color=0xe74c3c,
                    timestamp=datetime.now(self.paris_tz)
                )
                await channel.send(embed=embed)
                return
            
            # Comparer avec le snapshot pr√©c√©dent
            if self.last_snapshot:
                await self.compare_and_report(channel, self.last_snapshot, current_data)
            else:
                # Premier snapshot, juste informer
                embed = discord.Embed(
                    title="üìä Surveillance des cartes initialis√©e",
                    description="Premier snapshot des donn√©es de cartes cr√©√©. La surveillance quotidienne commencera demain.",
                    color=0x3498db,
                    timestamp=datetime.now(self.paris_tz)
                )
                total_cards = len(current_data['cards'])
                embed.add_field(name="Cartes actuelles", value=str(total_cards), inline=True)
                await channel.send(embed=embed)
            
            # Sauvegarder le nouveau snapshot
            self.last_snapshot = current_data
            self.save_snapshot(current_data)
            
        except Exception as e:
            logging.error(f"[CARD_MONITOR] Erreur dans la surveillance quotidienne: {e}")
            embed = discord.Embed(
                title="‚ùå Erreur de surveillance",
                description=f"Une erreur s'est produite lors de la surveillance quotidienne:\n```{str(e)}```",
                color=0xe74c3c,
                timestamp=datetime.now(self.paris_tz)
            )
            await channel.send(embed=embed)
    
    @daily_monitor.before_loop
    async def before_daily_monitor(self):
        """Attendre que le bot soit pr√™t avant de d√©marrer la surveillance."""
        await self.bot.wait_until_ready()
        logging.info("[CARD_MONITOR] Bot pr√™t, surveillance quotidienne programm√©e")

    async def compare_and_report(self, channel: discord.TextChannel, old_data: Dict, new_data: Dict):
        """Compare deux snapshots et g√©n√®re un rapport des changements."""
        old_cards = old_data.get('cards', {})
        new_cards = new_data.get('cards', {})

        # D√©tecter les changements
        added_cards = []
        removed_cards = []
        modified_cards = []

        # Cartes ajout√©es
        for card_key, card_data in new_cards.items():
            if card_key not in old_cards:
                added_cards.append(card_data)

        # Cartes supprim√©es
        for card_key, card_data in old_cards.items():
            if card_key not in new_cards:
                removed_cards.append(card_data)

        # Cartes modifi√©es (changements de quantit√©s)
        for card_key in set(old_cards.keys()) & set(new_cards.keys()):
            old_users = old_cards[card_key]['users']
            new_users = new_cards[card_key]['users']

            if old_users != new_users:
                modified_cards.append({
                    'card': new_cards[card_key],
                    'old_users': old_users,
                    'new_users': new_users
                })

        # G√©n√©rer le rapport
        await self.send_daily_report(channel, added_cards, removed_cards, modified_cards, old_data, new_data)

    async def send_daily_report(self, channel: discord.TextChannel, added_cards: List,
                               removed_cards: List, modified_cards: List, old_data: Dict, new_data: Dict):
        """Envoie le rapport quotidien des changements."""

        # Embed principal avec r√©sum√©
        embed = discord.Embed(
            title="üìä Rapport quotidien - Surveillance des cartes",
            color=0x3498db,
            timestamp=datetime.now(self.paris_tz)
        )

        # Statistiques g√©n√©rales
        old_total = len(old_data.get('cards', {}))
        new_total = len(new_data.get('cards', {}))
        total_change = new_total - old_total

        embed.add_field(
            name="üìà Statistiques",
            value=f"**Total cartes:** {new_total} ({total_change:+d})\n"
                  f"**Cartes ajout√©es:** {len(added_cards)}\n"
                  f"**Cartes supprim√©es:** {len(removed_cards)}\n"
                  f"**Cartes modifi√©es:** {len(modified_cards)}",
            inline=False
        )

        # Si aucun changement
        if not added_cards and not removed_cards and not modified_cards:
            embed.add_field(
                name="‚úÖ Aucun changement",
                value="Aucune modification d√©tect√©e depuis hier.",
                inline=False
            )
            await channel.send(embed=embed)
            return

        await channel.send(embed=embed)

        # D√©tails des cartes ajout√©es
        if added_cards:
            await self.send_added_cards_report(channel, added_cards)

        # D√©tails des cartes supprim√©es
        if removed_cards:
            await self.send_removed_cards_report(channel, removed_cards)

        # D√©tails des cartes modifi√©es
        if modified_cards:
            await self.send_modified_cards_report(channel, modified_cards)

    async def send_added_cards_report(self, channel: discord.TextChannel, added_cards: List):
        """Envoie le rapport des cartes ajout√©es."""
        embed = discord.Embed(
            title="‚ûï Cartes ajout√©es",
            color=0x27ae60,
            timestamp=datetime.now(self.paris_tz)
        )

        # Grouper par cat√©gorie
        by_category = {}
        for card in added_cards:
            category = card['category']
            if category not in by_category:
                by_category[category] = []
            by_category[category].append(card)

        for category, cards in by_category.items():
            card_list = []
            for card in cards:
                name = card['name'].removesuffix('.png')
                owners = []
                for user_id, count in card['users'].items():
                    user_name = await self.get_user_display_name(user_id)
                    if count > 1:
                        owners.append(f"{user_name} (√ó{count})")
                    else:
                        owners.append(user_name)

                owners_text = ", ".join(owners)
                card_list.append(f"**{name}** - {owners_text}")

            # Diviser en chunks si trop long
            card_text = "\n".join(card_list)
            if len(card_text) > 1000:
                # Diviser en plusieurs champs
                chunks = []
                current_chunk = []
                current_length = 0

                for card_line in card_list:
                    if current_length + len(card_line) + 1 > 1000:
                        chunks.append("\n".join(current_chunk))
                        current_chunk = [card_line]
                        current_length = len(card_line)
                    else:
                        current_chunk.append(card_line)
                        current_length += len(card_line) + 1

                if current_chunk:
                    chunks.append("\n".join(current_chunk))

                for i, chunk in enumerate(chunks):
                    field_name = f"{category}" if i == 0 else f"{category} (suite {i+1})"
                    embed.add_field(name=field_name, value=chunk, inline=False)
            else:
                embed.add_field(name=category, value=card_text, inline=False)

        await channel.send(embed=embed)

    async def send_removed_cards_report(self, channel: discord.TextChannel, removed_cards: List):
        """Envoie le rapport des cartes supprim√©es."""
        embed = discord.Embed(
            title="‚ûñ Cartes supprim√©es",
            color=0xe74c3c,
            timestamp=datetime.now(self.paris_tz)
        )

        # Grouper par cat√©gorie
        by_category = {}
        for card in removed_cards:
            category = card['category']
            if category not in by_category:
                by_category[category] = []
            by_category[category].append(card)

        for category, cards in by_category.items():
            card_list = []
            for card in cards:
                name = card['name'].removesuffix('.png')
                owners = []
                for user_id, count in card['users'].items():
                    user_name = await self.get_user_display_name(user_id)
                    if count > 1:
                        owners.append(f"{user_name} (√ó{count})")
                    else:
                        owners.append(user_name)

                owners_text = ", ".join(owners)
                card_list.append(f"**{name}** - {owners_text}")

            card_text = "\n".join(card_list)
            if len(card_text) > 1000:
                # Diviser en chunks si trop long
                chunks = []
                current_chunk = []
                current_length = 0

                for card_line in card_list:
                    if current_length + len(card_line) + 1 > 1000:
                        chunks.append("\n".join(current_chunk))
                        current_chunk = [card_line]
                        current_length = len(card_line)
                    else:
                        current_chunk.append(card_line)
                        current_length += len(card_line) + 1

                if current_chunk:
                    chunks.append("\n".join(current_chunk))

                for i, chunk in enumerate(chunks):
                    field_name = f"{category}" if i == 0 else f"{category} (suite {i+1})"
                    embed.add_field(name=field_name, value=chunk, inline=False)
            else:
                embed.add_field(name=category, value=card_text, inline=False)

        await channel.send(embed=embed)

    async def send_modified_cards_report(self, channel: discord.TextChannel, modified_cards: List):
        """Envoie le rapport des cartes modifi√©es."""
        embed = discord.Embed(
            title="üîÑ Cartes modifi√©es",
            color=0xf39c12,
            timestamp=datetime.now(self.paris_tz)
        )

        # Grouper par cat√©gorie
        by_category = {}
        for card_data in modified_cards:
            category = card_data['card']['category']
            if category not in by_category:
                by_category[category] = []
            by_category[category].append(card_data)

        for category, cards in by_category.items():
            card_list = []
            for card_data in cards:
                card = card_data['card']
                old_users = card_data['old_users']
                new_users = card_data['new_users']

                name = card['name'].removesuffix('.png')

                # Analyser les changements
                changes = []
                all_users = set(old_users.keys()) | set(new_users.keys())

                for user_id in all_users:
                    old_count = old_users.get(user_id, 0)
                    new_count = new_users.get(user_id, 0)

                    if old_count != new_count:
                        user_name = await self.get_user_display_name(user_id)
                        if old_count == 0:
                            changes.append(f"{user_name}: +{new_count}")
                        elif new_count == 0:
                            changes.append(f"{user_name}: -{old_count}")
                        else:
                            diff = new_count - old_count
                            changes.append(f"{user_name}: {diff:+d} ({old_count}‚Üí{new_count})")

                changes_text = ", ".join(changes)
                card_list.append(f"**{name}** - {changes_text}")

            card_text = "\n".join(card_list)
            if len(card_text) > 1000:
                # Diviser en chunks si trop long
                chunks = []
                current_chunk = []
                current_length = 0

                for card_line in card_list:
                    if current_length + len(card_line) + 1 > 1000:
                        chunks.append("\n".join(current_chunk))
                        current_chunk = [card_line]
                        current_length = len(card_line)
                    else:
                        current_chunk.append(card_line)
                        current_length += len(card_line) + 1

                if current_chunk:
                    chunks.append("\n".join(current_chunk))

                for i, chunk in enumerate(chunks):
                    field_name = f"{category}" if i == 0 else f"{category} (suite {i+1})"
                    embed.add_field(name=field_name, value=chunk, inline=False)
            else:
                embed.add_field(name=category, value=card_text, inline=False)

        await channel.send(embed=embed)

    # ========== COMMANDES DE GESTION ==========

    @commands.command(name="monitor_status", help="Affiche le statut de la surveillance des cartes")
    @commands.has_permissions(administrator=True)
    async def monitor_status(self, ctx):
        """Affiche le statut actuel de la surveillance."""
        embed = discord.Embed(
            title="üìä Statut de la surveillance des cartes",
            color=0x3498db,
            timestamp=datetime.now(self.paris_tz)
        )

        # Statut de la t√¢che
        if self.daily_monitor.is_running():
            embed.add_field(
                name="üü¢ Surveillance active",
                value="La surveillance quotidienne est en cours d'ex√©cution.",
                inline=False
            )
        else:
            embed.add_field(
                name="üî¥ Surveillance inactive",
                value="La surveillance quotidienne n'est pas active.",
                inline=False
            )

        # Prochaine ex√©cution
        if self.daily_monitor.next_iteration:
            next_run = self.daily_monitor.next_iteration.astimezone(self.paris_tz)
            embed.add_field(
                name="‚è∞ Prochaine surveillance",
                value=next_run.strftime("%d/%m/%Y √† %H:%M (heure de Paris)"),
                inline=True
            )

        # Dernier snapshot
        if self.last_snapshot:
            last_time = datetime.fromisoformat(self.last_snapshot['timestamp'])
            embed.add_field(
                name="üì∏ Dernier snapshot",
                value=last_time.strftime("%d/%m/%Y √† %H:%M"),
                inline=True
            )
            embed.add_field(
                name="üìã Cartes surveill√©es",
                value=str(len(self.last_snapshot.get('cards', {}))),
                inline=True
            )
        else:
            embed.add_field(
                name="üì∏ Dernier snapshot",
                value="Aucun snapshot disponible",
                inline=False
            )

        # Statut Google Sheets
        if self.sheet_cards:
            embed.add_field(
                name="üü¢ Google Sheets",
                value="Connexion √©tablie",
                inline=True
            )
        else:
            embed.add_field(
                name="üî¥ Google Sheets",
                value="Connexion √©chou√©e",
                inline=True
            )

        await ctx.send(embed=embed)

    @commands.command(name="monitor_test", help="Teste la surveillance manuellement")
    @commands.has_permissions(administrator=True)
    async def monitor_test(self, ctx):
        """Effectue un test manuel de la surveillance."""
        await ctx.send("üîç Test de surveillance en cours...")

        try:
            # Simuler la surveillance quotidienne
            channel = self.bot.get_channel(self.notification_channel_id)
            if not channel:
                await ctx.send(f"‚ùå Canal de notification non trouv√©: {self.notification_channel_id}")
                return

            current_data = self.get_current_data()
            if not current_data:
                await ctx.send("‚ùå Impossible de r√©cup√©rer les donn√©es Google Sheets")
                return

            if self.last_snapshot:
                await self.compare_and_report(channel, self.last_snapshot, current_data)
                await ctx.send("‚úÖ Test termin√© - rapport envoy√© dans le canal de surveillance")
            else:
                await ctx.send("‚ö†Ô∏è Aucun snapshot pr√©c√©dent disponible pour comparaison")

        except Exception as e:
            await ctx.send(f"‚ùå Erreur lors du test: {str(e)}")
            logging.error(f"[CARD_MONITOR] Erreur lors du test manuel: {e}")

    @commands.command(name="monitor_snapshot", help="Force la cr√©ation d'un nouveau snapshot")
    @commands.has_permissions(administrator=True)
    async def monitor_snapshot(self, ctx):
        """Force la cr√©ation d'un nouveau snapshot."""
        await ctx.send("üì∏ Cr√©ation d'un nouveau snapshot...")

        try:
            current_data = self.get_current_data()
            if not current_data:
                await ctx.send("‚ùå Impossible de r√©cup√©rer les donn√©es Google Sheets")
                return

            self.last_snapshot = current_data
            self.save_snapshot(current_data)

            total_cards = len(current_data['cards'])
            await ctx.send(f"‚úÖ Nouveau snapshot cr√©√© avec {total_cards} cartes")

        except Exception as e:
            await ctx.send(f"‚ùå Erreur lors de la cr√©ation du snapshot: {str(e)}")
            logging.error(f"[CARD_MONITOR] Erreur lors de la cr√©ation manuelle du snapshot: {e}")

    def cog_unload(self):
        """Nettoie les ressources lors du d√©chargement du cog."""
        self.daily_monitor.cancel()
        logging.info("[CARD_MONITOR] Cog de surveillance des cartes d√©charg√©")


async def setup(bot):
    """Fonction de setup pour charger le cog."""
    await bot.add_cog(CardMonitor(bot))
