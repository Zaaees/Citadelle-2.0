"""
Gestion du forum des cartes.
G√®re la cr√©ation de threads, le posting des cartes d√©couvertes, etc.
"""

import asyncio
import logging
import discord
from typing import Dict, Optional, List, Tuple

from .config import CARD_FORUM_CHANNEL_ID, ALL_CATEGORIES
from .discovery import DiscoveryManager


class ForumManager:
    """Gestionnaire du forum des cartes."""
    
    def __init__(self, bot, discovery_manager: DiscoveryManager):
        self.bot = bot
        self.discovery_manager = discovery_manager
        self.category_threads = {}  # Cache for category thread IDs
        self.thread_cache_time = 0
    
    def get_all_card_categories(self) -> List[str]:
        """Retourne la liste compl√®te des cat√©gories de cartes, incluant 'Full'."""
        categories = ALL_CATEGORIES.copy()
        categories.append("Full")  # Ajouter la cat√©gorie Full
        return categories
    
    async def get_or_create_category_thread(self, forum_channel: discord.ForumChannel, 
                                          category: str) -> Optional[discord.Thread]:
        """
        R√©cup√®re ou cr√©e un thread pour une cat√©gorie donn√©e.
        
        Args:
            forum_channel: Canal forum Discord
            category: Nom de la cat√©gorie
        
        Returns:
            discord.Thread: Thread de la cat√©gorie ou None si erreur
        """
        try:
            # V√©rifier le cache
            if category in self.category_threads:
                thread_id = self.category_threads[category]
                try:
                    thread = await forum_channel.fetch_thread(thread_id)
                    if thread and not thread.archived:
                        return thread
                except discord.NotFound:
                    # Thread supprim√©, retirer du cache
                    del self.category_threads[category]
            
            # Chercher le thread existant
            async for thread in forum_channel.archived_threads(limit=None):
                if thread.name == category:
                    self.category_threads[category] = thread.id
                    if thread.archived:
                        await thread.edit(archived=False)
                    return thread
            
            # Cr√©er un nouveau thread
            stats = self.discovery_manager.get_discovery_stats()
            initial_message = self._create_category_initial_message(category, stats)
            
            thread = await forum_channel.create_thread(
                name=category,
                content=initial_message
            )
            
            self.category_threads[category] = thread.id
            logging.info(f"[FORUM] Thread cr√©√© pour la cat√©gorie: {category}")
            return thread
            
        except Exception as e:
            logging.error(f"[FORUM] Erreur lors de la cr√©ation/r√©cup√©ration du thread {category}: {e}")
            return None
    
    def _create_category_initial_message(self, category: str, stats: dict) -> str:
        """
        Cr√©e le message initial d'un thread de cat√©gorie.
        
        Args:
            category: Nom de la cat√©gorie
            stats: Statistiques de d√©couverte
        
        Returns:
            str: Message initial format√©
        """
        # Message de base
        message = f"üé¥ **Cartes de la cat√©gorie {category}**\n\n"
        message += "Ce thread contient toutes les cartes d√©couvertes de cette cat√©gorie, "
        message += "dans l'ordre chronologique de leur d√©couverte.\n\n"
        
        # Ajouter les statistiques si disponibles
        if stats and any(stats.values()):
            message += "üìä **Progression globale:**\n"
            message += f"‚Ä¢ Total (avec Full): {stats.get('discovered_all', 0)}/{stats.get('total_all', 0)}\n"
            message += f"‚Ä¢ Total (sans Full): {stats.get('discovered_no_full', 0)}/{stats.get('total_no_full', 0)}\n\n"
        
        message += "---\n"
        return message
    
    async def post_card_to_forum(self, category: str, name: str, file_bytes: bytes,
                               discoverer_name: str, discovery_index: int) -> bool:
        """
        Poste une carte dans le forum.
        
        Args:
            category: Cat√©gorie de la carte
            name: Nom de la carte
            file_bytes: Donn√©es de l'image
            discoverer_name: Nom du d√©couvreur
            discovery_index: Index de d√©couverte
        
        Returns:
            bool: True si le post a r√©ussi
        """
        try:
            forum_channel = self.bot.get_channel(CARD_FORUM_CHANNEL_ID)
            if not isinstance(forum_channel, discord.ForumChannel):
                logging.error(f"[FORUM] Canal {CARD_FORUM_CHANNEL_ID} n'est pas un ForumChannel")
                return False
            
            # Obtenir ou cr√©er le thread de cat√©gorie
            thread = await self.get_or_create_category_thread(forum_channel, category)
            if not thread:
                return False
            
            # Cr√©er le message de d√©couverte
            display_name = name.removesuffix('.png')
            message = f"**{display_name}** (#{discovery_index})\n"
            message += f"D√©couvert par: {discoverer_name}"
            
            # Cr√©er le fichier Discord
            file = discord.File(
                fp=discord.utils._BytesIOProxy(file_bytes),
                filename=f"{name}.png" if not name.endswith('.png') else name
            )
            
            # Poster dans le thread
            await thread.send(content=message, file=file)
            logging.info(f"[FORUM] Carte post√©e: {name} ({category}) par {discoverer_name}")
            return True
            
        except Exception as e:
            logging.error(f"[FORUM] Erreur lors du post de la carte {name}: {e}")
            return False
    
    async def initialize_forum_structure(self) -> Tuple[List[str], List[str]]:
        """
        Initialise la structure du forum avec tous les threads de cat√©gories.
        
        Returns:
            Tuple[List[str], List[str]]: (threads_cr√©√©s, threads_existants)
        """
        try:
            forum_channel = self.bot.get_channel(CARD_FORUM_CHANNEL_ID)
            if not isinstance(forum_channel, discord.ForumChannel):
                raise ValueError(f"Canal {CARD_FORUM_CHANNEL_ID} n'est pas un ForumChannel")
            
            categories = self.get_all_card_categories()
            created_threads = []
            existing_threads = []
            
            for category in categories:
                # V√©rifier si le thread existe d√©j√†
                thread_exists = False
                async for thread in forum_channel.archived_threads(limit=None):
                    if thread.name == category:
                        existing_threads.append(category)
                        self.category_threads[category] = thread.id
                        thread_exists = True
                        break
                
                if not thread_exists:
                    # Cr√©er le thread
                    thread = await self.get_or_create_category_thread(forum_channel, category)
                    if thread:
                        created_threads.append(category)
                    
                    # Petite pause pour √©viter le rate limiting
                    await asyncio.sleep(0.5)
            
            return created_threads, existing_threads
            
        except Exception as e:
            logging.error(f"[FORUM] Erreur lors de l'initialisation du forum: {e}")
            return [], []
    
    async def populate_forum_threads(self, all_files: Dict[str, List[Dict]]) -> Tuple[int, int]:
        """
        Peuple les threads du forum avec toutes les cartes d√©couvertes.
        
        Args:
            all_files: Dictionnaire des fichiers par cat√©gorie
        
        Returns:
            Tuple[int, int]: (cartes_post√©es, erreurs)
        """
        try:
            # R√©cup√©rer toutes les d√©couvertes tri√©es par index chronologique
            discoveries_cache = self.discovery_manager.storage.get_discoveries_cache()
            
            if not discoveries_cache or len(discoveries_cache) <= 1:
                return 0, 0
            
            # Trier par index de d√©couverte (chronologique)
            discovery_rows = discoveries_cache[1:]  # Skip header
            discovery_rows.sort(key=lambda row: int(row[5]) if len(row) >= 6 and row[5].isdigit() else 0)
            
            posted_count = 0
            error_count = 0
            
            for row in discovery_rows:
                if len(row) < 6:
                    continue
                
                cat, name, discoverer_id_str, discoverer_name, timestamp, discovery_index = row
                discovery_index = int(discovery_index)
                
                # Trouver le fichier de la carte
                file_id = next(
                    (f['id'] for f in all_files.get(cat, []) if f['name'].removesuffix(".png") == name),
                    None
                )
                if not file_id:
                    error_count += 1
                    continue
                
                # T√©l√©charger l'image et poster dans le forum
                try:
                    # Note: Cette m√©thode n√©cessitera l'acc√®s au service Google Drive
                    # qui sera fourni lors de l'int√©gration compl√®te
                    file_bytes = b''  # Placeholder
                    success = await self.post_card_to_forum(
                        cat, name, file_bytes, discoverer_name, discovery_index
                    )
                    
                    if success:
                        posted_count += 1
                    else:
                        error_count += 1
                    
                    # Petite pause pour √©viter le rate limiting
                    await asyncio.sleep(0.5)
                    
                except Exception as e:
                    logging.error(f"[FORUM] Erreur lors du post de {name}: {e}")
                    error_count += 1
            
            return posted_count, error_count
            
        except Exception as e:
            logging.error(f"[FORUM] Erreur lors de la population du forum: {e}")
            return 0, 0
