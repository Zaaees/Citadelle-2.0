"""
Vues pour les √©changes de cartes.
"""

import discord
import logging
from typing import TYPE_CHECKING, List, Tuple

if TYPE_CHECKING:
    from ...Cards import Cards


class TradeMenuView(discord.ui.View):
    """Menu principal des √©changes."""
    
    def __init__(self, cog: "Cards", user: discord.User):
        super().__init__(timeout=120)
        self.cog = cog
        self.user = user
    
    @discord.ui.button(label="D√©poser une carte", style=discord.ButtonStyle.primary)
    async def deposit_card(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Bouton pour d√©poser une carte dans le vault."""
        if interaction.user.id != self.user.id:
            await interaction.response.send_message("Vous ne pouvez pas utiliser ce bouton.", ephemeral=True)
            return
        
        # Importer ici pour √©viter les imports circulaires
        from .modal_views import DepositCardModal
        
        modal = DepositCardModal(self.cog, self.user)
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="Retirer mes cartes", style=discord.ButtonStyle.secondary)
    async def withdraw_cards(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Bouton pour retirer toutes les cartes du vault."""
        if interaction.user.id != self.user.id:
            await interaction.response.send_message("Vous ne pouvez pas utiliser ce bouton.", ephemeral=True)
            return
        
        await interaction.response.defer(ephemeral=True)
        
        try:
            # R√©cup√©rer les cartes uniques du vault
            unique_vault_cards = self.cog.vault_manager.get_unique_vault_cards(self.user.id)
            
            if not unique_vault_cards:
                await interaction.followup.send(
                    "‚ùå Vous n'avez aucune carte dans le vault.",
                    ephemeral=True
                )
                return
            
            # Cr√©er la vue de confirmation
            confirmation_view = WithdrawVaultConfirmationView(self.cog, self.user, unique_vault_cards)
            
            # Cr√©er l'embed
            embed = discord.Embed(
                title="üì§ Retirer les cartes du vault",
                description=f"Vous avez **{len(unique_vault_cards)}** cartes uniques dans le vault.",
                color=0xf39c12
            )
            
            # Afficher quelques cartes en exemple
            if len(unique_vault_cards) <= 10:
                card_list = "\n".join([
                    f"‚Ä¢ **{name.removesuffix('.png')}** ({cat})"
                    for cat, name in unique_vault_cards
                ])
            else:
                card_list = "\n".join([
                    f"‚Ä¢ **{name.removesuffix('.png')}** ({cat})"
                    for cat, name in unique_vault_cards[:10]
                ])
                card_list += f"\n... et {len(unique_vault_cards) - 10} autres"
            
            embed.add_field(
                name="Cartes dans le vault",
                value=card_list,
                inline=False
            )
            
            await interaction.followup.send(embed=embed, view=confirmation_view, ephemeral=True)
            
        except Exception as e:
            logging.error(f"[TRADE] Erreur lors du retrait: {e}")
            await interaction.followup.send(
                "‚ùå Une erreur est survenue lors du retrait.",
                ephemeral=True
            )
    
    @discord.ui.button(label="Initier un √©change", style=discord.ButtonStyle.success)
    async def initiate_trade(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Bouton pour initier un √©change avec un autre utilisateur."""
        if interaction.user.id != self.user.id:
            await interaction.response.send_message("Vous ne pouvez pas utiliser ce bouton.", ephemeral=True)
            return
        
        # Importer ici pour √©viter les imports circulaires
        from .modal_views import InitiateTradeModal
        
        modal = InitiateTradeModal(self.cog, self.user)
        await interaction.response.send_modal(modal)


class WithdrawVaultConfirmationView(discord.ui.View):
    """Vue de confirmation pour retirer les cartes du vault."""
    
    def __init__(self, cog: "Cards", user: discord.User, unique_vault_cards: List[Tuple[str, str]]):
        super().__init__(timeout=120)
        self.cog = cog
        self.user = user
        self.unique_vault_cards = unique_vault_cards
    
    @discord.ui.button(label="Confirmer le retrait", style=discord.ButtonStyle.danger)
    async def confirm_withdraw(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Confirme le retrait de toutes les cartes du vault."""
        if interaction.user.id != self.user.id:
            await interaction.response.send_message("Vous ne pouvez pas utiliser ce bouton.", ephemeral=True)
            return
        
        await interaction.response.defer(ephemeral=True)
        
        try:
            # R√©cup√©rer toutes les cartes du vault (avec doublons)
            vault_cards = self.cog.vault_manager.get_user_vault_cards(self.user.id)
            
            if not vault_cards:
                await interaction.followup.send(
                    "‚ùå Votre vault est d√©j√† vide.",
                    ephemeral=True
                )
                return
            
            # Transf√©rer toutes les cartes vers l'inventaire
            success_count = 0
            for cat, name in vault_cards:
                if self.cog.add_card_to_user(self.user.id, cat, name):
                    if self.cog.vault_manager.remove_card_from_vault(self.user.id, cat, name):
                        success_count += 1
                    else:
                        # Rollback si √©chec du retrait du vault
                        self.cog.remove_card_from_user(self.user.id, cat, name)
            
            if success_count == len(vault_cards):
                embed = discord.Embed(
                    title="‚úÖ Retrait r√©ussi",
                    description=f"**{success_count}** cartes ont √©t√© transf√©r√©es de votre vault vers votre inventaire.",
                    color=0x27ae60
                )
            else:
                embed = discord.Embed(
                    title="‚ö†Ô∏è Retrait partiel",
                    description=f"**{success_count}/{len(vault_cards)}** cartes ont √©t√© transf√©r√©es.",
                    color=0xf39c12
                )
            
            # D√©sactiver tous les boutons
            for child in self.children:
                child.disabled = True
            
            await interaction.followup.send(embed=embed, ephemeral=True)
            
        except Exception as e:
            logging.error(f"[VAULT] Erreur lors du retrait: {e}")
            await interaction.followup.send(
                "‚ùå Une erreur est survenue lors du retrait.",
                ephemeral=True
            )
    
    @discord.ui.button(label="Annuler", style=discord.ButtonStyle.secondary)
    async def cancel_withdraw(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Annule le retrait."""
        if interaction.user.id != self.user.id:
            await interaction.response.send_message("Vous ne pouvez pas utiliser ce bouton.", ephemeral=True)
            return
        
        # D√©sactiver tous les boutons
        for child in self.children:
            child.disabled = True
        
        await interaction.response.edit_message(
            content="‚ùå Retrait annul√©.",
            embed=None,
            view=self
        )


class TradeRequestView(discord.ui.View):
    """Vue pour accepter ou refuser une demande d'√©change."""
    
    def __init__(self, cog: "Cards", initiator: discord.User, target: discord.User):
        super().__init__(timeout=300)  # 5 minutes
        self.cog = cog
        self.initiator = initiator
        self.target = target
    
    @discord.ui.button(label="Accepter l'√©change", style=discord.ButtonStyle.success)
    async def accept_trade(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Accepte la demande d'√©change."""
        if interaction.user.id != self.target.id:
            await interaction.response.send_message(
                "Seul le destinataire peut accepter cet √©change.",
                ephemeral=True
            )
            return
        
        await interaction.response.defer(ephemeral=True)
        
        try:
            # V√©rifier que les deux utilisateurs ont des cartes dans leur vault
            initiator_vault = self.cog.vault_manager.get_user_vault_cards(self.initiator.id)
            target_vault = self.cog.vault_manager.get_user_vault_cards(self.target.id)
            
            if not initiator_vault:
                await interaction.followup.send(
                    f"‚ùå {self.initiator.display_name} n'a aucune carte dans son vault.",
                    ephemeral=True
                )
                return
            
            if not target_vault:
                await interaction.followup.send(
                    "‚ùå Vous n'avez aucune carte dans votre vault.",
                    ephemeral=True
                )
                return
            
            # Cr√©er la vue de confirmation finale
            confirmation_view = FullVaultTradeConfirmationView(self.cog, self.initiator, self.target)
            
            # Cr√©er l'embed de confirmation
            embed = discord.Embed(
                title="üîÑ Confirmation d'√©change de vault",
                description="√âchange complet des vaults entre :",
                color=0x3498db
            )
            
            embed.add_field(
                name=f"üì¶ Vault de {self.initiator.display_name}",
                value=f"{len(set(initiator_vault))} cartes uniques\n({len(initiator_vault)} total)",
                inline=True
            )
            
            embed.add_field(
                name=f"üì¶ Vault de {self.target.display_name}",
                value=f"{len(set(target_vault))} cartes uniques\n({len(target_vault)} total)",
                inline=True
            )
            
            embed.add_field(
                name="‚ö†Ô∏è Attention",
                value="Cet √©change est **irr√©versible** ! Tous les contenus des vaults seront √©chang√©s.",
                inline=False
            )
            
            # D√©sactiver tous les boutons de cette vue
            for child in self.children:
                child.disabled = True
            
            await interaction.followup.send(embed=embed, view=confirmation_view, ephemeral=True)
            
        except Exception as e:
            logging.error(f"[TRADE] Erreur lors de l'acceptation: {e}")
            await interaction.followup.send(
                "‚ùå Une erreur est survenue lors de l'acceptation.",
                ephemeral=True
            )
    
    @discord.ui.button(label="Refuser l'√©change", style=discord.ButtonStyle.danger)
    async def refuse_trade(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Refuse la demande d'√©change."""
        if interaction.user.id != self.target.id:
            await interaction.response.send_message(
                "Seul le destinataire peut refuser cet √©change.",
                ephemeral=True
            )
            return
        
        # D√©sactiver tous les boutons
        for child in self.children:
            child.disabled = True
        
        await interaction.response.edit_message(
            content=f"‚ùå {self.target.display_name} a refus√© l'√©change.",
            embed=None,
            view=self
        )


class FullVaultTradeConfirmationView(discord.ui.View):
    """Vue de confirmation finale pour l'√©change complet de vault."""
    
    def __init__(self, cog: "Cards", initiator: discord.User, target: discord.User):
        super().__init__(timeout=300)
        self.cog = cog
        self.initiator = initiator
        self.target = target
        self.trade_executed = False
    
    @discord.ui.button(label="Confirmer l'√©change", style=discord.ButtonStyle.success)
    async def confirm_trade(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Confirme et ex√©cute l'√©change de vault."""
        # V√©rifier que l'utilisateur est l'un des participants
        if interaction.user.id not in [self.initiator.id, self.target.id]:
            await interaction.response.send_message(
                "Seuls les participants peuvent confirmer cet √©change.",
                ephemeral=True
            )
            return
        
        # √âviter les doubles ex√©cutions
        if self.trade_executed:
            await interaction.response.send_message(
                "Cet √©change a d√©j√† √©t√© trait√©.",
                ephemeral=True
            )
            return
        
        await interaction.response.send_message(
            "üîÑ √âchange en cours de traitement...",
            ephemeral=True
        )
        
        # Marquer comme en cours de traitement APR√àS avoir r√©pondu
        self.trade_executed = True
        
        # D√©sactiver tous les boutons IMM√âDIATEMENT
        for child in self.children:
            child.disabled = True
        
        # Ex√©cuter l'√©change complet des vaults
        success = await self.execute_full_vault_trade(interaction)
        
        # Mettre √† jour le message de statut selon le r√©sultat
        if success:
            await interaction.edit_original_response(content="‚úÖ √âchange termin√© avec succ√®s !")
        else:
            await interaction.edit_original_response(content="‚ùå √âchec de l'√©change.")
            # R√©activer les boutons en cas d'√©chec pour permettre une nouvelle tentative
            self.trade_executed = False
            for child in self.children:
                child.disabled = False
    
    async def execute_full_vault_trade(self, interaction: discord.Interaction) -> bool:
        """Ex√©cute l'√©change complet des vaults."""
        try:
            success = self.cog.trading_manager.execute_full_vault_trade(
                self.initiator.id, self.target.id
            )
            
            if success:
                logging.info(f"[TRADE] √âchange de vault r√©ussi entre {self.initiator.id} et {self.target.id}")
            else:
                logging.error(f"[TRADE] √âchec de l'√©change de vault entre {self.initiator.id} et {self.target.id}")
            
            return success
            
        except Exception as e:
            logging.error(f"[TRADE] Erreur lors de l'ex√©cution de l'√©change: {e}")
            return False
    
    @discord.ui.button(label="Annuler", style=discord.ButtonStyle.secondary)
    async def cancel_trade(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Annule l'√©change."""
        if interaction.user.id not in [self.initiator.id, self.target.id]:
            await interaction.response.send_message(
                "Seuls les participants peuvent annuler cet √©change.",
                ephemeral=True
            )
            return
        
        # D√©sactiver tous les boutons
        for child in self.children:
            child.disabled = True
        
        await interaction.response.edit_message(
            content="‚ùå √âchange annul√©.",
            embed=None,
            view=self
        )
