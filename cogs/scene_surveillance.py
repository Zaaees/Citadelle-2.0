"""
Syst√®me de surveillance automatique pour les sc√®nes de jeu de r√¥le Discord.
Permet aux ma√Ætres de jeu (MJ) de suivre l'activit√© des joueurs et recevoir des notifications.
"""

import discord
from discord.ext import commands, tasks
from discord import app_commands
from datetime import datetime, timedelta
import pytz
import os
import asyncio
import gspread
from google.oauth2 import service_account
import logging
import json
from typing import Dict, List, Optional, Set, Tuple, Union
import re

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SceneSurveillanceView(discord.ui.View):
    """Vue avec boutons interactifs pour la surveillance des sc√®nes."""
    
    def __init__(self, cog, scene_data: dict):
        super().__init__(timeout=None)
        self.cog = cog
        self.scene_data = scene_data

    @discord.ui.button(label="üü¢ Reprendre la sc√®ne", style=discord.ButtonStyle.green, custom_id="take_over_scene")
    async def take_over_scene(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Permet √† un autre MJ de reprendre la responsabilit√© d'une sc√®ne."""
        await interaction.response.defer(ephemeral=True)
        
        if not self.cog.has_mj_permission(interaction.user):
            await interaction.followup.send("‚ùå Seuls les MJ peuvent utiliser cette fonction.", ephemeral=True)
            return
            
        channel_id = str(self.scene_data['channel_id'])
        old_mj_id = self.scene_data['mj_id']
        new_mj_id = interaction.user.id
        
        if old_mj_id == new_mj_id:
            await interaction.followup.send("‚ùå Vous √™tes d√©j√† le MJ responsable de cette sc√®ne.", ephemeral=True)
            return
            
        try:
            # Mettre √† jour dans Google Sheets
            await self.cog.update_scene_mj(channel_id, new_mj_id)
            
            # Mettre √† jour les donn√©es locales
            self.scene_data['mj_id'] = new_mj_id
            self.cog.active_scenes[channel_id]['mj_id'] = new_mj_id
            
            # Mettre √† jour le message
            embed = await self.cog.create_scene_embed(channel_id)
            await interaction.edit_original_response(embed=embed, view=self)
            
            # Notification √† l'ancien et nouveau MJ
            old_mj = self.cog.bot.get_user(old_mj_id)
            if old_mj:
                try:
                    await old_mj.send(f"üìã **Transfert de sc√®ne**\n"
                                    f"{interaction.user.mention} a repris la responsabilit√© de la sc√®ne dans <#{channel_id}>")
                except:
                    pass
                    
            await interaction.followup.send(f"‚úÖ Vous √™tes maintenant responsable de la sc√®ne dans <#{channel_id}>", ephemeral=True)
            
        except Exception as e:
            logger.error(f"Erreur lors du transfert de sc√®ne: {e}")
            await interaction.followup.send("‚ùå Erreur lors du transfert de la sc√®ne.", ephemeral=True)

    @discord.ui.button(label="üî¥ Cl√¥turer la sc√®ne", style=discord.ButtonStyle.red, custom_id="close_scene")
    async def close_scene(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Cl√¥ture une sc√®ne surveill√©e."""
        await interaction.response.defer(ephemeral=True)
        
        if not self.cog.has_mj_permission(interaction.user):
            await interaction.followup.send("‚ùå Seuls les MJ peuvent utiliser cette fonction.", ephemeral=True)
            return
            
        channel_id = str(self.scene_data['channel_id'])
        
        try:
            # Supprimer la surveillance
            await self.cog.stop_scene_surveillance(channel_id)
            
            # Mettre √† jour le message pour indiquer que la sc√®ne est ferm√©e
            embed = discord.Embed(
                title="üî¥ Sc√®ne Cl√¥tur√©e",
                description=f"La surveillance de <#{channel_id}> a √©t√© arr√™t√©e.",
                color=discord.Color.red(),
                timestamp=datetime.now()
            )
            embed.add_field(name="Cl√¥tur√©e par", value=interaction.user.mention, inline=True)
            
            # D√©sactiver les boutons
            for item in self.children:
                item.disabled = True
                
            await interaction.edit_original_response(embed=embed, view=self)
            await interaction.followup.send("‚úÖ Sc√®ne cl√¥tur√©e avec succ√®s.", ephemeral=True)
            
        except Exception as e:
            logger.error(f"Erreur lors de la cl√¥ture de sc√®ne: {e}")
            await interaction.followup.send("‚ùå Erreur lors de la cl√¥ture de la sc√®ne.", ephemeral=True)


class SceneSurveillance(commands.Cog):
    """Syst√®me de surveillance automatique pour les sc√®nes de jeu de r√¥le."""
    
    def __init__(self, bot):
        self.bot = bot
        self.paris_tz = pytz.timezone('Europe/Paris')
        self.active_scenes: Dict[str, dict] = {}  # channel_id -> scene_data
        self.webhook_users: Dict[str, int] = {}  # webhook_name -> real_user_id
        self.mj_role_id = 1018179623886000278  # ID du r√¥le MJ (√† adapter)
        
        # Configuration Google Sheets
        try:
            self.credentials = service_account.Credentials.from_service_account_info(
                eval(os.getenv('SERVICE_ACCOUNT_JSON')),
                scopes=['https://www.googleapis.com/auth/spreadsheets']
            )
            self.gc = gspread.authorize(self.credentials)
            
            # Ouvrir la feuille de calcul
            spreadsheet_id = os.getenv('GOOGLE_SHEET_ID_SURVEILLANCE', os.getenv('GOOGLE_SHEET_ID_ACTIVITE'))
            spreadsheet = self.gc.open_by_key(spreadsheet_id)
            
            # Essayer d'acc√©der √† la feuille SceneSurveillance, la cr√©er si elle n'existe pas
            try:
                self.sheet = spreadsheet.worksheet('SceneSurveillance')
                logger.info("Feuille SceneSurveillance trouv√©e")
            except gspread.WorksheetNotFound:
                logger.info("Cr√©ation de la feuille SceneSurveillance...")
                self.sheet = spreadsheet.add_worksheet('SceneSurveillance', rows=1000, cols=10)
                
                # Ajouter les en-t√™tes
                headers = [
                    'channel_id', 'mj_id', 'status_message_id', 'status_channel_id',
                    'created_at', 'last_activity', 'participants', 'last_author_id', 'status'
                ]
                self.sheet.insert_row(headers, 1)
                
                # Formater les en-t√™tes
                self.sheet.format('A1:I1', {
                    'backgroundColor': {'red': 0.2, 'green': 0.6, 'blue': 0.9},
                    'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}},
                    'horizontalAlignment': 'CENTER'
                })
                
                logger.info("‚úÖ Feuille SceneSurveillance cr√©√©e et configur√©e")
                
        except Exception as e:
            logger.error(f"Erreur initialisation Google Sheets: {e}")
            self.sheet = None
            
        # D√©marrer les t√¢ches de surveillance
        self.activity_monitor.start()
        self.inactivity_checker.start()

    def cog_unload(self):
        """Nettoie les ressources lors du d√©chargement du cog."""
        try:
            if self.activity_monitor.is_running():
                self.activity_monitor.cancel()
            if self.inactivity_checker.is_running():
                self.inactivity_checker.cancel()
        except Exception as e:
            logger.error(f"Erreur lors de l'arr√™t des t√¢ches: {e}")

    def has_mj_permission(self, user: discord.Member) -> bool:
        """V√©rifie si un utilisateur a le r√¥le MJ."""
        return any(role.id == self.mj_role_id for role in user.roles)

    async def load_active_scenes(self):
        """Charge les sc√®nes actives depuis Google Sheets."""
        if not self.sheet:
            logger.warning("Aucune feuille Google Sheets disponible pour charger les sc√®nes")
            return
            
        try:
            records = self.sheet.get_all_records()
            scenes_loaded = 0
            for record in records:
                if record.get('status') == 'active' and record.get('channel_id'):
                    try:
                        channel_id = str(record['channel_id'])
                        self.active_scenes[channel_id] = {
                            'channel_id': int(channel_id),
                            'mj_id': int(record.get('mj_id', 0)),
                            'status_message_id': int(record.get('status_message_id', 0)),
                            'status_channel_id': int(record.get('status_channel_id', 0)),
                            'created_at': record.get('created_at', ''),
                            'last_activity': record.get('last_activity', ''),
                            'participants': json.loads(record.get('participants', '[]')),
                            'last_author_id': int(record.get('last_author_id', 0)),
                            'status': record.get('status', 'active')
                        }
                        scenes_loaded += 1
                    except (ValueError, json.JSONDecodeError) as e:
                        logger.warning(f"Erreur parsing sc√®ne {record.get('channel_id')}: {e}")
                        continue
            logger.info(f"‚úÖ {scenes_loaded} sc√®nes actives charg√©es depuis Google Sheets")
        except Exception as e:
            logger.error(f"Erreur lors du chargement des sc√®nes: {e}")
            logger.info("Le syst√®me fonctionnera en mode d√©grad√© (sans persistance)")

    async def save_scene_to_sheets(self, scene_data: dict):
        """Sauvegarde une sc√®ne dans Google Sheets."""
        if not self.sheet:
            logger.warning("Impossible de sauvegarder la sc√®ne: Google Sheets non disponible")
            return
            
        try:
            channel_id = str(scene_data['channel_id'])
            
            # Chercher si la sc√®ne existe d√©j√†
            try:
                cell = self.sheet.find(channel_id)
                row = cell.row
            except gspread.CellNotFound:
                # Nouvelle sc√®ne, ajouter une nouvelle ligne
                row = len(self.sheet.get_all_values()) + 1
                
            # Pr√©parer les donn√©es (convertir les ID en strings pour √©viter la notation scientifique)
            row_data = [
                channel_id,
                str(scene_data['mj_id']),  # Convertir en string
                str(scene_data.get('status_message_id', '')),  # Convertir en string
                str(scene_data.get('status_channel_id', '')),  # Convertir en string
                scene_data['created_at'],
                scene_data.get('last_activity', ''),
                json.dumps(scene_data.get('participants', [])),
                str(scene_data.get('last_author_id', '')),  # Convertir en string
                scene_data['status']
            ]
            
            # Headers pour r√©f√©rence
            if row == 1:
                headers = ['channel_id', 'mj_id', 'status_message_id', 'status_channel_id', 
                          'created_at', 'last_activity', 'participants', 'last_author_id', 'status']
                self.sheet.insert_row(headers, 1)
                row = 2
                
            self.sheet.insert_row(row_data, row)
            
        except Exception as e:
            logger.error(f"Erreur sauvegarde Google Sheets: {e}")

    async def update_scene_mj(self, channel_id: str, new_mj_id: int):
        """Met √† jour le MJ responsable d'une sc√®ne."""
        if not self.sheet:
            logger.warning("Impossible de mettre √† jour le MJ: Google Sheets non disponible")
            return
            
        try:
            cell = self.sheet.find(channel_id)
            self.sheet.update_cell(cell.row, 2, str(new_mj_id))  # Colonne MJ - convertir en string
        except Exception as e:
            logger.error(f"Erreur mise √† jour MJ: {e}")

    async def update_scene_activity(self, channel_id: str, last_activity: str, 
                                  participants: List[int], last_author_id: int):
        """Met √† jour l'activit√© d'une sc√®ne."""
        if not self.sheet:
            logger.debug("Impossible de mettre √† jour l'activit√©: Google Sheets non disponible")
            return
            
        try:
            cell = self.sheet.find(channel_id)
            row = cell.row
            self.sheet.update_cell(row, 6, last_activity)  # last_activity
            self.sheet.update_cell(row, 7, json.dumps(participants))  # participants
            self.sheet.update_cell(row, 8, str(last_author_id))  # last_author_id - convertir en string
        except Exception as e:
            logger.error(f"Erreur mise √† jour activit√©: {e}")

    def detect_webhook_user(self, message: discord.Message) -> Optional[int]:
        """D√©tecte l'utilisateur r√©el derri√®re un message de webhook/bot RP."""
        # Patterns courants pour les bots RP (Tupperbox, PluralKit, etc.)
        if message.webhook_id:
            # Pour Tupperbox et similaires, chercher dans le nom/contenu
            webhook_name = message.author.display_name.lower()
            
            # Recherche de patterns dans le cache
            if webhook_name in self.webhook_users:
                return self.webhook_users[webhook_name]
                
            # Recherche par patterns dans le contenu ou footer
            if hasattr(message, 'embeds') and message.embeds:
                for embed in message.embeds:
                    if embed.footer and embed.footer.text:
                        # Pattern pour Tupperbox: "Sent by Username"
                        tupperbox_match = re.search(r'Sent by (\w+)', embed.footer.text)
                        if tupperbox_match:
                            username = tupperbox_match.group(1)
                            # Chercher l'utilisateur par nom
                            for member in message.guild.members:
                                if member.display_name.lower() == username.lower():
                                    self.webhook_users[webhook_name] = member.id
                                    return member.id
                                    
        return None

    async def create_scene_embed(self, channel_id: str) -> discord.Embed:
        """Cr√©e un embed √©l√©gant pour une sc√®ne surveill√©e."""
        if channel_id not in self.active_scenes:
            return None
            
        scene_data = self.active_scenes[channel_id]
        channel = self.bot.get_channel(int(channel_id))
        mj = self.bot.get_user(scene_data['mj_id'])
        
        # Couleur bas√©e sur l'activit√© r√©cente
        try:
            last_activity_str = scene_data.get('last_activity', scene_data.get('created_at', datetime.now().isoformat()))
            last_activity = datetime.fromisoformat(last_activity_str)
        except (ValueError, TypeError):
            last_activity = datetime.now()
            logger.warning(f"Erreur parsing last_activity pour sc√®ne {channel_id}")
            
        now = datetime.now()
        time_diff = now - last_activity
        
        if time_diff < timedelta(hours=6):
            color = discord.Color.green()  # Actif r√©cemment
        elif time_diff < timedelta(days=1):
            color = discord.Color.yellow()  # Activit√© mod√©r√©e
        elif time_diff < timedelta(days=3):
            color = discord.Color.orange()  # Peu actif
        else:
            color = discord.Color.red()  # Inactif
            
        embed = discord.Embed(
            title="üé≠ Surveillance de Sc√®ne RP",
            description=f"**Salon:** {channel.mention if channel else f'<#{channel_id}>'}\n"
                       f"**Type:** {channel.type.name.title() if channel else 'Inconnu'}",
            color=color,
            timestamp=datetime.now()
        )
        
        # MJ responsable
        embed.add_field(
            name="üé™ Ma√Ætre de Jeu",
            value=mj.mention if mj else f"<@{scene_data['mj_id']}>",
            inline=True
        )
        
        # Participants actifs
        participants = scene_data.get('participants', [])
        if participants:
            participant_mentions = []
            for p_id in participants[:10]:  # Limiter √† 10 pour √©viter les messages trop longs
                participant_mentions.append(f"<@{p_id}>")
            
            participants_text = ", ".join(participant_mentions)
            if len(participants) > 10:
                participants_text += f" et {len(participants) - 10} autres..."
                
            embed.add_field(
                name=f"üë• Participants ({len(participants)})",
                value=participants_text,
                inline=False
            )
        else:
            embed.add_field(
                name="üë• Participants",
                value="*Aucun participant d√©tect√©*",
                inline=False
            )
        
        # Derni√®re activit√©
        last_activity_str = scene_data.get('last_activity', 'Jamais')
        if last_activity_str != 'Jamais' and last_activity_str:
            try:
                last_activity_dt = datetime.fromisoformat(last_activity_str)
                embed.add_field(
                    name="‚è∞ Derni√®re activit√©",
                    value=f"<t:{int(last_activity_dt.timestamp())}:R>",
                    inline=True
                )
            except (ValueError, TypeError):
                embed.add_field(
                    name="‚è∞ Derni√®re activit√©",
                    value="Erreur de format",
                    inline=True
                )
        else:
            embed.add_field(
                name="‚è∞ Derni√®re activit√©",
                value="Jamais",
                inline=True
            )
        
        # Derni√®re action
        last_author_id = scene_data.get('last_author_id')
        if last_author_id:
            embed.add_field(
                name="‚úçÔ∏è Derni√®re action par",
                value=f"<@{last_author_id}>",
                inline=True
            )
        
        # Status indicator
        status_emoji = {
            timedelta(hours=6): "üü¢ Tr√®s actif",
            timedelta(days=1): "üü° Mod√©r√©ment actif", 
            timedelta(days=3): "üü† Peu actif",
            timedelta(days=7): "üî¥ Inactif"
        }
        
        for threshold, status in status_emoji.items():
            if time_diff < threshold:
                embed.add_field(name="üìä Statut", value=status, inline=True)
                break
        else:
            embed.add_field(name="üìä Statut", value="üî¥ Tr√®s inactif", inline=True)
        
        embed.set_footer(text="Surveillance automatique ‚Ä¢ Utilisez les boutons pour g√©rer la sc√®ne")
        
        return embed

    @app_commands.command(name="surveiller_scene", description="D√©marre la surveillance d'une sc√®ne RP")
    @app_commands.describe(
        channel="Le salon, thread ou forum √† surveiller (optionnel, utilise le salon actuel si non sp√©cifi√©)"
    )
    async def start_surveillance(self, interaction: discord.Interaction, 
                               channel: Optional[Union[discord.TextChannel, discord.Thread, discord.ForumChannel]] = None):
        """Commande pour d√©marrer la surveillance d'une sc√®ne."""
        
        if not self.has_mj_permission(interaction.user):
            await interaction.response.send_message("‚ùå Seuls les MJ peuvent utiliser cette commande.", ephemeral=True)
            return
            
        await interaction.response.defer()
        
        # Utiliser le salon actuel si non sp√©cifi√©
        target_channel = channel or interaction.channel
        channel_id = str(target_channel.id)
        
        # V√©rifier si d√©j√† surveill√©
        if channel_id in self.active_scenes:
            await interaction.followup.send(f"‚ùå Ce salon est d√©j√† surveill√© par <@{self.active_scenes[channel_id]['mj_id']}>", 
                                          ephemeral=True)
            return
        
        try:
            # Cr√©er les donn√©es de la sc√®ne
            now = datetime.now().isoformat()
            scene_data = {
                'channel_id': target_channel.id,
                'mj_id': interaction.user.id,
                'status_channel_id': interaction.channel.id,
                'created_at': now,
                'last_activity': now,
                'participants': [],
                'last_author_id': interaction.user.id,
                'status': 'active'
            }
            
            # Ajouter √† active_scenes AVANT de cr√©er l'embed
            self.active_scenes[channel_id] = scene_data
            
            # Cr√©er l'embed de surveillance
            embed = await self.create_scene_embed(channel_id)
            if not embed:
                await interaction.followup.send("‚ùå Erreur lors de la cr√©ation du message de surveillance.", ephemeral=True)
                # Nettoyer
                del self.active_scenes[channel_id]
                return
            
            view = SceneSurveillanceView(self, scene_data)
            
            # Envoyer le message de statut
            status_message = await interaction.followup.send(embed=embed, view=view)
            scene_data['status_message_id'] = status_message.id
            
            # Mettre √† jour avec l'ID du message
            self.active_scenes[channel_id] = scene_data
            await self.save_scene_to_sheets(scene_data)
            
            # Message de confirmation
            await interaction.followup.send(
                f"‚úÖ Surveillance d√©marr√©e pour {target_channel.mention}\n"
                f"üìã Message de suivi cr√©√© ci-dessus\n"
                f"üîî Vous recevrez des notifications priv√©es lors de nouvelle activit√©",
                ephemeral=True
            )
            
        except Exception as e:
            logger.error(f"Erreur lors du d√©marrage de surveillance: {e}")
            await interaction.followup.send("‚ùå Erreur lors du d√©marrage de la surveillance.", ephemeral=True)

    async def stop_scene_surveillance(self, channel_id: str):
        """Arr√™te la surveillance d'une sc√®ne."""
        if channel_id in self.active_scenes:
            # Mettre √† jour le statut dans Google Sheets
            if self.sheet:
                try:
                    cell = self.sheet.find(channel_id)
                    self.sheet.update_cell(cell.row, 9, 'closed')  # Status
                except:
                    pass
                    
            # Supprimer des sc√®nes actives
            del self.active_scenes[channel_id]

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        """Surveille les nouveaux messages dans les sc√®nes surveill√©es."""
        if not message.guild or message.author.bot:
            return
            
        channel_id = str(message.channel.id)
        if channel_id not in self.active_scenes:
            return
            
        scene_data = self.active_scenes[channel_id]
        
        # D√©terminer l'auteur r√©el (gestion webhooks)
        real_author_id = message.author.id
        if message.webhook_id:
            detected_user = self.detect_webhook_user(message)
            if detected_user:
                real_author_id = detected_user
        
        # Ignorer les messages du syst√®me et des bots (sauf webhooks RP)
        if message.type != discord.MessageType.default and not message.webhook_id:
            return
            
        # Mettre √† jour les donn√©es de la sc√®ne
        now = datetime.now().isoformat()
        participants = scene_data.get('participants', [])
        
        if real_author_id not in participants:
            participants.append(real_author_id)
            
        scene_data['last_activity'] = now
        scene_data['participants'] = participants
        scene_data['last_author_id'] = real_author_id
        
        # Mettre √† jour Google Sheets
        await self.update_scene_activity(channel_id, now, participants, real_author_id)
        
        # Notifier le MJ responsable
        await self.notify_mj(scene_data, message, real_author_id)
        
        # Mettre √† jour le message de statut
        await self.update_status_message(channel_id)

    async def notify_mj(self, scene_data: dict, message: discord.Message, real_author_id: int):
        """Envoie une notification priv√©e au MJ responsable."""
        mj = self.bot.get_user(scene_data['mj_id'])
        if not mj:
            return
            
        # √âviter le spam - ne notifier que si la derni√®re activit√© date de plus de 30 minutes
        last_activity = scene_data.get('last_activity')
        if last_activity:
            last_dt = datetime.fromisoformat(last_activity)
            if (datetime.now() - last_dt) < timedelta(minutes=30):
                return
        
        try:
            channel = message.channel
            author = self.bot.get_user(real_author_id) or message.author
            
            embed = discord.Embed(
                title="üîî Nouvelle activit√© dans une sc√®ne surveill√©e",
                description=f"**Salon:** {channel.mention}\n"
                           f"**Auteur:** {author.mention}\n"
                           f"**Message:** {message.content[:200]}{'...' if len(message.content) > 200 else ''}",
                color=discord.Color.blue(),
                timestamp=message.created_at
            )
            
            embed.add_field(name="üîó Lien direct", value=f"[Aller au message]({message.jump_url})", inline=True)
            
            await mj.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Erreur notification MJ: {e}")

    async def update_status_message(self, channel_id: str):
        """Met √† jour le message de statut d'une sc√®ne."""
        if channel_id not in self.active_scenes:
            return
            
        scene_data = self.active_scenes[channel_id]
        status_message_id = scene_data.get('status_message_id')
        status_channel_id = scene_data.get('status_channel_id')
        
        if not status_message_id or not status_channel_id:
            return
            
        try:
            status_channel = self.bot.get_channel(status_channel_id)
            if not status_channel:
                return
                
            status_message = await status_channel.fetch_message(status_message_id)
            embed = await self.create_scene_embed(channel_id)
            view = SceneSurveillanceView(self, scene_data)
            
            await status_message.edit(embed=embed, view=view)
            
        except Exception as e:
            logger.error(f"Erreur mise √† jour message statut: {e}")

    @tasks.loop(minutes=30)
    async def activity_monitor(self):
        """T√¢che de surveillance p√©riodique pour mettre √† jour les statuts."""
        for channel_id in list(self.active_scenes.keys()):
            await self.update_status_message(channel_id)

    @tasks.loop(hours=24)
    async def inactivity_checker(self):
        """V√©rifie l'inactivit√© des sc√®nes et envoie des alertes."""
        now = datetime.now()
        
        for channel_id, scene_data in self.active_scenes.items():
            last_activity = scene_data.get('last_activity')
            if not last_activity:
                continue
                
            last_activity_dt = datetime.fromisoformat(last_activity)
            time_diff = now - last_activity_dt
            
            # Alerte apr√®s 7 jours d'inactivit√©
            if time_diff >= timedelta(days=7):
                await self.send_inactivity_alert(scene_data, time_diff.days)

    async def send_inactivity_alert(self, scene_data: dict, days_inactive: int):
        """Envoie une alerte d'inactivit√© au MJ responsable."""
        mj = self.bot.get_user(scene_data['mj_id'])
        if not mj:
            return
            
        try:
            channel_id = scene_data['channel_id']
            
            embed = discord.Embed(
                title="‚ö†Ô∏è Alerte d'inactivit√© - Sc√®ne RP",
                description=f"La sc√®ne dans <#{channel_id}> n'a pas eu d'activit√© depuis **{days_inactive} jours**.",
                color=discord.Color.orange(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üéØ Actions recommand√©es",
                value="‚Ä¢ Relancer la sc√®ne avec les participants\n"
                      "‚Ä¢ Cl√¥turer la sc√®ne si elle est termin√©e\n"
                      "‚Ä¢ Transf√©rer √† un autre MJ si n√©cessaire",
                inline=False
            )
            
            embed.add_field(
                name="üîó G√©rer la sc√®ne",
                value=f"Utilisez les boutons du message de surveillance pour cl√¥turer ou transf√©rer la sc√®ne.",
                inline=False
            )
            
            await mj.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Erreur envoi alerte inactivit√©: {e}")

    @activity_monitor.before_loop
    async def before_activity_monitor(self):
        await self.bot.wait_until_ready()
        await asyncio.sleep(60)  # Attendre 1 minute apr√®s le d√©marrage
        await self.load_active_scenes()  # Charger les sc√®nes existantes

    @inactivity_checker.before_loop
    async def before_inactivity_checker(self):
        await self.bot.wait_until_ready()
        await asyncio.sleep(300)  # Attendre 5 minutes apr√®s le d√©marrage

    @app_commands.command(name="scenes_actives", description="Affiche la liste des sc√®nes actuellement surveill√©es")
    async def list_active_scenes(self, interaction: discord.Interaction):
        """Commande pour lister les sc√®nes actives."""
        if not self.has_mj_permission(interaction.user):
            await interaction.response.send_message("‚ùå Seuls les MJ peuvent utiliser cette commande.", ephemeral=True)
            return
            
        if not self.active_scenes:
            await interaction.response.send_message("üì≠ Aucune sc√®ne n'est actuellement surveill√©e.", ephemeral=True)
            return
            
        embed = discord.Embed(
            title="üìã Sc√®nes RP Surveill√©es",
            description=f"Total: {len(self.active_scenes)} sc√®ne(s) active(s)",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        
        for channel_id, scene_data in self.active_scenes.items():
            channel = self.bot.get_channel(int(channel_id))
            mj = self.bot.get_user(scene_data['mj_id'])
            
            last_activity = scene_data.get('last_activity', 'Jamais')
            if last_activity != 'Jamais':
                last_activity_dt = datetime.fromisoformat(last_activity)
                time_since = f"<t:{int(last_activity_dt.timestamp())}:R>"
            else:
                time_since = "Jamais"
                
            embed.add_field(
                name=f"üé≠ {channel.name if channel else f'Canal #{channel_id}'}",
                value=f"**MJ:** {mj.mention if mj else 'Inconnu'}\n"
                      f"**Participants:** {len(scene_data.get('participants', []))}\n"
                      f"**Derni√®re activit√©:** {time_since}",
                inline=True
            )
        
        await interaction.response.send_message(embed=embed, ephemeral=True)


async def setup(bot):
    """Fonction d'installation du cog."""
    await bot.add_cog(SceneSurveillance(bot))