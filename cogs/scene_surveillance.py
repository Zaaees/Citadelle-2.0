"""
Syst√®me de surveillance automatique pour les sc√®nes de jeu de r√¥le Discord.
Permet aux ma√Ætres de jeu (MJ) de suivre l'activit√© des joueurs et recevoir des notifications.
"""

import discord
from discord.ext import commands, tasks
from discord import app_commands
from datetime import datetime, timedelta
import pytz
import traceback
import os
import asyncio
import gspread
from google.oauth2 import service_account
import logging
import json
from typing import Dict, List, Optional, Set, Tuple, Union
import re

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SceneSurveillanceView(discord.ui.View):
    """Vue avec boutons interactifs pour la surveillance des sc√®nes."""
    
    def __init__(self, cog, scene_data: dict):
        super().__init__(timeout=None)
        self.cog = cog
        self.scene_data = scene_data

    @discord.ui.button(label="üü¢ Reprendre la sc√®ne", style=discord.ButtonStyle.green, custom_id="take_over_scene")
    async def take_over_scene(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Permet √† un autre MJ de reprendre la responsabilit√© d'une sc√®ne."""
        await interaction.response.defer(ephemeral=True)
        
        if not self.cog.has_mj_permission(interaction.user):
            await interaction.followup.send("‚ùå Seuls les MJ peuvent utiliser cette fonction.", ephemeral=True)
            return
            
        channel_id = str(self.scene_data['channel_id'])
        old_mj_id = self.scene_data['mj_id']
        new_mj_id = interaction.user.id
        
        if old_mj_id == new_mj_id:
            await interaction.followup.send("‚ùå Vous √™tes d√©j√† le MJ responsable de cette sc√®ne.", ephemeral=True)
            return
            
        try:
            # Mettre √† jour dans Google Sheets
            await self.cog.update_scene_mj(channel_id, new_mj_id)
            
            # Mettre √† jour les donn√©es locales
            self.scene_data['mj_id'] = new_mj_id
            self.cog.active_scenes[channel_id]['mj_id'] = new_mj_id
            
            # Mettre √† jour le message
            embed = await self.cog.create_scene_embed(channel_id)
            await interaction.edit_original_response(embed=embed, view=self)
            
            # Notification √† l'ancien et nouveau MJ
            old_mj = self.cog.bot.get_user(old_mj_id)
            if old_mj:
                try:
                    await old_mj.send(f"üìã **Transfert de sc√®ne**\n"
                                    f"{interaction.user.mention} a repris la responsabilit√© de la sc√®ne dans <#{channel_id}>")
                except:
                    pass
                    
            await interaction.followup.send(f"‚úÖ Vous √™tes maintenant responsable de la sc√®ne dans <#{channel_id}>", ephemeral=True)
            
        except Exception as e:
            logger.error(f"Erreur lors du transfert de sc√®ne: {e}")
            await interaction.followup.send("‚ùå Erreur lors du transfert de la sc√®ne.", ephemeral=True)

    @discord.ui.button(label="üî¥ Cl√¥turer la sc√®ne", style=discord.ButtonStyle.red, custom_id="close_scene")
    async def close_scene(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Cl√¥ture une sc√®ne surveill√©e."""
        await interaction.response.defer(ephemeral=True)
        
        if not self.cog.has_mj_permission(interaction.user):
            await interaction.followup.send("‚ùå Seuls les MJ peuvent utiliser cette fonction.", ephemeral=True)
            return
            
        channel_id = str(self.scene_data['channel_id'])
        
        try:
            # Supprimer la surveillance
            await self.cog.stop_scene_surveillance(channel_id)
            
            # Mettre √† jour le message pour indiquer que la sc√®ne est ferm√©e
            embed = discord.Embed(
                title="üî¥ Sc√®ne Cl√¥tur√©e",
                description=f"La surveillance de <#{channel_id}> a √©t√© arr√™t√©e.",
                color=discord.Color.red(),
                timestamp=datetime.now()
            )
            embed.add_field(name="Cl√¥tur√©e par", value=interaction.user.mention, inline=True)
            
            # D√©sactiver les boutons
            for item in self.children:
                item.disabled = True
                
            await interaction.edit_original_response(embed=embed, view=self)
            await interaction.followup.send("‚úÖ Sc√®ne cl√¥tur√©e avec succ√®s.", ephemeral=True)
            
        except Exception as e:
            logger.error(f"Erreur lors de la cl√¥ture de sc√®ne: {e}")
            await interaction.followup.send("‚ùå Erreur lors de la cl√¥ture de la sc√®ne.", ephemeral=True)


class SceneSurveillance(commands.Cog):
    """Syst√®me de surveillance automatique pour les sc√®nes de jeu de r√¥le."""
    
    def __init__(self, bot):
        self.bot = bot
        self.paris_tz = pytz.timezone('Europe/Paris')
        self.active_scenes: Dict[str, dict] = {}  # channel_id -> scene_data
        self.mj_role_id = 1018179623886000278  # ID du r√¥le MJ (√† adapter)
        
        # Configuration Google Sheets (optionnelle)
        try:
            service_account_json = os.getenv('SERVICE_ACCOUNT_JSON', '{}')
            if service_account_json == '{}':
                raise ValueError("SERVICE_ACCOUNT_JSON non configur√©")
                
            self.credentials = service_account.Credentials.from_service_account_info(
                eval(service_account_json),
                scopes=['https://www.googleapis.com/auth/spreadsheets']
            )
            self.gc = gspread.authorize(self.credentials)
            
            # Ouvrir la feuille de calcul
            spreadsheet_id = os.getenv('GOOGLE_SHEET_ID_SURVEILLANCE', os.getenv('GOOGLE_SHEET_ID_ACTIVITE'))
            if not spreadsheet_id:
                raise ValueError("GOOGLE_SHEET_ID non configur√©")
                
            spreadsheet = self.gc.open_by_key(spreadsheet_id)
            
            # Essayer d'acc√©der √† la feuille SceneSurveillance, la cr√©er si elle n'existe pas
            try:
                self.sheet = spreadsheet.worksheet('SceneSurveillance')
                logger.info("Feuille SceneSurveillance trouv√©e")
            except gspread.WorksheetNotFound:
                logger.info("Cr√©ation de la feuille SceneSurveillance...")
                self.sheet = spreadsheet.add_worksheet('SceneSurveillance', rows=1000, cols=10)
                
                # Ajouter les en-t√™tes
                headers = [
                    'channel_id', 'mj_id', 'status_message_id', 'status_channel_id',
                    'created_at', 'last_activity', 'participants', 'last_author_id', 'status'
                ]
                self.sheet.insert_row(headers, 1)
                
                # Formater les en-t√™tes
                self.sheet.format('A1:I1', {
                    'backgroundColor': {'red': 0.2, 'green': 0.6, 'blue': 0.9},
                    'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}},
                    'horizontalAlignment': 'CENTER'
                })
                
                logger.info("‚úÖ Feuille SceneSurveillance cr√©√©e et configur√©e")
                
        except Exception as e:
            logger.warning(f"Google Sheets non disponible: {e}")
            logger.info("SceneSurveillance fonctionnera en mode d√©grad√© (sans persistance)")
            self.sheet = None
            self.gc = None
            
        # D√©marrer les t√¢ches de surveillance
        self.activity_monitor.start()
        self.inactivity_checker.start()

    def cog_unload(self):
        """Nettoie les ressources lors du d√©chargement du cog."""
        try:
            if self.activity_monitor.is_running():
                self.activity_monitor.cancel()
            if self.inactivity_checker.is_running():
                self.inactivity_checker.cancel()
        except Exception as e:
            logger.error(f"Erreur lors de l'arr√™t des t√¢ches: {e}")

    def has_mj_permission(self, user: discord.Member) -> bool:
        """V√©rifie si un utilisateur a le r√¥le MJ."""
        # V√©rifier que c'est bien un Member (pas juste un User)
        if not isinstance(user, discord.Member):
            return False
        return any(role.id == self.mj_role_id for role in user.roles)

    async def load_active_scenes(self):
        """Charge les sc√®nes actives depuis Google Sheets."""
        if not self.sheet:
            logger.warning("Aucune feuille Google Sheets disponible pour charger les sc√®nes")
            return
            
        try:
            records = self.sheet.get_all_records()
            logger.info(f"üìä Nombre de records trouv√©s dans Google Sheets: {len(records)}")
            scenes_loaded = 0
            
            for record in records:
                if record.get('status') == 'active' and record.get('channel_id'):
                    try:
                        channel_id_str = str(record['channel_id']).strip()
                        
                        # V√©rifier que le canal existe encore
                        channel = self.bot.get_channel(int(channel_id_str))
                        if not channel:
                            logger.warning(f"‚ö†Ô∏è Canal {channel_id_str} introuvable lors du chargement")
                            continue
                        
                        # Parser les participants avec gestion d'erreur robuste
                        participants_raw = record.get('participants', '[]')
                        try:
                            if isinstance(participants_raw, str):
                                participants = json.loads(participants_raw)
                            else:
                                participants = participants_raw if isinstance(participants_raw, list) else []
                        except json.JSONDecodeError:
                            logger.warning(f"‚ö†Ô∏è Erreur parsing participants pour {channel_id_str}, utilisation liste vide")
                            participants = []
                        
                        self.active_scenes[channel_id_str] = {
                            'channel_id': int(channel_id_str),
                            'mj_id': int(str(record.get('mj_id', 0)).strip() or 0),
                            'status_message_id': int(str(record.get('status_message_id', 0)).strip() or 0),
                            'status_channel_id': int(str(record.get('status_channel_id', 0)).strip() or 0),
                            'created_at': record.get('created_at', ''),
                            'last_activity': record.get('last_activity', ''),
                            'participants': participants,
                            'last_author_id': int(str(record.get('last_author_id', 0)).strip() or 0),
                            'status': 'active'
                        }
                        scenes_loaded += 1
                        logger.info(f"‚úÖ Sc√®ne charg√©e: {channel.name} ({channel_id_str})")
                        
                    except Exception as e:
                        logger.warning(f"Erreur parsing sc√®ne {record.get('channel_id')}: {e}")
                        continue
                        
            logger.info(f"‚úÖ {scenes_loaded} sc√®nes actives charg√©es depuis Google Sheets")
            
        except Exception as e:
            logger.error(f"Erreur lors du chargement des sc√®nes: {e}")
            logger.error(f"üìã D√©tails: {str(e)}")
            import traceback
            logger.error(f"üìã Traceback: {traceback.format_exc()}")
            logger.info("Le syst√®me fonctionnera en mode d√©grad√© (sans persistance)")

    async def save_scene_to_sheets(self, scene_data: dict):
        """Sauvegarde une sc√®ne dans Google Sheets."""
        if not self.sheet:
            logger.warning("Impossible de sauvegarder la sc√®ne: Google Sheets non disponible")
            return
            
        try:
            channel_id = str(scene_data['channel_id'])
            
            # Chercher si la sc√®ne existe d√©j√†
            try:
                cell = self.sheet.find(channel_id)
                row = cell.row
            except gspread.CellNotFound:
                # Nouvelle sc√®ne, ajouter une nouvelle ligne
                row = len(self.sheet.get_all_values()) + 1
                
            # Pr√©parer les donn√©es (convertir les ID en strings pour √©viter la notation scientifique)
            row_data = [
                channel_id,
                str(scene_data['mj_id']),  # Convertir en string
                str(scene_data.get('status_message_id', '')),  # Convertir en string
                str(scene_data.get('status_channel_id', '')),  # Convertir en string
                scene_data['created_at'],
                scene_data.get('last_activity', ''),
                json.dumps(scene_data.get('participants', [])),
                str(scene_data.get('last_author_id', '')),  # Convertir en string
                scene_data['status']
            ]
            
            # Headers pour r√©f√©rence
            if row == 1:
                headers = ['channel_id', 'mj_id', 'status_message_id', 'status_channel_id', 
                          'created_at', 'last_activity', 'participants', 'last_author_id', 'status']
                self.sheet.insert_row(headers, 1)
                row = 2
                
            self.sheet.insert_row(row_data, row)
            
        except Exception as e:
            logger.error(f"Erreur sauvegarde Google Sheets: {e}")

    async def update_scene_mj(self, channel_id: str, new_mj_id: int):
        """Met √† jour le MJ responsable d'une sc√®ne."""
        if not self.sheet:
            logger.warning("Impossible de mettre √† jour le MJ: Google Sheets non disponible")
            return
            
        try:
            cell = self.sheet.find(channel_id)
            self.sheet.update_cell(cell.row, 2, str(new_mj_id))  # Colonne MJ - convertir en string
        except Exception as e:
            logger.error(f"Erreur mise √† jour MJ: {e}")

    async def update_scene_activity(self, channel_id: str, last_activity: str, 
                                  participants: List[int], last_author_id: int):
        """Met √† jour l'activit√© d'une sc√®ne."""
        if not self.sheet:
            logger.debug("Impossible de mettre √† jour l'activit√©: Google Sheets non disponible")
            return
            
        try:
            cell = self.sheet.find(channel_id)
            row = cell.row
            self.sheet.update_cell(row, 6, last_activity)  # last_activity
            self.sheet.update_cell(row, 7, json.dumps(participants))  # participants
            self.sheet.update_cell(row, 8, str(last_author_id))  # last_author_id - convertir en string
        except Exception as e:
            logger.error(f"Erreur mise √† jour activit√©: {e}")


    async def create_scene_embed(self, channel_id: str) -> discord.Embed:
        """Cr√©e un embed √©l√©gant pour une sc√®ne surveill√©e."""
        if channel_id not in self.active_scenes:
            return None
            
        scene_data = self.active_scenes[channel_id]
        channel = self.bot.get_channel(int(channel_id))
        mj = self.bot.get_user(scene_data['mj_id'])
        
        # Couleur bas√©e sur l'activit√© r√©cente
        try:
            last_activity_str = scene_data.get('last_activity', scene_data.get('created_at', datetime.now().isoformat()))
            last_activity = datetime.fromisoformat(last_activity_str)
        except (ValueError, TypeError):
            last_activity = datetime.now()
            logger.warning(f"Erreur parsing last_activity pour sc√®ne {channel_id}")
            
        now = datetime.now()
        
        # Uniformiser les timezones pour √©viter l'erreur offset-naive vs offset-aware
        if last_activity.tzinfo is not None and now.tzinfo is None:
            # last_activity a une timezone, now n'en a pas ‚Üí convertir last_activity en naive
            last_activity = last_activity.replace(tzinfo=None)
        elif last_activity.tzinfo is None and now.tzinfo is not None:
            # now a une timezone, last_activity n'en a pas ‚Üí convertir now en naive  
            now = now.replace(tzinfo=None)
            
        time_diff = now - last_activity
        
        if time_diff < timedelta(hours=6):
            color = discord.Color.green()  # Actif r√©cemment
        elif time_diff < timedelta(days=1):
            color = discord.Color.yellow()  # Activit√© mod√©r√©e
        elif time_diff < timedelta(days=3):
            color = discord.Color.orange()  # Peu actif
        else:
            color = discord.Color.red()  # Inactif
            
        embed = discord.Embed(
            title="üé≠ Surveillance de Sc√®ne RP",
            description=f"**Salon:** {channel.mention if channel else f'<#{channel_id}>'}\n"
                       f"**Type:** {channel.type.name.title() if channel else 'Inconnu'}",
            color=color
            # Timestamp sera d√©fini par la fonction appelante pour le tri
        )
        
        # MJ responsable
        embed.add_field(
            name="üé™ Ma√Ætre de Jeu",
            value=mj.mention if mj else f"<@{scene_data['mj_id']}>",
            inline=True
        )
        
        # Participants actifs
        participants = scene_data.get('participants', [])
        if participants:
            participant_mentions = []
            for p_id in participants[:10]:  # Limiter √† 10 pour √©viter les messages trop longs
                # Essayer de r√©cup√©rer l'utilisateur/membre
                user = self.bot.get_user(p_id)
                if user:
                    # Si c'est un utilisateur normal, utiliser mention
                    if not user.bot:
                        participant_mentions.append(user.mention)
                    else:
                        # Si c'est un bot (webhook), afficher le nom
                        participant_mentions.append(f"**{user.display_name}**")
                else:
                    # Si on ne trouve pas l'utilisateur, utiliser l'ID
                    participant_mentions.append(f"<@{p_id}>")
            
            participants_text = ", ".join(participant_mentions)
            if len(participants) > 10:
                participants_text += f" et {len(participants) - 10} autres..."
                
            embed.add_field(
                name=f"üë• Participants ({len(participants)})",
                value=participants_text,
                inline=False
            )
        else:
            embed.add_field(
                name="üë• Participants",
                value="*Aucun participant d√©tect√©*",
                inline=False
            )
        
        # Derni√®re activit√©
        last_activity_str = scene_data.get('last_activity', 'Jamais')
        if last_activity_str != 'Jamais' and last_activity_str:
            try:
                last_activity_dt = datetime.fromisoformat(last_activity_str)
                embed.add_field(
                    name="‚è∞ Derni√®re activit√©",
                    value=f"<t:{int(last_activity_dt.timestamp())}:R>",
                    inline=True
                )
            except (ValueError, TypeError):
                embed.add_field(
                    name="‚è∞ Derni√®re activit√©",
                    value="Erreur de format",
                    inline=True
                )
        else:
            embed.add_field(
                name="‚è∞ Derni√®re activit√©",
                value="Jamais",
                inline=True
            )
        
        # Derni√®re action
        last_author_id = scene_data.get('last_author_id')
        if last_author_id:
            embed.add_field(
                name="‚úçÔ∏è Derni√®re action par",
                value=f"<@{last_author_id}>",
                inline=True
            )
        
        # Status indicator
        status_emoji = {
            timedelta(hours=6): "üü¢ Tr√®s actif",
            timedelta(days=1): "üü° Mod√©r√©ment actif", 
            timedelta(days=3): "üü† Peu actif",
            timedelta(days=7): "üî¥ Inactif"
        }
        
        for threshold, status in status_emoji.items():
            if time_diff < threshold:
                embed.add_field(name="üìä Statut", value=status, inline=True)
                break
        else:
            embed.add_field(name="üìä Statut", value="üî¥ Tr√®s inactif", inline=True)
        
        embed.set_footer(text="Surveillance automatique ‚Ä¢ Utilisez les boutons pour g√©rer la sc√®ne")
        
        return embed

    @app_commands.command(name="mj", description="Affiche la liste des commandes MJ disponibles")
    async def mj_commands(self, interaction: discord.Interaction):
        """Commande pour lister toutes les commandes MJ disponibles."""
        
        if not self.has_mj_permission(interaction.user):
            await interaction.response.send_message("‚ùå Seuls les MJ peuvent utiliser cette commande.", ephemeral=True)
            return
        
        embed = discord.Embed(
            title="üé≠ Commandes MJ Disponibles",
            description="Liste des commandes pr√©fix√©es `!` accessibles aux MJ et Admins",
            color=discord.Color.gold(),
            timestamp=datetime.now()
        )
        
        # Commandes de surveillance
        embed.add_field(
            name="üé¨ Surveillance de Sc√®nes",
            value="`!surveiller_scene [canal]` - D√©marre la surveillance automatique d'une sc√®ne RP\n"
                  "`!scenes_actives` - Liste les sc√®nes actuellement surveill√©es\n"
                  "`!reload_scenes` - Recharge les sc√®nes depuis Google Sheets (diagnostic d√©taill√©)\n"
                  "`!sync_scenes` - Force la synchronisation de toutes les sc√®nes (mise √† jour imm√©diate)\n"
                  "`!reattribuer_scene @nouveau_mj [canal]` - R√©attribue une sc√®ne √† un autre MJ\n"
                  "üì° *Scanner automatique toutes les 5 min pour d√©tecter l'activit√© r√©elle*",
            inline=False
        )
        
        # Commandes d'inventaire
        embed.add_field(
            name="üèÖ Gestion Inventaire", 
            value="`!medaille @user nombre` - Ajouter des m√©dailles\n"
                  "`!unmedaille @user nombre` - Retirer des m√©dailles\n"
                  "`!lier nom_personnage @user` - Associer personnage √† utilisateur",
            inline=False
        )
        
        # Commandes cartes (Admin uniquement)
        embed.add_field(
            name="üé¥ Gestion Cartes (Admin)",
            value="`!initialiser_forum_cartes` - Initialise structure forum cartes\n"
                  "`!reconstruire_mur [cat√©gorie]` - Reconstruit le mur de cartes\n"
                  "`!galerie [@user]` - Affiche galerie cartes d'un utilisateur\n"
                  "`!give_bonus @user nombre source` - Donner cartes bonus\n"
                  "`!logs_cartes [user_id] [limit]` - Voir logs cartes\n"
                  "`!stats_logs` - Statistiques des logs\n"
                  "`!verifier_full_automatique` - V√©rifie conversions Full auto\n"
                  "`!verifier_integrite` - V√©rifie int√©grit√© donn√©es cartes",
            inline=False
        )
        
        # Commandes syst√®me
        embed.add_field(
            name="‚öôÔ∏è Syst√®me",
            value="`!validation` - Envoie le message de validation\n"
                  "`!ajouter-sous-element` - Ajouter un nouveau sous-√©l√©ment\n"
                  "`!verifier_inactifs` - V√©rifier utilisateurs inactifs\n"
                  "`!bumpstatus` - √âtat du syst√®me de bump",
            inline=False
        )
        
        embed.set_footer(text="üí° Utilisez ! devant chaque commande ‚Ä¢ Commandes visibles uniquement par vous")
        
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @commands.command(name="sync_commands", help="Force la synchronisation des commandes slash (MJ uniquement)")
    async def sync_commands(self, ctx):
        """Commande pour forcer la synchronisation des commandes slash."""
        
        if not self.has_mj_permission(ctx.author):
            await ctx.send("‚ùå Seuls les MJ peuvent utiliser cette commande.")
            return
        
        try:
            # Nettoyer d'abord les commandes du serveur pour √©viter les doublons
            await ctx.send("üßπ Nettoyage des commandes du serveur...")
            self.bot.tree.clear_commands(guild=ctx.guild)
            
            # Synchronisation propre pour ce serveur sp√©cifiquement
            await ctx.send("üîÑ Synchronisation propre des commandes...")
            synced = await self.bot.tree.sync(guild=ctx.guild)
            await ctx.send(f"‚úÖ {len(synced)} commandes synchronis√©es PROPREMENT pour ce serveur !")
            logger.info(f"üîÑ Sync forc√©e PROPRE par {ctx.author}: {len(synced)} commandes (sans doublons)")
        except Exception as e:
            await ctx.send(f"‚ùå Erreur lors de la synchronisation: {e}")
            logger.error(f"‚ùå Erreur sync forc√©e: {e}")

    @commands.command(name="debug_commands", help="Diagnostiquer les commandes du bot (MJ uniquement)")
    async def debug_commands(self, ctx):
        """Commande pour diagnostiquer l'√©tat des commandes du bot."""
        
        if not self.has_mj_permission(ctx.author):
            await ctx.send("‚ùå Seuls les MJ peuvent utiliser cette commande.")
            return
        
        try:
            # Compter les commandes dans le tree
            guild_commands = self.bot.tree.get_commands(guild=ctx.guild)
            global_commands = self.bot.tree.get_commands(guild=None)
            
            embed = discord.Embed(
                title="üîç Diagnostic des Commandes",
                color=discord.Color.blue(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üìä Commandes dans le Tree",
                value=f"Serveur: {len(guild_commands)}\nGlobales: {len(global_commands)}",
                inline=True
            )
            
            # Lister les commandes du serveur
            if guild_commands:
                guild_names = [f"`/{cmd.name}`" for cmd in guild_commands[:10]]
                embed.add_field(
                    name="üéØ Commandes Serveur",
                    value="\n".join(guild_names) + ("..." if len(guild_commands) > 10 else ""),
                    inline=False
                )
            
            # Informations sur les cogs
            cog_count = len(self.bot.cogs)
            embed.add_field(
                name="üß© Extensions Charg√©es",
                value=f"{cog_count} cogs actifs",
                inline=True
            )
            
            await ctx.send(embed=embed)
            logger.info(f"üîç Debug commandes par {ctx.author}: {len(guild_commands)} serveur, {len(global_commands)} global")
            
        except Exception as e:
            await ctx.send(f"‚ùå Erreur lors du diagnostic: {e}")
            logger.error(f"‚ùå Erreur debug commandes: {e}")

    @commands.command(name="surveiller_scene", help="D√©marre la surveillance d'une sc√®ne RP")
    async def start_surveillance(self, ctx: commands.Context, 
                               channel: Optional[Union[discord.TextChannel, discord.Thread, discord.ForumChannel]] = None):
        """Commande pour d√©marrer la surveillance d'une sc√®ne."""
        
        if not self.has_mj_permission(ctx.author):
            await ctx.send("‚ùå Seuls les MJ peuvent utiliser cette commande.")
            return
        
        # Utiliser le salon actuel si non sp√©cifi√©
        target_channel = channel or ctx.channel
        channel_id = str(target_channel.id)
        
        # V√©rifier si d√©j√† surveill√©
        if channel_id in self.active_scenes:
            await ctx.send(f"‚ùå Ce salon est d√©j√† surveill√© par <@{self.active_scenes[channel_id]['mj_id']}>")
            return
        
        try:
            logger.info(f"üöÄ D√©marrage surveillance pour canal {target_channel.id} par {ctx.author.id}")
            
            # Scanner l'historique r√©cent pour initialiser les donn√©es correctement
            participants = []
            last_activity = datetime.now().isoformat()
            last_author_id = ctx.author.id
            
            try:
                logger.info(f"üìã Scan historique canal {target_channel.name}...")
                # R√©cup√©rer les 50 derniers messages pour analyser l'activit√©
                first_message = True
                async for message in target_channel.history(limit=50):
                    if message.author.bot and not message.webhook_id:
                        continue  # Ignorer les bots non-webhook
                    
                    # Pour les webhooks (Tupperbot, etc.), on utilise directement l'ID de l'auteur du webhook
                    real_user_id = message.author.id
                    
                    # Ajouter aux participants s'il n'y est pas d√©j√†
                    if real_user_id not in participants:
                        participants.append(real_user_id)
                    
                    # Le premier message valide (le plus r√©cent) d√©finit la derni√®re activit√©
                    if first_message:
                        last_activity = message.created_at.isoformat()
                        last_author_id = real_user_id
                        first_message = False
                        
            except Exception as e:
                logger.warning(f"Erreur lors du scan de l'historique: {e}")
            
            logger.info(f"‚úÖ Scan termin√©: {len(participants)} participants trouv√©s")
            
            # Cr√©er les donn√©es de la sc√®ne avec les vraies donn√©es
            now = datetime.now().isoformat()
            scene_data = {
                'channel_id': target_channel.id,
                'mj_id': ctx.author.id,
                'status_channel_id': ctx.channel.id,
                'created_at': now,
                'last_activity': last_activity,
                'participants': participants,
                'last_author_id': last_author_id,
                'status': 'active'
            }
            
            # Ajouter √† active_scenes AVANT de cr√©er l'embed
            logger.info(f"üíæ Ajout sc√®ne aux actives: {channel_id}")
            self.active_scenes[channel_id] = scene_data
            
            # Cr√©er l'embed de surveillance
            logger.info(f"üé® Cr√©ation embed surveillance...")
            embed = await self.create_scene_embed(channel_id)
            if not embed:
                await ctx.send("‚ùå Erreur lors de la cr√©ation du message de surveillance.")
                # Nettoyer
                del self.active_scenes[channel_id]
                return
            
            # Appliquer le timestamp de tri d√®s la cr√©ation
            sort_timestamp = self.calculate_sort_timestamp(scene_data)
            embed.timestamp = sort_timestamp
            
            view = SceneSurveillanceView(self, scene_data)
            
            # Envoyer le message de statut comme message ind√©pendant (pas de r√©ponse)
            logger.info(f"üì§ Envoi message surveillance...")
            status_message = await ctx.channel.send(embed=embed, view=view)
            scene_data['status_message_id'] = status_message.id
            logger.info(f"‚úÖ Message envoy√©: {status_message.id}")
            
            # Mettre √† jour avec l'ID du message
            self.active_scenes[channel_id] = scene_data
            await self.save_scene_to_sheets(scene_data)
            
            # R√©ponse silencieuse - pas de message de confirmation
            logger.info(f"‚úÖ Surveillance d√©marr√©e pour {target_channel.name}")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du d√©marrage de surveillance: {e}")
            logger.error(f"üîç Type erreur: {type(e).__name__}")
            logger.error(f"üîç D√©tails: {str(e)}")
            import traceback
            logger.error(f"üîç Traceback: {traceback.format_exc()}")
            await ctx.send(f"‚ùå Erreur lors du d√©marrage de la surveillance: {e}")

    async def stop_scene_surveillance(self, channel_id: str):
        """Arr√™te la surveillance d'une sc√®ne."""
        if channel_id in self.active_scenes:
            # Mettre √† jour le statut dans Google Sheets
            if self.sheet:
                try:
                    cell = self.sheet.find(channel_id)
                    self.sheet.update_cell(cell.row, 9, 'closed')  # Status
                except:
                    pass
                    
            # Supprimer des sc√®nes actives
            del self.active_scenes[channel_id]

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        """Surveille les nouveaux messages dans les sc√®nes surveill√©es."""
        if not message.guild:
            return
            
        # Ignorer les bots SAUF les webhooks RP (qui sont des bots techniques mais repr√©sentent des joueurs)
        if message.author.bot and not message.webhook_id:
            return
            
        channel_id = str(message.channel.id)
        if channel_id not in self.active_scenes:
            return
            
        scene_data = self.active_scenes[channel_id]
        
        # D√©terminer l'auteur r√©el (gestion webhooks)
        # Pour les webhooks (Tupperbot, etc.), on utilise directement l'ID de l'auteur du webhook
        real_author_id = message.author.id
        
        # Ignorer les messages du syst√®me et des bots (sauf webhooks RP)
        if message.type != discord.MessageType.default and not message.webhook_id:
            return
            
        # Mettre √† jour les donn√©es de la sc√®ne
        now = datetime.now().isoformat()
        participants = scene_data.get('participants', [])
        
        if real_author_id not in participants:
            participants.append(real_author_id)
            
        scene_data['last_activity'] = now
        scene_data['participants'] = participants
        scene_data['last_author_id'] = real_author_id
        
        # Mettre √† jour Google Sheets
        await self.update_scene_activity(channel_id, now, participants, real_author_id)
        
        # Notifier le MJ responsable
        await self.notify_mj(scene_data, message, real_author_id)
        
        # Mettre √† jour le message de statut
        await self.update_status_message(channel_id)

    # Les √©v√©nements on_message_delete sont remplac√©s par le scanner p√©riodique
    # qui d√©tecte automatiquement tous les changements d'activit√©

    async def notify_mj(self, scene_data: dict, message: discord.Message, real_author_id: int):
        """Envoie une notification priv√©e au MJ responsable."""
        mj = self.bot.get_user(scene_data['mj_id'])
        if not mj:
            return
            
        # √âviter le spam - ne notifier que si la derni√®re activit√© date de plus de 30 minutes
        last_activity = scene_data.get('last_activity')
        if last_activity:
            last_dt = datetime.fromisoformat(last_activity)
            if (datetime.now() - last_dt) < timedelta(minutes=30):
                return
        
        try:
            channel = message.channel
            author = self.bot.get_user(real_author_id) or message.author
            
            embed = discord.Embed(
                title="üîî Nouvelle activit√© dans une sc√®ne surveill√©e",
                description=f"**Salon:** {channel.mention}\n"
                           f"**Auteur:** {author.mention}\n"
                           f"**Message:** {message.content[:200]}{'...' if len(message.content) > 200 else ''}",
                color=discord.Color.blue(),
                timestamp=message.created_at
            )
            
            embed.add_field(name="üîó Lien direct", value=f"[Aller au message]({message.jump_url})", inline=True)
            
            await mj.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Erreur notification MJ: {e}")

    def calculate_sort_timestamp(self, scene_data: dict) -> datetime:
        """Calcule un timestamp de tri pour que les sc√®nes inactives remontent."""
        try:
            last_activity_str = scene_data.get('last_activity', scene_data.get('created_at', datetime.now().isoformat()))
            last_activity = datetime.fromisoformat(last_activity_str)
        except (ValueError, TypeError):
            last_activity = datetime.now()
        
        now = datetime.now()
        
        # Uniformiser les timezones pour √©viter l'erreur offset-naive vs offset-aware
        if last_activity.tzinfo is not None and now.tzinfo is None:
            # last_activity a une timezone, now n'en a pas ‚Üí convertir now en naive
            last_activity = last_activity.replace(tzinfo=None)
        elif last_activity.tzinfo is None and now.tzinfo is not None:
            # now a une timezone, last_activity n'en a pas ‚Üí convertir last_activity en naive  
            now = now.replace(tzinfo=None)
            
        time_diff = now - last_activity
        
        # Logique de tri : plus c'est inactif, plus le timestamp est r√©cent (pour remonter)
        # Base : timestamp actuel moins l'inactivit√© (invers√©)
        if time_diff < timedelta(hours=6):
            # Tr√®s actif : timestamp ancien (reste en bas)
            sort_timestamp = now - timedelta(days=7)
        elif time_diff < timedelta(days=1):
            # Mod√©r√©ment actif : timestamp un peu plus r√©cent
            sort_timestamp = now - timedelta(days=5)
        elif time_diff < timedelta(days=3):
            # Peu actif : timestamp plus r√©cent
            sort_timestamp = now - timedelta(days=2)
        else:
            # Inactif : timestamp tr√®s r√©cent (remonte en haut)
            # Plus c'est inactif, plus √ßa remonte
            days_inactive = min(time_diff.days, 30)  # Cap √† 30 jours
            sort_timestamp = now - timedelta(hours=days_inactive)
            
        return sort_timestamp

    async def update_status_message(self, channel_id: str, force_reorder: bool = False):
        """Met √† jour le message de statut d'une sc√®ne avec tri intelligent."""
        if channel_id not in self.active_scenes:
            return
            
        scene_data = self.active_scenes[channel_id]
        status_message_id = scene_data.get('status_message_id')
        status_channel_id = scene_data.get('status_channel_id')
        
        if not status_message_id or not status_channel_id:
            return
            
        try:
            status_channel = self.bot.get_channel(status_channel_id)
            if not status_channel:
                return
                
            status_message = await status_channel.fetch_message(status_message_id)
            embed = await self.create_scene_embed(channel_id)
            view = SceneSurveillanceView(self, scene_data)
            
            # Calculer le timestamp de tri pour l'embed
            sort_timestamp = self.calculate_sort_timestamp(scene_data)
            embed.timestamp = sort_timestamp
            
            await status_message.edit(embed=embed, view=view)
            
        except Exception as e:
            logger.error(f"Erreur mise √† jour message statut: {e}")

    @tasks.loop(minutes=5)
    async def activity_monitor(self):
        """T√¢che de surveillance p√©riodique qui scanne l'historique r√©el des canaux."""
        logger.info(f"üîÑ Scanner p√©riodique de {len(self.active_scenes)} sc√®nes surveill√©es...")
        
        for channel_id in list(self.active_scenes.keys()):
            try:
                # Scanner l'historique r√©el du canal pour d√©tecter les changements
                await self.scan_channel_activity(channel_id)
                # Mettre √† jour le message de statut
                await self.update_status_message(channel_id)
                # Petit d√©lai pour √©viter le rate limiting
                await asyncio.sleep(1)
            except Exception as e:
                logger.error(f"Erreur lors du scan de la sc√®ne {channel_id}: {e}")
                
        logger.info("‚úÖ Scanner p√©riodique termin√©")

    async def scan_channel_activity(self, channel_id: str):
        """Scanne l'historique r√©el d'un canal pour d√©tecter l'activit√© actuelle."""
        if channel_id not in self.active_scenes:
            return
            
        scene_data = self.active_scenes[channel_id]
        channel = self.bot.get_channel(int(channel_id))
        
        if not channel:
            logger.warning(f"Canal {channel_id} introuvable pour scan activit√©")
            return
            
        try:
            # Scanner les 100 derniers messages pour √™tre s√ªr de capturer l'activit√©
            current_participants = []
            current_last_activity = None
            current_last_author_id = None
            
            logger.debug(f"üîç Scan historique canal {channel.name}...")
            
            async for message in channel.history(limit=100):
                # Ignorer les bots syst√®me mais garder les webhooks RP
                if message.author.bot and not message.webhook_id:
                    continue
                    
                # Ignorer les messages syst√®me (sauf pour les webhooks qui peuvent avoir des types sp√©ciaux)
                if message.type != discord.MessageType.default and not message.webhook_id:
                    continue
                    
                # D√©terminer l'auteur r√©el
                # Pour les webhooks (Tupperbot, etc.), on utilise directement l'ID de l'auteur du webhook
                real_author_id = message.author.id
                
                # Ajouter aux participants
                if real_author_id not in current_participants:
                    current_participants.append(real_author_id)
                
                # Le premier message valide est le plus r√©cent (derni√®re activit√©)
                if current_last_activity is None:
                    current_last_activity = message.created_at.isoformat()
                    current_last_author_id = real_author_id
                    
            # V√©rifier s'il y a eu des changements
            old_last_activity = scene_data.get('last_activity')
            old_participants = set(scene_data.get('participants', []))
            new_participants = set(current_participants)
            
            changes_detected = False
            
            # D√©tecter les changements d'activit√©
            if current_last_activity != old_last_activity:
                changes_detected = True
                logger.info(f"üîÑ Changement d'activit√© d√©tect√© pour {channel_id}")
                
            # D√©tecter les changements de participants
            if old_participants != new_participants:
                changes_detected = True
                added = new_participants - old_participants
                removed = old_participants - new_participants
                if added:
                    logger.info(f"‚ûï Nouveaux participants d√©tect√©s pour {channel_id}: {len(added)}")
                if removed:
                    logger.info(f"‚ûñ Participants supprim√©s d√©tect√©s pour {channel_id}: {len(removed)}")
            
            # Mettre √† jour les donn√©es si n√©cessaire
            if changes_detected:
                if current_last_activity:
                    scene_data['last_activity'] = current_last_activity
                    scene_data['last_author_id'] = current_last_author_id
                else:
                    # Aucun message trouv√©, marquer comme inactive depuis la cr√©ation
                    scene_data['last_activity'] = scene_data.get('created_at', datetime.now().isoformat())
                    scene_data['last_author_id'] = scene_data.get('mj_id')
                
                scene_data['participants'] = current_participants
                self.active_scenes[channel_id] = scene_data
                
                # Sauvegarder dans Google Sheets
                await self.update_scene_activity(
                    channel_id, 
                    scene_data['last_activity'], 
                    current_participants, 
                    scene_data['last_author_id']
                )
                
                logger.info(f"‚úÖ Donn√©es mises √† jour pour {channel_id}: {len(current_participants)} participants")
            else:
                logger.debug(f"‚úì Aucun changement pour {channel_id}")
                
        except Exception as e:
            logger.error(f"Erreur lors du scan d'activit√© pour {channel_id}: {e}")

    @tasks.loop(hours=24)
    async def inactivity_checker(self):
        """V√©rifie l'inactivit√© des sc√®nes et envoie des alertes."""
        try:
            logger.info("üîç D√©marrage v√©rification inactivit√© des sc√®nes...")
            now = datetime.now()
            
            for channel_id, scene_data in self.active_scenes.items():
                last_activity = scene_data.get('last_activity')
                if not last_activity:
                    continue
                
                try:
                    last_activity_dt = datetime.fromisoformat(last_activity)
                except (ValueError, TypeError):
                    continue
                
                # Uniformiser les timezones pour √©viter l'erreur offset-naive vs offset-aware
                if last_activity_dt.tzinfo is not None and now.tzinfo is None:
                    # last_activity_dt a une timezone, now n'en a pas ‚Üí convertir last_activity_dt en naive
                    last_activity_dt = last_activity_dt.replace(tzinfo=None)
                elif last_activity_dt.tzinfo is None and now.tzinfo is not None:
                    # now a une timezone, last_activity_dt n'en a pas ‚Üí convertir now en naive  
                    now = now.replace(tzinfo=None)
                    
                time_diff = now - last_activity_dt
                
                # Alerte apr√®s 7 jours d'inactivit√©
                if time_diff >= timedelta(days=7):
                    # V√©rifier si une alerte a d√©j√† √©t√© envoy√©e r√©cemment
                    last_alert = scene_data.get('last_alert_sent')
                    should_send_alert = True
                    
                    if last_alert:
                        try:
                            last_alert_dt = datetime.fromisoformat(last_alert)
                            # Uniformiser les timezones - CORRECTION BUG CRITIQUE
                            if last_alert_dt.tzinfo is not None and now.tzinfo is None:
                                last_alert_dt = last_alert_dt.replace(tzinfo=None)
                                now_for_alert = now  # CORRIG√â: now_for_alert √©tait non d√©fini
                            elif last_alert_dt.tzinfo is None and now.tzinfo is not None:
                                now_for_alert = now.replace(tzinfo=None)
                            else:
                                now_for_alert = now
                                
                            time_since_alert = now_for_alert - last_alert_dt
                            # Ne envoyer qu'une alerte par jour maximum
                            should_send_alert = time_since_alert >= timedelta(hours=23)
                        except (ValueError, TypeError):
                            should_send_alert = True
                    
                    if should_send_alert:
                        success = await self.send_inactivity_alert(scene_data, time_diff.days)
                        if success:
                            # Mettre √† jour la date de derni√®re alerte
                            scene_data['last_alert_sent'] = now.isoformat()
                            self.active_scenes[channel_id] = scene_data
                            # Sauvegarder en Google Sheets si possible
                            await self.update_scene_alert_date(channel_id, now.isoformat())
            
            logger.info("‚úÖ V√©rification inactivit√© termin√©e")
        except Exception as e:
            logger.error(f"‚ùå ERREUR CRITIQUE dans inactivity_checker: {e}")
            logger.error(f"üîç Traceback: {traceback.format_exc()}")
            # Ne pas faire planter le bot, juste logger l'erreur

    async def send_inactivity_alert(self, scene_data: dict, days_inactive: int) -> bool:
        """Envoie une alerte d'inactivit√© au MJ responsable. Retourne True si envoy√©e avec succ√®s."""
        mj = self.bot.get_user(scene_data['mj_id'])
        if not mj:
            logger.warning(f"MJ {scene_data['mj_id']} introuvable pour alerte inactivit√©")
            return False
            
        try:
            channel_id = scene_data['channel_id']
            
            embed = discord.Embed(
                title="‚ö†Ô∏è Alerte d'inactivit√© - Sc√®ne RP",
                description=f"La sc√®ne dans <#{channel_id}> n'a pas eu d'activit√© depuis **{days_inactive} jours**.",
                color=discord.Color.orange(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üéØ Actions recommand√©es",
                value="‚Ä¢ Relancer la sc√®ne avec les participants\n"
                      "‚Ä¢ Cl√¥turer la sc√®ne si elle est termin√©e\n"
                      "‚Ä¢ Transf√©rer √† un autre MJ si n√©cessaire",
                inline=False
            )
            
            embed.add_field(
                name="üîó G√©rer la sc√®ne",
                value=f"Utilisez les boutons du message de surveillance pour cl√¥turer ou transf√©rer la sc√®ne.",
                inline=False
            )
            
            await mj.send(embed=embed)
            logger.info(f"üì® Alerte inactivit√© envoy√©e au MJ {mj.display_name} pour sc√®ne {channel_id}")
            return True
            
        except Exception as e:
            logger.error(f"Erreur envoi alerte inactivit√©: {e}")
            return False

    async def update_scene_alert_date(self, channel_id: str, alert_date: str):
        """Met √† jour la date de derni√®re alerte d'une sc√®ne dans Google Sheets."""
        if not self.sheet:
            logger.debug("Impossible de mettre √† jour date alerte: Google Sheets non disponible")
            return
            
        try:
            # Trouver la ligne de la sc√®ne et mettre √† jour la colonne de derni√®re alerte
            # (On assumera qu'une nouvelle colonne sera ajout√©e au Google Sheets pour cela)
            cell = self.sheet.find(channel_id)
            # Colonne 8 pour last_alert_sent (√† ajuster selon votre structure)
            self.sheet.update_cell(cell.row, 8, alert_date)
        except Exception as e:
            logger.error(f"Erreur mise √† jour date alerte: {e}")

    @activity_monitor.before_loop
    async def before_activity_monitor(self):
        await self.bot.wait_until_ready()
        await asyncio.sleep(60)  # Attendre 1 minute apr√®s le d√©marrage
        await self.load_active_scenes()  # Charger les sc√®nes existantes
        
        # Faire un scan initial complet pour d√©tecter les changements pendant que le bot √©tait hors ligne
        logger.info("üöÄ Scanner initial complet au d√©marrage...")
        for channel_id in list(self.active_scenes.keys()):
            try:
                await self.scan_channel_activity(channel_id)
                await asyncio.sleep(2)  # D√©lai plus long pour √©viter le rate limiting au d√©marrage
            except Exception as e:
                logger.error(f"Erreur scan initial {channel_id}: {e}")
        logger.info("‚úÖ Scanner initial termin√©")

    @inactivity_checker.before_loop
    async def before_inactivity_checker(self):
        await self.bot.wait_until_ready()
        await asyncio.sleep(300)  # Attendre 5 minutes apr√®s le d√©marrage


    @app_commands.command(name="scenes_actives", description="Affiche la liste des sc√®nes actuellement surveill√©es")
    async def list_active_scenes(self, interaction: discord.Interaction):
        """Commande pour lister les sc√®nes actives."""
        if not self.has_mj_permission(interaction.user):
            await interaction.response.send_message("‚ùå Seuls les MJ peuvent utiliser cette commande.", ephemeral=True)
            return
            
        if not self.active_scenes:
            await interaction.response.send_message("üì≠ Aucune sc√®ne n'est actuellement surveill√©e.", ephemeral=True)
            return
            
        embed = discord.Embed(
            title="üìã Sc√®nes RP Surveill√©es",
            description=f"Total: {len(self.active_scenes)} sc√®ne(s) active(s)",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        
        for channel_id, scene_data in self.active_scenes.items():
            channel = self.bot.get_channel(int(channel_id))
            mj = self.bot.get_user(scene_data['mj_id'])
            
            last_activity = scene_data.get('last_activity', 'Jamais')
            if last_activity != 'Jamais':
                last_activity_dt = datetime.fromisoformat(last_activity)
                time_since = f"<t:{int(last_activity_dt.timestamp())}:R>"
            else:
                time_since = "Jamais"
                
            embed.add_field(
                name=f"üé≠ {channel.name if channel else f'Canal #{channel_id}'}",
                value=f"**MJ:** {mj.mention if mj else 'Inconnu'}\n"
                      f"**Participants:** {len(scene_data.get('participants', []))}\n"
                      f"**Derni√®re activit√©:** {time_since}",
                inline=True
            )
        
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @commands.command(name="reload_scenes", help="Recharge les sc√®nes depuis Google Sheets (MJ uniquement)")
    async def reload_scenes(self, ctx: commands.Context):
        """Recharge les sc√®nes actives depuis Google Sheets avec diagnostic d√©taill√©."""
        
        if not self.has_mj_permission(ctx.author):
            await ctx.send("‚ùå Seuls les MJ peuvent utiliser cette commande.")
            return
        
        if not self.sheet:
            await ctx.send("‚ùå Google Sheets non disponible. V√©rifiez la configuration.")
            return
        
        # Message de d√©but
        progress_msg = await ctx.send("üîÑ Rechargement des sc√®nes depuis Google Sheets...")
        
        try:
            # Sauvegarder l'ancien √©tat
            old_count = len(self.active_scenes)
            
            # Vider les sc√®nes actuelles
            self.active_scenes.clear()
            
            # Recharger depuis Google Sheets avec diagnostic
            records = self.sheet.get_all_records()
            logger.info(f"üìä Nombre de records trouv√©s dans Google Sheets: {len(records)}")
            
            scenes_loaded = 0
            scenes_skipped = 0
            errors = []
            
            for i, record in enumerate(records):
                try:
                    # Diagnostic d√©taill√© de chaque record
                    status = record.get('status', '')
                    channel_id = record.get('channel_id', '')
                    
                    logger.info(f"üîç Record {i+1}: channel_id={channel_id}, status={status}")
                    
                    if status == 'active' and channel_id:
                        channel_id_str = str(channel_id).strip()
                        
                        # V√©rifier que le canal existe encore
                        channel = self.bot.get_channel(int(channel_id_str))
                        if not channel:
                            logger.warning(f"‚ö†Ô∏è Canal {channel_id_str} introuvable, sc√®ne ignor√©e")
                            scenes_skipped += 1
                            continue
                        
                        # Parser les participants avec gestion d'erreur
                        participants_raw = record.get('participants', '[]')
                        try:
                            if isinstance(participants_raw, str):
                                participants = json.loads(participants_raw)
                            else:
                                participants = participants_raw if isinstance(participants_raw, list) else []
                        except json.JSONDecodeError:
                            logger.warning(f"‚ö†Ô∏è Erreur parsing participants pour {channel_id_str}")
                            participants = []
                        
                        self.active_scenes[channel_id_str] = {
                            'channel_id': int(channel_id_str),
                            'mj_id': int(str(record.get('mj_id', 0)).strip() or 0),
                            'status_message_id': int(str(record.get('status_message_id', 0)).strip() or 0),
                            'status_channel_id': int(str(record.get('status_channel_id', 0)).strip() or 0),
                            'created_at': record.get('created_at', ''),
                            'last_activity': record.get('last_activity', ''),
                            'participants': participants,
                            'last_author_id': int(str(record.get('last_author_id', 0)).strip() or 0),
                            'status': 'active'
                        }
                        scenes_loaded += 1
                        logger.info(f"‚úÖ Sc√®ne charg√©e: {channel.name} ({channel_id_str})")
                    else:
                        scenes_skipped += 1
                        logger.debug(f"‚è≠Ô∏è Record ignor√©: status={status}, channel_id={channel_id}")
                        
                except Exception as e:
                    error_msg = f"Erreur record {i+1} (channel_id={record.get('channel_id', 'N/A')}): {e}"
                    errors.append(error_msg)
                    logger.error(f"‚ùå {error_msg}")
                    continue
            
            # R√©sultats
            embed = discord.Embed(
                title="üìä Rechargement des Sc√®nes",
                color=discord.Color.blue(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üìà R√©sultats",
                value=f"üÜï Sc√®nes charg√©es: {scenes_loaded}\n"
                      f"‚è≠Ô∏è Records ignor√©s: {scenes_skipped}\n"
                      f"‚ùå Erreurs: {len(errors)}\n"
                      f"üìä Total records: {len(records)}",
                inline=True
            )
            
            embed.add_field(
                name="üîÑ Changement",
                value=f"Avant: {old_count} sc√®nes\n"
                      f"Apr√®s: {len(self.active_scenes)} sc√®nes",
                inline=True
            )
            
            if errors:
                error_text = "\n".join(errors[:3])  # Limiter √† 3 erreurs
                if len(errors) > 3:
                    error_text += f"\n... et {len(errors) - 3} autres"
                embed.add_field(name="‚ùå Erreurs", value=f"```{error_text[:1000]}```", inline=False)
            
            if scenes_loaded > 0:
                # Lister quelques sc√®nes charg√©es
                scene_names = []
                for channel_id in list(self.active_scenes.keys())[:5]:
                    channel = self.bot.get_channel(int(channel_id))
                    scene_names.append(channel.name if channel else f"Canal #{channel_id}")
                
                scenes_text = "\n".join(scene_names)
                if len(self.active_scenes) > 5:
                    scenes_text += f"\n... et {len(self.active_scenes) - 5} autres"
                    
                embed.add_field(name="üé≠ Sc√®nes Charg√©es", value=scenes_text, inline=False)
            
            await progress_msg.edit(content="", embed=embed)
            logger.info(f"‚úÖ Rechargement termin√©: {scenes_loaded} sc√®nes charg√©es")
            
        except Exception as e:
            error_embed = discord.Embed(
                title="‚ùå Erreur de Rechargement",
                description=f"Erreur critique: {str(e)[:1000]}",
                color=discord.Color.red(),
                timestamp=datetime.now()
            )
            
            await progress_msg.edit(content="", embed=error_embed)
            logger.error(f"‚ùå Erreur critique lors du rechargement: {e}")
            import traceback
            logger.error(f"üìã Traceback: {traceback.format_exc()}")

    @commands.command(name="sync_scenes", help="Force la synchronisation de toutes les sc√®nes surveill√©es (MJ uniquement)")
    async def sync_all_scenes(self, ctx: commands.Context):
        """Force la synchronisation de toutes les sc√®nes surveill√©es."""
        
        if not self.has_mj_permission(ctx.author):
            await ctx.send("‚ùå Seuls les MJ peuvent utiliser cette commande.")
            return
        
        if not self.active_scenes:
            await ctx.send("üì≠ Aucune sc√®ne n'est actuellement surveill√©e.")
            return
        
        # Message de d√©but
        progress_msg = await ctx.send(f"üîÑ D√©but de la synchronisation de {len(self.active_scenes)} sc√®ne(s)...")
        
        synced_count = 0
        error_count = 0
        
        try:
            for i, channel_id in enumerate(list(self.active_scenes.keys()), 1):
                try:
                    # Scanner l'activit√© du canal
                    logger.info(f"üîÑ Synchronisation sc√®ne {i}/{len(self.active_scenes)}: {channel_id}")
                    await self.scan_channel_activity(channel_id)
                    
                    # Mettre √† jour le message de statut
                    await self.update_status_message(channel_id)
                    
                    synced_count += 1
                    
                    # Mettre √† jour le message de progression toutes les 3 sc√®nes
                    if i % 3 == 0 or i == len(self.active_scenes):
                        try:
                            await progress_msg.edit(content=f"üîÑ Synchronisation en cours... {i}/{len(self.active_scenes)} sc√®nes trait√©es")
                        except discord.NotFound:
                            # Le message a √©t√© supprim√©, continuer sans mise √† jour
                            pass
                    
                    # Respecter les limites Discord - pause de 2 secondes entre chaque sc√®ne
                    if i < len(self.active_scenes):  # Pas de pause apr√®s la derni√®re
                        await asyncio.sleep(2)
                        
                except Exception as e:
                    logger.error(f"Erreur lors de la sync de la sc√®ne {channel_id}: {e}")
                    error_count += 1
                    # Continuer avec les autres sc√®nes m√™me si une √©choue
                    continue
            
            # Message de fin
            embed = discord.Embed(
                title="‚úÖ Synchronisation Termin√©e",
                color=discord.Color.green(),
                timestamp=datetime.now()
            )
            embed.add_field(name="üìä R√©sultats", value=f"‚úÖ R√©ussies: {synced_count}\n‚ùå Erreurs: {error_count}", inline=True)
            embed.add_field(name="‚è±Ô∏è Dur√©e", value=f"~{len(self.active_scenes) * 2} secondes", inline=True)
            
            if error_count > 0:
                embed.add_field(name="‚ö†Ô∏è Note", value="Consultez les logs pour plus de d√©tails sur les erreurs.", inline=False)
            
            try:
                await progress_msg.edit(content="", embed=embed)
            except discord.NotFound:
                await ctx.send(embed=embed)
                
            logger.info(f"‚úÖ Synchronisation termin√©e: {synced_count} r√©ussies, {error_count} erreurs")
            
        except Exception as e:
            error_embed = discord.Embed(
                title="‚ùå Erreur de Synchronisation",
                description=f"Une erreur critique s'est produite: {str(e)[:1000]}",
                color=discord.Color.red(),
                timestamp=datetime.now()
            )
            
            try:
                await progress_msg.edit(content="", embed=error_embed)
            except discord.NotFound:
                await ctx.send(embed=error_embed)
                
            logger.error(f"‚ùå Erreur critique lors de la synchronisation: {e}")

    @commands.command(name="reattribuer_scene", help="R√©attribue une sc√®ne surveill√©e √† un autre MJ")
    async def reassign_scene(self, ctx: commands.Context, 
                           nouveau_mj: discord.Member,
                           channel: Optional[Union[discord.TextChannel, discord.Thread, discord.ForumChannel]] = None):
        """Commande pour r√©attribuer une sc√®ne surveill√©e √† un autre MJ."""
        
        # V√©rifier que l'utilisateur a les permissions MJ
        if not self.has_mj_permission(ctx.author):
            await ctx.send("‚ùå Seuls les MJ peuvent utiliser cette commande.")
            return
        
        # V√©rifier que le nouveau MJ a aussi les permissions MJ
        if not self.has_mj_permission(nouveau_mj):
            await ctx.send(f"‚ùå {nouveau_mj.mention} n'a pas le r√¥le MJ requis.")
            return
        
        # Utiliser le salon actuel si non sp√©cifi√©
        target_channel = channel or ctx.channel
        channel_id = str(target_channel.id)
        
        # V√©rifier que la sc√®ne est surveill√©e
        if channel_id not in self.active_scenes:
            await ctx.send(f"‚ùå Le salon {target_channel.mention} n'est pas actuellement surveill√©.")
            return
        
        scene_data = self.active_scenes[channel_id]
        ancien_mj_id = scene_data['mj_id']
        
        # V√©rifier qu'il y a effectivement un changement
        if ancien_mj_id == nouveau_mj.id:
            await ctx.send(f"‚ùå {nouveau_mj.mention} est d√©j√† le MJ responsable de cette sc√®ne.")
            return
        
        try:
            # Mettre √† jour les donn√©es locales
            scene_data['mj_id'] = nouveau_mj.id
            self.active_scenes[channel_id] = scene_data
            
            # Mettre √† jour dans Google Sheets
            await self.update_scene_mj(channel_id, nouveau_mj.id)
            
            # Mettre √† jour le message de surveillance s'il existe
            await self.update_status_message(channel_id)
            
            # Notifications
            ancien_mj = self.bot.get_user(ancien_mj_id)
            
            # Message de confirmation publique
            embed = discord.Embed(
                title="üîÑ Sc√®ne R√©attribu√©e",
                description=f"La responsabilit√© de la surveillance de {target_channel.mention} a √©t√© transf√©r√©e.",
                color=discord.Color.blue(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üé≠ Ancien MJ", 
                value=ancien_mj.mention if ancien_mj else f"<@{ancien_mj_id}>", 
                inline=True
            )
            embed.add_field(
                name="üé™ Nouveau MJ", 
                value=nouveau_mj.mention, 
                inline=True
            )
            embed.add_field(
                name="üë§ R√©attribu√© par", 
                value=ctx.author.mention, 
                inline=True
            )
            
            await ctx.send(embed=embed)
            
            # Notification priv√©e √† l'ancien MJ
            if ancien_mj and ancien_mj.id != ctx.author.id:
                try:
                    embed_notification = discord.Embed(
                        title="üìã Transfert de Responsabilit√©",
                        description=f"La surveillance de {target_channel.mention} vous a √©t√© retir√©e.",
                        color=discord.Color.orange(),
                        timestamp=datetime.now()
                    )
                    embed_notification.add_field(
                        name="üé™ Nouveau MJ responsable", 
                        value=nouveau_mj.mention, 
                        inline=True
                    )
                    embed_notification.add_field(
                        name="üë§ Changement effectu√© par", 
                        value=ctx.author.mention, 
                        inline=True
                    )
                    await ancien_mj.send(embed=embed_notification)
                except discord.HTTPException:
                    logger.warning(f"Impossible d'envoyer notification √† l'ancien MJ {ancien_mj_id}")
            
            # Notification priv√©e au nouveau MJ (si diff√©rent de celui qui fait la commande)
            if nouveau_mj.id != ctx.author.id:
                try:
                    embed_notification = discord.Embed(
                        title="üé≠ Nouvelle Responsabilit√©",
                        description=f"Vous √™tes maintenant responsable de la surveillance de {target_channel.mention}.",
                        color=discord.Color.green(),
                        timestamp=datetime.now()
                    )
                    embed_notification.add_field(
                        name="üë§ Attribu√© par", 
                        value=ctx.author.mention, 
                        inline=True
                    )
                    embed_notification.add_field(
                        name="üìä Participants actuels", 
                        value=f"{len(scene_data.get('participants', []))} participant(s)", 
                        inline=True
                    )
                    await nouveau_mj.send(embed=embed_notification)
                except discord.HTTPException:
                    logger.warning(f"Impossible d'envoyer notification au nouveau MJ {nouveau_mj.id}")
            
            logger.info(f"üîÑ Sc√®ne {channel_id} r√©attribu√©e: {ancien_mj_id} ‚Üí {nouveau_mj.id} par {ctx.author.id}")
            
        except Exception as e:
            logger.error(f"Erreur lors de la r√©attribution de sc√®ne: {e}")
            await ctx.send("‚ùå Erreur lors de la r√©attribution de la sc√®ne. Consultez les logs pour plus de d√©tails.")


async def setup(bot):
    """Fonction d'installation du cog."""
    await bot.add_cog(SceneSurveillance(bot))